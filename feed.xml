<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Max Böck</title>
    <subtitle>Max Böck is a professional front-end developer based in Vienna, Austria.</subtitle>
    <link href="https://mxb.dev/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://mxb.dev" rel="alternate" type="text/html"/>
    <author>
        <name>Max Böck</name>
    </author>
    
    <updated>2023-01-30T00:00:00Z</updated>
    
    <id>https://mxb.dev/</id>
        <entry>
            <title>7 Reasons why I don&#39;t write</title>
            <link href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/"/>
            <updated>2023-01-30T00:00:00Z</updated>
            <id>https://mxb.dev/blog/seven-reasons-why-i-dont-write/</id>
            <content type="html"><![CDATA[
                <p class="lead">I have recently been made aware that the frequency of new content published on my site has gone down quite a bit.</p>
<p>Ok fine, I <a href="https://front-end.social/@matuzo/109768438608948867">trash-talked Manuel’s website</a> on Mastodon and he correctly pointed out that while I wrote an impressive two (2) blogposts last year, he wrote around 90 (while also doing talks, audits, raising an infant daughter and probably training for a marathon or some shit like that, I mean let’s face it the guy is annoyingly productive).</p>
<p>I know I was slacking off a bit and those numbers speak for themselves. While I generally want to write, ideas rarely make it all the way to a published post.</p>
<p>Like many others, <em>“write more”</em> is high up on my imaginary list of life improvements and although I don’t usually do new year’s resolutions, now feels like a good time to re-evaluate what’s stopping me there.</p>
<p>I came up with seven reasons that I use to justify why I’m not writing. In a confusing twist of perspective, I’m also going to try and talk myself out of them by explaining to you, dear Reader, why they are bullshit.</p>
<div class="u-align-center" aria-hidden="true" style="font-size:2em">···</div>
<h2 id="h-i-don%E2%80%99t-have-time"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-i-don%E2%80%99t-have-time" aria-hidden="true">#</a> I don’t have time</h2>
<p>This is the big one, right? We all have other things to do, and writing takes time. In my case, I’ve been really swamped with client projects and other work last year.</p>
<p>I think if you actually want to write though, it’s more a lack of routine than a lack of time itself. People who consistently produce content have learned to make a habit out of it. I read <a href="https://jamesclear.com/atomic-habits">“Atomic Habits”</a> by James Clear a couple of months ago and its message kinda stuck with me. It’s about conditioning yourself to do certain things more often by building a routine.</p>
<p>Take 15 minutes every day before you check your email and <a href="https://www.sarasoueidan.com/desk/just-write/">just write</a>. Or do it on your commute to work if possible! The trick is to use amounts of time that are so small you can’t possibly <strong>not</strong> fit them in your schedule. It may not be enough for a fully-fledged article, but enough to build a habit.</p>
<p>It’s also worth noting that your writing doesn’t always have to be well-crafted longform blogposts. It can just be a few paragraphs about your thoughts, linking out to other stuff. <a href="https://chriscoyier.net/">Chris</a> does a great job at this, and others have recently adopted <a href="https://nerdy.dev/">even shorter</a> <a href="https://jhey.dev/">formats</a>, mimicking social media posts in length.</p>
<h2 id="h-i-don%E2%80%99t-have-anything-interesting-to-say"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-i-don%E2%80%99t-have-anything-interesting-to-say" aria-hidden="true">#</a> I don’t have anything interesting to say</h2>
<p>The classic impostor syndrome comes out here. I don’t know anything special, so why bother?</p>
<p>The truth is that <em>everyone</em> has something interesting to say because everyone faces different challenges. You don’t have to go viral and make buzzword-riddled thinkpieces about the current hot topic - There’s enough sites who already do that, and <a href="https://maggieappleton.com/ai-dark-forest">AI will soon produce a shitton more of it</a>.</p>
<p>A better plan is to write about what you know and experience in your day-to-day life instead. Authentic posts are always helpful, and you will solidify your own knowledge in the process too.</p>
<p>Here are a few common writing prompts and examples for blogposts I love to read:</p>
<ul>
<li><strong>“I learnt something” (<abbr title="Today I learned">TIL</abbr>)</strong><br />
Michelle Barker: <a href="https://css-irl.info/quick-tip-negative-animation-delay/">Negative Animation Delay</a></li>
<li><strong>“I noticed something”</strong><br />
Dave Rupert: <a href="https://daverupert.com/2023/01/shadow-banned-by-duckduckgo-and-bing/">I’m Shadow Banned by DuckDuckGo (and Bing)</a></li>
<li><strong>“I built something”</strong><br />
Lynn Fisher: <a href="https://lynnandtonic.com/thoughts/entries/case-study-2022-refresh/">lynnandtonic.com Refresh</a></li>
<li><strong>Year in Review</strong><br />
Sophie Koonin: <a href="https://localghost.dev/blog/2022-the-year-in-lists/">2022: The year in lists</a></li>
<li><strong>Personal Stuff!</strong><br />
Cassie Evans: <a href="https://www.cassie.codes/posts/my-typical-day/">My typical day</a></li>
</ul>
<h2 id="h-i-gotta-fix-%5Bx%5D-on-my-site-first"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-i-gotta-fix-%5Bx%5D-on-my-site-first" aria-hidden="true">#</a> I gotta fix [X] on my site first</h2>
<p>This one is especially popular among developers. “How can I possibly write anything before the typography is perfect? How can I ever publish anything when comments are not implemented yet?” We love to tinker with our websites and that’s cool, but at some point it gets in the way of actually <em>using</em> your blog and creating content.</p>
<p>Despite what we tell ourselves, it really doesn’t matter too much how a blog looks or what features it has. People come for the content, and as long as they can read it, they’re happy. Throw in an RSS feed so everyone can use their own reader and you’re golden. It pains me to say it but <a href="https://front-end.social/@matuzo/109768438608948867">Manuel is absolutely correct</a> here.</p>
<p>And if he can be “redesigning in the open” for three years while churning out massive amounts of CSS knowledge, your site will be fine too. 😉</p>
<h2 id="h-others-have-already-written-about-this"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-others-have-already-written-about-this" aria-hidden="true">#</a> Others have already written about this</h2>
<p>Sometimes I’ve got a great idea for a post, but an initial Google search reveals that someone else already beat me to it. The novelty has worn off and that other post is way better than what I could have come up with anyway, I tell myself.</p>
<p>That’s not a real reason of course, nobody has a monopoly on a subject. Others may have already covered the topic - but not in your voice, not from your perspective. You could write a post about the exact same thing and still provide valuable information the other author has missed. Or you could approach the subject from a different angle, for a different skill-level or for a different audience.</p>
<p>Another way is to read the material that is already available and take notes about all the questions you still have afterwards. Try to actually do the thing (write the code, use the app, whatever) and see what other information would have been helpful for you to have. Write that!</p>
<h2 id="h-the-moment-for-this-has-passed"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-the-moment-for-this-has-passed" aria-hidden="true">#</a> The moment for this has passed</h2>
<p>There are writing ideas that are inspired by some event or conversation. Maybe something big happened on the web or I’ve had a particularly interesting discussion on social media. So I sketch out a quick outline for a post and stick it in my <code>drafts</code> folder, thinking I’ll get back to it later.</p>
<p>Three weeks pass and that lonely draft sits around gathering dust, and by the time I remember it, the moment has passed. The conversation has moved on, and so the post is abandoned and eventually deleted.</p>
<p>The internet moves pretty fast and there’s always a “hot topic of the day”, but that doesn’t mean that nobody is interested in anything else. A beautiful thing about blogs is that they’re asynchronous. You can just write things and put them out there, and even if they don’t hit a nerve immediately, people can discover them in their own time.</p>
<p>Older posts can also get re-discovered years later and get a second wind, not to mention that people constantly search for specific things - and your post might be just what they’re looking for then! Some of my old posts about <a href="https://mxb.dev/blog/webring-kit/">webrings</a> and the IndieWeb have recently found readers again since Twitter has started going down the drain. You never know!</p>
<h2 id="h-i-can%E2%80%99t-get-it-to-sound-right"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-i-can%E2%80%99t-get-it-to-sound-right" aria-hidden="true">#</a> I can’t get it to sound right</h2>
<p>Most of the (tech) blogs I read are in English, even though its authors are from all over the world. For a non-native english speaker like myself, it can sometimes be daunting to write in a foreign language. This is a barrier when it comes to producing “polished” text - there’s extra brain cycles involved in getting your ideas to “sound” right.</p>
<p>This is probably not a big deal though. People don’t expect to read world-class literature when they come to check out a blogpost about “Lobster Mode”. As long as you can get your point across, it’s fine if you don’t use fancy words. It can also be an advantage: for an international audience, simple English might even be easier to understand.</p>
<p>That being said, this is a usecase where AI might actually be helpful! While <abbr title="Large Language Models">LLMs</abbr> like GPT-3 and co are <a href="https://themarkup.org/hello-world/2023/01/28/decoding-the-hype-about-ai">useless at creating actual content</a> or original thoughts, they’re great at making sentences sound nice. Tools like <a href="https://www.jasper.ai/">Jasper</a> can rewrite your copy and improve the tone without changing the contained information. Sort of like <a href="https://prettier.io/">prettier</a> but for English prose.</p>
<h2 id="h-nobody%E2%80%99s-going-to-read-it-anyway"><a class="heading-anchor" href="https://mxb.dev/blog/seven-reasons-why-i-dont-write/#h-nobody%E2%80%99s-going-to-read-it-anyway" aria-hidden="true">#</a> Nobody’s going to read it anyway</h2>
<p>Let’s be honest: nobody likes to shout into the void. Everyone wants their content to be seen, and social validation is the sweet sweet dopamine reward we all crave.</p>
<p>There’s nothing wrong with sharing your work on social media or popular orange link aggregators either, but sometimes there just won’t be much of a reaction after you publish. That can feel frustrating - but ultimately I think obesessing over vanity metrics is not worth it anyway. Just because something doesn’t make the frontpage of Reddit does not mean it’s not valuable.</p>
<p>Don’t underestimate how many people actively read personal blogs though! The web dev community is especially fond of RSS, and with the Fediverse gaining more and more popularity, original content on your own domain has a much better reach now than before.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Who’s gonna read your personal blog because it has an RSS feed? I’m gonna read your personal blog because it has an RSS feed. <a href="https://t.co/mtcyKhEVet">pic.twitter.com/mtcyKhEVet</a></p>&mdash; Chris Coyier (@chriscoyier) <a href="https://twitter.com/chriscoyier/status/1214606808125341696?ref_src=twsrc%5Etfw">January 7, 2020</a></blockquote>
<div class="u-align-center" aria-hidden="true" style="font-size:2em">···</div>
<p>Right, I realize it’s a bit weird to write a post about how I don’t write posts. But I hope to push back on this in 2023 and find more time for writing. I also suspect that other people have similar reasons and maybe talking about them helps a bit.</p>
<p>In any case, that’s one more post in the bank!</p>

            ]]></content>
        </entry>
        <entry>
            <title>The IndieWeb for Everyone</title>
            <link href="https://mxb.dev/blog/the-indieweb-for-everyone/"/>
            <updated>2022-11-12T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-indieweb-for-everyone/</id>
            <content type="html"><![CDATA[
                <p class="lead">Dear Reader,</p>
<p>Since there’s a good chance that you <em>-like me-</em> are involved in web development and/or have a special interest in technology, I want you to play along and engage in a thought experiment for this post:</p>
<p><strong>Imagine you’re a regular user.</strong></p>
<p>Imagine you have never heard of git branches, postgres or a “webpack config” (lucky you). You really don’t care about all of that, but you do care about your friends and your connections online.</p>
<p>Ever since Elon took over (and actually even some time before that) Twitter has been feeling increasingly hostile. People start leaving, and you hear them talk about alternatives. You’re curious, so you type “mastodon” into Google and see what comes up.</p>
<p>You find the website and want to sign up. It tells you to choose a server:</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/the-indieweb-for-everyone/servers.png" alt="mastodon server list" />
    <figcaption>Ummmm</figcaption>
</figure>
<p>Ok wait, you wanted to join <em>mastodon</em>, what’s all this now? Tildes? Furries? Some Belgian company? Why do you have to apply? Everyone else had that <code>mastodon.social</code> handle - Can’t you just use that? The real one? What the hell is a <em>fediverse</em>?</p>
<p>Confused, you close the site. This seems like it’s made for someone else. Maybe you’ll stick around on Twitter for a while longer, while it slowly burns down.</p>
<hr />
<p>You can be a developer again now.</p>
<p>You and I know the reasons for that experience. We know that a decentralized system has to look like this, and that the choice of instance doesn’t even matter all that much. But I’ve heard this exact story a couple of times now, all from people outside my IT filter bubble.</p>
<p>Why was it so easy to drive these people away?</p>
<h2 id="h-the-web-as-a-commodity"><a class="heading-anchor" href="https://mxb.dev/blog/the-indieweb-for-everyone/#h-the-web-as-a-commodity" aria-hidden="true">#</a> The Web as a Commodity</h2>
<p>Being on the web has been heavily commoditized.</p>
<p>In the days of IRC and message boards, or later in the 2000s blogging era, federation was very much the norm. It was the default mode of the web: people grouping together in small communities around shared interests, but scattered on many different sites and services. It was normal to explore, find new places and discover new things by venturing out.</p>
<p>Through the rise of social media though, people have gotten used to being in one place all the time. Now we expect a system that’s easy to set up, handles millions of users at once and makes every interaction frictionless. We expect it to know what we want, and give it to us instantly. Anything too weird or tech-y and you start to lose people.</p>
<p>Mastodon is not supposed to be a second Twitter. Many of its features were designed specifically to avoid becoming another content silo and repeating the same mistakes, yet the assumption seems to be that everything should stay the same as before.</p>
<p>It’s like everyone has spent the last few years in a giant all-inclusive resort, screaming at each other for attention at the buffet. Now we’re moving into nice little bed-and-breakfast places, but we’re complaining because it takes slightly more effort to book a room, and the free WIFI isn’t as fast.</p>
<p><strong>Maybe its time to rethink some of these expectations.</strong> Maybe we need some of that early internet vibe back and be ok with smaller, closer communities. Maybe we can even get some of the fun back and start exploring again, instead of expecting everything to be automatically delivered to us in real time.</p>
<p>We can remind ourselves of what social media used to be: a way to connect around shared interests, talk to friends, and discover new content. No grifts, no viral fame, no drama.</p>
<h2 id="h-lowering-the-barrier"><a class="heading-anchor" href="https://mxb.dev/blog/the-indieweb-for-everyone/#h-lowering-the-barrier" aria-hidden="true">#</a> Lowering the Barrier</h2>
<p>Adjusting expectations is one part - but at the same time, we as developers have to try and make these systems as approachable as possible without compromising on their independence. A lot of alternative content publication methods are still very much geared towards the IT bubble.</p>
<p>You could loosely map some of them by how easy it is to get started if you have no technical knowledge:</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/the-indieweb-for-everyone/chart.jpg" alt="chart of different methods of publishing content, on an axis ranging from 'low barrier' (left) to 'high barrier' (right)" />
</figure>
<p>Generally speaking: <strong>The more independence a technology gives you, the higher its barrier for adoption.</strong></p>
<p>I love the <a href="https://indieweb.org/">IndieWeb</a> and its tools, but it has always bothered me that at some point they basically require you to have a webdevelopment background.</p>
<p>How many of your non-tech friends publish RSS feeds? Have you ever seen webmentions used by someone who isn’t a developer? Hell, even for professional devs it’s hard to wire all the different parts together if you want to build a working alternative to social media.</p>
<p>If you want the independence and control that comes with some of these IndieWeb things, you just have to get your hands dirty. You can’t do it without code, APIs, servers and rolling your own solutions. It’s just harder.</p>
<p><strong>My point is this: it shouldn’t be.</strong></p>
<p>Owning your content on the web should not require extensive technical knowledge or special skills. It should be just as easy as signing up for a cellphone plan.</p>
<p>I know it’s no small feat to lower that barrier. Making things feel easy and straightforward while handling the technical complexity behind them is quite a challenge. Not to mention the work and financial cost involved in running systems that don’t generate millions of ad revenue.</p>
<p><a href="https://mastodon.social/">Mastodon</a>, <a href="https://ghost.org/">Ghost</a>, <a href="https://www.tumblr.com/">Tumblr</a>, <a href="https://micro.blog/">micro.blog</a> and others are working hard on that frontier; yet I feel they are still not widely used by the average person looking to share their mind.</p>
<h2 id="h-seizing-momentum"><a class="heading-anchor" href="https://mxb.dev/blog/the-indieweb-for-everyone/#h-seizing-momentum" aria-hidden="true">#</a> Seizing Momentum</h2>
<p>I think we’re at a special moment right now. People have been fed up with social media and its various problems (surveillance capitalism, erosion of mental health, active destruction of democracy, bla bla bla) for quite a while now. But it needs a special bang to get a critical mass of users to actually pack up their stuff and move.</p>
<p>When that happens, we have the chance to build something better. We could enable people to connect and publish their content on the web independently – the technology for these services is already there. For that to succeed though, these services have to be useable by all people - not just those who understand the tech.</p>
<p>Just like with migration to another country, it takes two sides to make this work: Easing access at the border to let folks in, and the willingness to accept a shared culture - to make that new place a home.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Make Free Stuff</title>
            <link href="https://mxb.dev/blog/make-free-stuff/"/>
            <updated>2022-01-25T00:00:00Z</updated>
            <id>https://mxb.dev/blog/make-free-stuff/</id>
            <content type="html"><![CDATA[
                <p class="lead">When I first fell in love with the web, it was a radically different place. Aside from the many technical improvements that have been made, I feel like the general culture of the web has changed a lot as well.</p>
<p>Growing up with the web as a teenager meant having access to an infinite treasure chest of content. A lot of that content was spread across blogs, forums and personal websites.</p>
<p>The overwhelming motivation behind it seemed to be <em>“I made something, here it is”</em>. Sharing things for the sake of showing them to the world. Somebody had created something, then put it online so you could see it. Visit their website (wait for the dial-up to finish), and it’s yours.</p>
<p>Follow any link on the web today and you’ll likely be met with a different scenario:</p>
<ul>
    <li>Cookie consent pops up, intentionally confusing.<br />(You're tired - just hit "Accept All".)</li>
    <li>App download banner asks you to install the native app.<br />(Dismiss.)</li>
    <li>Newsletter modal blocks the site, asking for your email address. (Close it.)</li>
    <li>Start reading a few paragraphs, before another modal requires you to create an account. (Leave site, frustrated.)</li>
</ul>
<p>Notice how everything about that interaction is designed to extract value from your visit. The goal here is not for you to read an article; it’s to get your analytics data, your email, your phone and your money.</p>
<p>It’s the symptom of a culture that sees the web purely as a business platform. Where websites serve as eloborate flytraps and content as bait for unsuspecting users.</p>
<p>In this culture, the task of the self-appointed web hustler is to build something fast &amp; cheap, then scale it as much as possible before eventually cashing out.</p>
<ul>
<li>You see it in email bots, spamming blogs for link placements and sponsored posts.</li>
<li>You see it in Twitter accounts where grifters try to monetize their “communities” with useless ebooks.</li>
<li>You see it in crypto, burning the planet for quick profits.</li>
</ul>
<p>web3 and NFTs are the latest evolution of this culture. The latest attempt to impose even more artificial locks and transactions on users, to extract even more money.</p>
<p>This is the web as envisioned by late-stage capitalism: a giant freemium game where absolutely everyone and everything is a “digital asset” that can be packaged, bought and sold.</p>
<hr />
<h2 id="h-don%E2%80%99t-bring-wall-street-to-a-web-fight"><a class="heading-anchor" href="https://mxb.dev/blog/make-free-stuff/#h-don%E2%80%99t-bring-wall-street-to-a-web-fight" aria-hidden="true">#</a> Don’t bring wall street to a web fight</h2>
<p>Sure, the web has changed since the 90s. It has “grown up”.</p>
<p>Of course there are lots of legitimate reasons to monetize, and creators deserve to be compensated. It’s not about people trying to make a buck. It’s about those treating the web simply as a market to run get-rich-quick schemes in, exploiting others out of pure greed.</p>
<p>We’ve gotten so used to it that some can’t even imagine the web working any other way - but it doesn’t have to be like this.</p>
<p>At its very core, the rules of the web are different than those of “real” markets. The idea that ownership fundamentally means that nobody else can have the same thing you have just doesn’t apply here. This is a world where anything can easily be copied a million times and distributed around the globe in a second. If that were possible in the real world, we’d call it Utopia.</p>
<p>It’s also a world that can be shaped by the consumer:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Large companies find HTML &amp; CSS frustrating “at scale” because the web is a fundamentally anti-capitalist mashup art experiment, designed to give consumers all the power.<br /><br />Sorry I didn’t quote tweet anything in order to say that.</p>&mdash; Mia, with valuable secrets 🤫 (@TerribleMia) <a href="https://twitter.com/TerribleMia/status/1198706002419310592?ref_src=twsrc%5Etfw">November 24, 2019</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This “mashup art experiment”, as Mia calls it, is what made the web great in the first place. It’s the reason it became a global phenomenon and much of it is centered around the idea that digital content is free and abundant.</p>
<p>Resource Scarcity doesn’t make sense on the web. Artificially creating it here serves no other purpose than to charge money for things that could easily have been free for all. Why anyone would consider that <em>better</em> is beyond me.</p>
<h2 id="h-freedom-of-content"><a class="heading-anchor" href="https://mxb.dev/blog/make-free-stuff/#h-freedom-of-content" aria-hidden="true">#</a> Freedom of content</h2>
<p>The online game <em>Wordle</em> recently took the world by storm. To the <a href="https://news.ycombinator.com/item?id=29916899">utter shock</a> of many, it is just a free piece of content. A free and open web game millions can enjoy, no strings attached.</p>
<p>Its creator, Josh Wardle, originally built the game for his partner and put it online. <em>“I made something, here it is”</em>. Despite its success, he had no intention to monetize it through apps or subscriptions - and the world is richer for it. When questioned about it, he said this:</p>
<blockquote>
<p>I think people kind of appreciate that there’s this thing online that’s just fun. It’s not trying to do anything shady with your data or your eyeballs. It’s just a game that’s fun.</p>
</blockquote>
<p>Because the notion that monetization is the only worthwhile goal on the web is so widespread, this is somehow a very controversial take. You can actually stand out of the crowd by simply treating the web platform as what it is: a way to deliver content to people.</p>
<p>Despite what web3 claims, it’s possible to “own” your content without a proof of it on the blockchain (see: <a href="https://indieweb.org/">IndieWeb</a>). It’s also possible to create things just for the sake of putting them out into the world.</p>
<p>The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.</p>
<p>Make free stuff! The web is still for everyone.</p>
<p>👉 <em>Update: On Feb 1, Wordle was eventually sold to the New York Times for upwards of a million dollars. <a href="https://twitter.com/powerlanguish/status/1488263944309731329/photo/1">Josh Wardle claims</a> the game will still remain free to play for all.</em></p>

            ]]></content>
        </entry>
        <entry>
            <title>Media Queries in Times of @container</title>
            <link href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/"/>
            <updated>2021-06-11T00:00:00Z</updated>
            <id>https://mxb.dev/blog/media-queries-in-times-of-container-queries/</id>
            <content type="html"><![CDATA[
                <p class="lead">With container queries now on the horizon - will we need media queries at all? Is there a future where we build responsive interfaces completely without them?</p>
<p>Ethan, who coined the term <a href="https://alistapart.com/article/responsive-web-design/">responsive web design</a> over a decade ago, has recently said that media-query-less layouts are certainly within bounds:</p>
<blockquote>
<p>Can we consider a flexible layout to be “responsive” if it <strong>doesn’t</strong> use any media queries, but <strong>only</strong> uses container queries? [...] I’d be inclined to answer: yes, absolutely.</p>
<footer>Ethan Marcotte - <cite><a href="https://ethanmarcotte.com/wrote/responsive-design-at-11-container-queries/">Responsive design and container queries? Oh my!</a></cite></footer>
</blockquote>
<p>Over at CSS-Tricks, Chris had similar thoughts. He issued a challenge to examine how and where media queries are used today, and if they will still be necessary going forward:</p>
<blockquote>
<p>A common refrain, from me included, has been that if we had container queries we’d use them for the vast majority of what we use media queries for today. The challenge is: look through your CSS codebase now with fresh eyes knowing how the @container queries currently work. Does that refrain hold up?</p>
<footer>Chris Coyier - <cite><a href="https://css-tricks.com/a-cornucopia-of-container-queries/">A Cornucopia of Container Queries</a></cite></footer>
</blockquote>
<p>Fair enough.<br />
I took the bait and had a look at some of my projects - and yes, most of what I use <code>@media</code> for today can probably be accomplished by <code>@container</code> at some point. Nevertheless, I came up with a few scenarios where I think media queries will still be necessary.</p>
<hr />
<h2 id="h-for-page-layout"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-for-page-layout" aria-hidden="true">#</a> For page layout</h2>
<p>While container queries can theoretically be used to control any element, they really shine when applied to reusable, independent components. The canonical example is a card component: a self-contained piece of UI you can put anywhere.</p>
<p>Page layouts, on the other hand, are better suited for media queries in my opinion. Page layouts are usually at the very top level of the DOM, not nested in another container. I’ve never encountered a case where the main page layout had to adapt to any other context than the viewport.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.layout</span> <span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 60em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.layout</span> <span class="token punctuation">{</span><br />        <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 4rem 1fr auto<span class="token punctuation">;</span><br />        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 25% 1fr<span class="token punctuation">;</span><br />        <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <br />            <span class="token string">"header header"</span><br />            <span class="token string">"sidebar main"</span><br />            <span class="token string">"footer footer"</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-for-global-tokens"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-for-global-tokens" aria-hidden="true">#</a> For global tokens</h2>
<p>Another good usecase for media queries is to set global design tokens, like spacing or font-sizes. With CSS custom properties it’s now much easier to have fine-grain control over global styles for different devices.</p>
<p>For example, you might want to have bigger text and more whitespace on a large TV than you want for a mobile screen. A larger screen means the user’s head will be physically farther away.</p>
<p>It only makes sense to use a media query there - since the reason for the change is the size of the device itself, not the width of any specific element.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span><br />    <span class="token comment">/* Font Sizes */</span><br />    <span class="token property">--font-size-headline-l</span><span class="token punctuation">:</span> 1.875rem<span class="token punctuation">;</span> <br />    <span class="token property">--font-size-headline-m</span><span class="token punctuation">:</span> 1.75rem<span class="token punctuation">;</span> <br />    <span class="token property">--font-size-headline-s</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span><br />    <span class="token property">--font-size-copy-l</span><span class="token punctuation">:</span> 1.125rem<span class="token punctuation">;</span><br />    <span class="token property">--font-size-copy-s</span><span class="token punctuation">:</span> 0.875rem<span class="token punctuation">;</span><br /><br />    <span class="token comment">/* Global Spacing */</span><br />    <span class="token property">--spacing-x</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br />    <span class="token property">--spacing-y</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 48em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">:root</span> <span class="token punctuation">{</span><br />        <span class="token property">--font-size-headline-l</span><span class="token punctuation">:</span> 2.5rem<span class="token punctuation">;</span><br />        <span class="token property">--font-size-headline-m</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />        <span class="token property">--font-size-headline-s</span><span class="token punctuation">:</span> 1.75rem<span class="token punctuation">;</span><br />        <span class="token property">--font-size-copy-l</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span><br />        <span class="token property">--font-size-copy-s</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br /><br />        <span class="token property">--spacing-x</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />        <span class="token property">--spacing-y</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /></code></pre>
<h2 id="h-for-user-preference-and-actual-%E2%80%9Cmedia%E2%80%9D-queries"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-for-user-preference-and-actual-%E2%80%9Cmedia%E2%80%9D-queries" aria-hidden="true">#</a> For user preference and actual “media” queries</h2>
<p>Screen dimensions are not the only things we can detect with media queries. The <a href="https://www.w3.org/TR/mediaqueries-4/">Media Queries Level 4 Spec</a> (with Level 5 currently a working draft) lists many different queries related to user preference, like:</p>
<ul>
<li><code>prefers-reduced-motion</code></li>
<li><code>prefers-contrast</code></li>
<li><code>prefers-reduced-transparency</code></li>
<li><code>prefers-color-scheme</code></li>
<li><code>inverted-colors</code></li>
<li>and others</li>
</ul>
<p>We can use these to better tailor an experience to the current <a href="https://css-tricks.com/a-complete-guide-to-css-media-queries/#accessibility">user’s specific needs</a>.</p>
<p>Other media queries allow for micro-optimizations based on a device’s input method (i.e. touch or mouse):</p>
<pre class="language-css"><code class="language-css"><span class="token comment">/* fine pointers (mouse) can hit smaller checkboxes */</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">pointer</span><span class="token punctuation">:</span> fine<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />  <span class="token selector">input[type="checkbox"]</span> <span class="token punctuation">{</span><br />    <span class="token property">width</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br />    <span class="token property">height</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br />    <span class="token property">border-width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><br />    <span class="token property">border-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">/* coarse pointers (touch) need larger hit areas */</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">pointer</span><span class="token punctuation">:</span> coarse<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />  <span class="token selector">input[type="checkbox"]</span> <span class="token punctuation">{</span><br />    <span class="token property">width</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />    <span class="token property">height</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />    <span class="token property">border-width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Finally, there are actual “media type” queries like <code>@media print</code> that won’t go anywhere. And there are experimental ideas being discussed for new media queries, like this one for “foldable” devices:</p>
<img src="https://res.cloudinary.com/mxb/image/upload/q_auto,w_1200/v1623356414/galaxy-z-fold_ufx13u.jpg" alt="Samsung Galaxy Fold Z" width="656" height="369" />
<pre class="language-css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span><br />    <span class="token property">--sidebar-width</span><span class="token punctuation">:</span> 5rem<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/* if there's a single, vertical fold in the device's screen, <br />   expand the sidebar width to cover the entire left side. */</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">spanning</span><span class="token punctuation">:</span> single-fold-vertical<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">:root</span> <span class="token punctuation">{</span><br />        <span class="token property">--sidebar-width</span><span class="token punctuation">:</span> <span class="token function">env</span><span class="token punctuation">(</span>fold-left<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><span class="token selector">main</span> <span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--sidebar-width<span class="token punctuation">)</span> 1fr<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<video width="656" height="447" autoplay="" controls="" loop="" muted="" playsinline="">
    <source src="https://storage.googleapis.com/web-dev-uploads/video/HodOHWjMnbNw56hvNASHWSgZyAf2/Uf3RL7EhVZGK2ECiD0sT.mp4" type="video/mp4" />
</video>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>BTW: You can read more about this in <a href="https://web.dev/new-responsive/">&quot;The new responsive: Web design in a component-driven world&quot;</a> by Una Kravets.</p></div></div>
<h2 id="h-for-fixed-to-window-stuff"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-for-fixed-to-window-stuff" aria-hidden="true">#</a> For fixed-to-window stuff</h2>
<p>Components that are taken out of the normal document flow don’t have to care about their containers. Some UI elements are fixed to the viewport itself, usually oriented along an edge of the screen.</p>
<video width="656" height="377" autoplay="" controls="" loop="" muted="" playsinline="">
    <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1623343827/message-tab_bexyja.mp4" type="video/mp4" />
</video>
<p>Have a look at Twitter’s “Messages” tab at the bottom of the screen for example. Its relevant container <em>is</em> the window, so it makes sense to use a media query here and only apply <code>position: fixed</code> at some breakpoint.</p>
<h2 id="h-for-heights"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-for-heights" aria-hidden="true">#</a> For heights</h2>
<p>The current implementation of <code>@container</code> <s>only allows querying the width of an element (its “inline” axis), not its height.</s></p>
<p>👉 <strong>Update:</strong> <a href="https://twitter.com/TerribleMia/status/1403383013593866245">Miriam tells me</a> that it <em>is</em> possible to query the height of containers, provided they are defined as <code>size</code> rather than <code>inline-size</code>. The exact value name of this is still in flux at the time of writing.</p>
<p>Style adjustments in relation to width are probably the primary use case for most UI elements anyway, but there are still cases where screen height is an issue. Here’s an example from a “hero image” component:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.hero</span> <span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><br />    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><br />    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/* if the screen is really tall, don't fill all of it */</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 60em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.hero</span> <span class="token punctuation">{</span><br />        <span class="token property">height</span><span class="token punctuation">:</span> 75vh<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<hr />
<h2 id="h-mix-container-queries-and-media-queries"><a class="heading-anchor" href="https://mxb.dev/blog/media-queries-in-times-of-container-queries/#h-mix-container-queries-and-media-queries" aria-hidden="true">#</a> Mix Container Queries and Media Queries</h2>
<p>While I think container queries will eventually replace most “low level” responsive logic, there are still a lot of good usecases for trusty media queries.</p>
<p>A combination of both techniques will probably be the best way forward. <code>@media</code> can handle the big picture stuff, user preferences and global styles; <code>@container</code> will take care of all the micro-adjustments in the components themselves.</p>
<p>A perfect team!</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in front-end development and the future of CSS. If you enjoy that kind of stuff, you can join here and I'll notify you when I publish a new post. No strings attached, unsubscribe anytime!</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/media-queries-in-times-of-container-queries/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Bob" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="bob@gmail.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>

            ]]></content>
        </entry>
        <entry>
            <title>Container Queries in Web Components</title>
            <link href="https://mxb.dev/blog/container-queries-web-components/"/>
            <updated>2021-05-15T00:00:00Z</updated>
            <id>https://mxb.dev/blog/container-queries-web-components/</id>
            <content type="html"><![CDATA[
                <p class="lead">Container Queries are one of the most anticipated new features in CSS. I recently got a chance to play with them a bit and take the new syntax for a spin.</p>
<p>I came up with this demo of a book store. Each of the books is draggable and can be moved to one of three sections, with varying available space. Depending on where it is placed, different styles will be applied to the book. The <a href="https://codepen.io/mxbck/pen/XWMrMOp">full source code</a> is up on Codepen. Here’s how it looks:</p>
<div class="extend">
    <video width="960" style="margin:0 auto; border: 1px solid var(--color-border);" preload="" controls="">
        <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1621003114/bookstore_nnn2vr.webm" type="video/webm" />
        <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1621003115/bookstore_kkpxmt.mp4" type="video/mp4" />
    </video>
</div>
<div class="callout callout--warning"><span class="callout__icon"><svg class="icon icon--warning" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-warning"></use></svg></span><div class="callout__content"><p>This demo currently only works in <a href="https://www.google.com/chrome/canary/">Chrome Canary</a>. Download the latest version, then enable Container Queries under <em>chrome://flags</em> to see them in action.</p></div></div>
<h2 id="h-here%E2%80%99s-what%E2%80%99s-going-on"><a class="heading-anchor" href="https://mxb.dev/blog/container-queries-web-components/#h-here%E2%80%99s-what%E2%80%99s-going-on" aria-hidden="true">#</a> Here’s what’s going on</h2>
<p>Each of these books is a custom element, or “web component”. They each contain a cover image, a title and an author. In markup they look like this:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book-element</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ba423d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/books/1984.avif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover by shepard fairey<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1984<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>George Orwell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book-element</span><span class="token punctuation">></span></span></code></pre>
<p>This then gets applied to a template which defines the internal Shadow DOM of the component. The <code>&lt;slot&gt;</code> elements in there will get replaced by the actual content we’re passing in.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>front<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<p>Alright, nothing too fancy yet, just some basic structure.</p>
<p>The magic happens when we apply some internal styling to this. Everything inside that <code>&lt;style&gt;</code> tag will be scoped to the component - and since styles can not leak out of the shadow DOM and we can’t (easily) style its contents from the outside, we have real component encapsulation.</p>
<p>Container Queries are one of the last few missing puzzle pieces in component-driven design. They enable us to give components <strong>intrinsic</strong> styles, meaning they can adapt themselves to whatever surroundings they are placed in.</p>
<p>The new key property there is <code>container-type</code> - it lets us define an element as a container to compare container queries against. A value of <code>inline-size</code> indicates that this container will response to “dimensional queries on the inline axis”, meaning we will apply different styles based on its width.</p>
<p>We can also give our container a name using the <code>container-name</code> property. It is optional in this example, but you can think of it in the same way that <code>grid-area</code> lets you define arbitrary names to use as references in your code later.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><br />    <span class="token comment">/* Use Web Component Root as the Layout Container */</span><br />    <span class="token selector">:host</span> <span class="token punctuation">{</span><br />        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><br />        <span class="token property">container-type</span><span class="token punctuation">:</span> inline-size<span class="token punctuation">;</span><br />        <span class="token property">container-name</span><span class="token punctuation">:</span> book<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><br />    ...<br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>
<p>In the bookstore demo, I created three variants that depend on the width of the component’s <code>:host</code> (which translates to the <code>&lt;book-element&gt;</code> itself). I’ve omitted some of the styling for brevity here, but this part is where we define the multi-column or 3D book styles.</p>
<pre class="language-css"><code class="language-css"><span class="token comment">/* Small Variant: Simple Cover + Title */</span><br /><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 199px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.book</span> <span class="token punctuation">{</span><br />        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/* Medium Variant: Multi-Column, with Author */</span><br /><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 399px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.book</span> <span class="token punctuation">{</span><br />        <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr<span class="token punctuation">;</span><br />        <span class="token property">gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/* Large Variant: 3D Perspective */</span><br /><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.book</span> <span class="token punctuation">{</span><br />        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><br />        <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span><br />        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>By adding <a href="https://github.com/bevacqua/dragula">Dragula.js</a> to enable drag-and-drop functionality, we can then move the individual components around. As soon as they’re moved to a different section in the DOM, its internal styles are re-calculated to match the new environment, and the corresponding CSS block is applied. Magic!</p>
<h2 id="h-the-bento-box-idea"><a class="heading-anchor" href="https://mxb.dev/blog/container-queries-web-components/#h-the-bento-box-idea" aria-hidden="true">#</a> The Bento Box Idea</h2>
<p>Now theoretically, we could have achieved a similar effect by using the cascade itself. We could for example apply the 3D styles to all <code>.book</code>s inside <code>.stage</code>. But that would have some problems:</p>
<ul>
<li>it wouldn’t be responsive - if <code>.stage</code> ever gets too narrow, it would break</li>
<li>it would create an unwanted dependency context between parent and child</li>
<li>it would break component encapsulation and mix layout with content styles</li>
</ul>
<p>It’s generally a <a href="https://mxb.dev/blog/the-css-mindset/">good idea</a> in CSS to separate “layout” from “content” components and let each handle their own specific areas of responsibility. I like to think of Japanese bento boxes as a metaphor for this: a container divided into specific sections that can be filled with anything.</p>
<p>For example, the layout for our bookstore looks like this:</p>
<figure class="extend">
    <img src="https://res.cloudinary.com/mxb/image/upload/v1621005967/grid_sa0gt0.png" style="border: 1px solid var(--color-border);" alt="layout schema for the bookstore with three main content sections" />
</figure>
<p>It’s a grid divided into three sections, the middle one containing a nested flexible grid itself.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class="language-css"><code class="language-css"><span class="token comment">/* main layout sections */</span><br /><span class="token selector">.stage,<br />.content,<br />.cart</span> <span class="token punctuation">{</span><br />    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--spacing<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">/* nested sub-grid */</span><br /><span class="token selector">.itemlist</span> <span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>200px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--spacing<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">/* desktop layout */</span><br /><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">.layout</span> <span class="token punctuation">{</span><br />        <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span><br />        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><br />        <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 480px 1fr 130px<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>The parts of the layout are only concerned with the alignment and dimensions of boxes. They have no effect whatsoever on their children other than giving them a certain amount of space to fill. Just like a bento box, it doesn’t care what we put into it, so we could easily re-use the layout for a completely different product. It is <strong>content-agnostic</strong>.</p>
<p>That’s why Container Queries pair so well with Web Components. They both offer ways to encapsulate logic to build smart, independent building blocks. Once they’re defined, they can be used anywhere.</p>
<p>Container Queries bring us one step closer to <a href="https://aneventapart.com/news/post/designing-intrinsic-layouts-aea-video">“Intrinsic Layouts”</a> and a future of truly independent, component-driven design. Exciting stuff ahead!</p>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/container-queries-web-components/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries">CSS Container Queries</a> - MDN</li>
<li><a href="https://www.miriamsuzanne.com/2021/05/02/container-queries/">Container Queries Explainer &amp; Proposal</a> - Miriam Suzanne</li>
<li><a href="https://www.sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/">Component-level art direction with CSS Container Queries</a> - Sara Soueidan</li>
<li><a href="https://github.com/w3c/csswg-drafts/issues/5889">Discussion about Container Queries in srcset and sizes</a> - CSSWG on Github</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Asset Pipelines in Eleventy</title>
            <link href="https://mxb.dev/blog/eleventy-asset-pipeline/"/>
            <updated>2021-04-26T00:00:00Z</updated>
            <id>https://mxb.dev/blog/eleventy-asset-pipeline/</id>
            <content type="html"><![CDATA[
                <p class="lead">"Asset Pipeline" is a fancy way of describing a process that compiles CSS, Javascript or other things you want to transform from a bunch of sources to a production-ready output file.</p>
<p>While some static site generators have a standardized way of handling assets, Eleventy does not. That’s a good thing - it gives you the flexibility to handle this any way you want, rather than forcing an opinionated way of doing things on you that might not fit your specific needs.</p>
<p>That flexibility comes at a price though: you need to figure out your preferred setup first. I’ve tinkered with this a lot, so I wanted to share my learnings here. BTW: My personal setup “Eleventastic” is also <a href="https://github.com/maxboeck/eleventastic">available on Github</a>.</p>
<p>The most common requirement for an asset pipeline is to build CSS and Javascript. That process can have different flavors - maybe you need to compile your stylesheets through Sass or PostCSS? Maybe you want Tailwind? Maybe your Javascript is “transpiled” in Babel (translated from modern ES6 to the more compatible ES5 syntax) or bundled by webpack? Or maybe you want to do something entirely different, like build SVG icon sprites or optimize images?</p>
<p>Whatever you want to achieve, it usually involves plugging some tool into your Eleventy workflow. I’ve looked at several ways to tackle that problem - here are a few possible approaches you can take.</p>
<h2 id="h-npm-scripts-for-everything"><a class="heading-anchor" href="https://mxb.dev/blog/eleventy-asset-pipeline/#h-npm-scripts-for-everything" aria-hidden="true">#</a> NPM scripts for everything</h2>
<p>One solution is to let Eleventy handle <em>just the SSG part</em> (producing HTML) and define other processes to take care of your assets outside of it. The most common way to do this is through <a href="https://docs.npmjs.com/cli/v7/using-npm/scripts">npm scripts</a>. If you’re not familiar with these, they are essentially shortcuts to run node commands, defined in your <code>package.json</code> file.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Some examples using this approach:</p><ul><li><a href="https://github.com/andy-piccalilli/hylia">Hylia</a> by Andy Bell</li><li><a href="https://github.com/5t3ph/11ty-netlify-jumpstart">11ty-netlify-jumpstart</a> by Stephanie Eckles</li><li><a href="https://github.com/nhoizey/pack11ty">pack11ty</a> by Nicolas Hoizey</li></ul></div></div>
<p>So if you wanted to i.e. compile your CSS from a bunch of Sass files, you could set up your NPM scripts like this:</p>
<pre class="language-json"><code class="language-json"><span class="token comment">// package.json</span><br /><br /><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />  <span class="token property">"watch:sass"</span><span class="token operator">:</span> <span class="token string">"sass --watch _src/sass:_site/assets/styles"</span><span class="token punctuation">,</span><br />  <span class="token property">"build:sass"</span><span class="token operator">:</span> <span class="token string">"sass _src/sass:_site/assets/styles"</span><span class="token punctuation">,</span><br />  <span class="token property">"watch:eleventy"</span><span class="token operator">:</span> <span class="token string">"eleventy --serve"</span><span class="token punctuation">,</span><br />  <span class="token property">"build:eleventy"</span><span class="token operator">:</span> <span class="token string">"eleventy"</span><span class="token punctuation">,</span><br />  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm-run-all build:sass --parallel watch:eleventy watch:sass"</span><span class="token punctuation">,</span><br />  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npm-run-all build:eleventy build:sass"</span><br /><span class="token punctuation">}</span></code></pre>
<p>The <code>watch:sass</code> and <code>build:sass</code> scripts here both run the Sass compilation command, just with a different configuration depending on context.</p>
<p>With utilities like <code>npm-run-all</code>, you can even run multiple scripts at once. So one “main command” like <code>npm start</code> will run Eleventy and simultaneously start watching your Sass files for changes, and recompile them when they do.</p>
<p>This solution is extremely flexible. There are node tools for <strong>everything</strong>, and there’s no limit to what you can do. However depending on how complex your build is, the setup can get a bit unwieldy. If you want to manage multiple asset pipelines that have to run in a specific order with a specific configuration, it’s not that easy to keep track of things.</p>
<p>And since each of these scripts is a separate process that runs outside of Eleventy, it has no knowledge about any of them. You can tell Eleventy to watch for changes that these external builds cause, but things can get complex if tasks depend on each other. You can also run into situations where multiple passes are required to achieve the desired output, and since Eleventy can’t optimize for processes outside of itself, large pages can take longer to build.</p>
<h2 id="h-manage-build-tasks-with-gulp"><a class="heading-anchor" href="https://mxb.dev/blog/eleventy-asset-pipeline/#h-manage-build-tasks-with-gulp" aria-hidden="true">#</a> Manage build tasks with Gulp</h2>
<p>Another popular solution is to use <a href="https://gulpjs.com/">Gulp</a> to manage assets. Although it is not the hottest new tech on the block anymore <em>(pssst: it’s OK to use tools that are older than a week)</em>, it’s still a perfect tool for the job: Gulp takes in a bunch of source files, runs them through any transformations you want and spits out static files at the end. Sounds exactly right!</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Some examples using this approach:</p><ul><li><a href="https://github.com/philhawksworth/hawksworx.com">hawksworx.com</a> by Phil Hawksworth</li><li><a href="https://github.com/andy-piccalilli/11ty-base">11ty-base</a> by Andy Bell</li><li><a href="https://github.com/hirusi/smix-eleventy-starter">Smix Eleventy Starter</a> by Ru Singh</li></ul></div></div>
<p>Gulp is a node-based task runner lets you define your asset pipelines as functions in a “Gulpfile” like this:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Gulpfile.js</span><br /><br /><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><br /><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-sass'</span><span class="token punctuation">)</span><br /><br /><span class="token comment">// define sass compilation task</span><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">return</span> gulp<br />        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'/main.scss'</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><br />            <span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br />                <span class="token literal-property property">precision</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><br />                <span class="token literal-property property">outputStyle</span><span class="token operator">:</span> <span class="token string">'expanded'</span><br />            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> sass<span class="token punctuation">.</span>logError<span class="token punctuation">)</span><br />        <span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'/assets/styles'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><br /><br /><span class="token comment">// define script bundling task</span><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'scripts'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><br /><br /><span class="token comment">// Run the different tasks in the asset pipeline</span><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'assets'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token string">'scripts'</span><span class="token punctuation">,</span> <span class="token string">'icons'</span><span class="token punctuation">,</span> <span class="token string">'whatever'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>Then you kick things off from a single npm script like this:</p>
<pre class="language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />    <span class="token property">"assets"</span><span class="token operator">:</span> <span class="token string">"gulp:assets"</span><span class="token punctuation">,</span><br />    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"eleventy --serve"</span><span class="token punctuation">,</span><br />    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm-run-all --parallel build assets"</span><br /><span class="token punctuation">}</span></code></pre>
<p>This is more readable and versatile than npm scripts, but really you’re doing the same thing under the hood. Gulp runs all the different processes behind the scenes and outputs the finished <code>.css</code> or <code>.js</code> files into our build folder.</p>
<p>The drawback here is that it locks you into the Gulp world of doing things. You often need gulp-wrapper packages for popular tools (e.g. <code>gulp-sass</code> instead of <code>node-sass</code>) to work with the “streaming” nature of it. Plus you’re still running external builds, so all of the pitfalls that come with npm scripts still apply.</p>
<h2 id="h-one-build-to-rule-them-all"><a class="heading-anchor" href="https://mxb.dev/blog/eleventy-asset-pipeline/#h-one-build-to-rule-them-all" aria-hidden="true">#</a> One build to rule them all</h2>
<p>The underlying issue with both these methods is the same: they need external build processes. That’s why some Eleventy setups are going a slightly different route: instead of running asset pipelines on the outside, they teach Eleventy itself to handle them. That way everything runs through a single, integrated process.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Some examples using this approach:</p><ul><li><a href="https://github.com/philhawksworth/eleventyone">EleventyOne</a> by Phil Hawskworth</li><li><a href="https://github.com/MadeByMike/supermaya">Supermaya</a> by Mike Riethmuller</li><li><a href="https://github.com/maxboeck/eleventastic">Eleventastic</a> by me</li></ul></div></div>
<p>Think of your assets as just another static “page” here. Instead of markdown, a template takes Sass or ES6 as input, and instead of generating HTML, it runs it through a tool like <code>node-sass</code> or <code>webpack</code> and outputs CSS or JS.</p>
<p>By leveraging <a href="https://www.11ty.dev/docs/languages/javascript/#classes">Javascript templates</a>, you can configure Eleventy to process almost any file you want. To use them, first add the <code>11ty.js</code> extension to the list of recognized input formats in your <code>.eleventy.js</code> config file:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// .eleventy.js</span><br /><br />module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eleventyConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token comment">// add "11ty.js" to your supported template formats</span><br />    <span class="token keyword">return</span> <span class="token punctuation">{</span><br />        <span class="token literal-property property">templateFormats</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'njk'</span><span class="token punctuation">,</span> <span class="token string">'md'</span><span class="token punctuation">,</span> <span class="token string">'11ty.js'</span><span class="token punctuation">]</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Now you can set up your asset pipeline by making a new template somewhere in your input folder. Let’s call it <code>styles.11ty.js</code> for example. It could look something like this:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// styles.11ty.js</span><br /><br /><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><br /><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-sass'</span><span class="token punctuation">)</span><br /><br />module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><br />    <span class="token comment">// define meta data for this template,</span><br />    <span class="token comment">// just like you would with front matter in markdown.</span><br />    <span class="token keyword">async</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">permalink</span><span class="token operator">:</span> <span class="token string">'/assets/styles/main.css'</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">eleventyExcludeFromCollections</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">entryFile</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/main.scss'</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// custom method that runs Sass compilation</span><br />    <span class="token comment">// and returns CSS as a string</span><br />    <span class="token keyword">async</span> <span class="token function">compileSass</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />            <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><br />                <span class="token keyword">else</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>css<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />            <span class="token punctuation">}</span><br />            <span class="token keyword">return</span> sass<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// this function is mandatory and determines the contents of the</span><br />    <span class="token comment">// generated output file. it gets passed all our "front matter" data.</span><br />    <span class="token keyword">async</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> entryFile <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">try</span> <span class="token punctuation">{</span><br />            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileSass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> entryFile <span class="token punctuation">}</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">throw</span> error<br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>The <code>permalink</code> property here lets you define which file the template generates and where to put it. You can use any type of data as input, then transform it somehow and return it in the <code>render</code> method. We’ve essentially done the same thing as defining a Sass task in Gulp, but this time it’s part of the Eleventy build itself!</p>
<p>This gives you even more control over the process. For example - if the compilation fails, you can use that information in the build. You can catch errors in the Sass code and display a message as an overlay in Eleventy’s dev server:</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/eleventy-asset-pipeline/sass-error.png" alt="Sass compilation error message in an overlay" />
    <figcaption>Showing a compilation error as a custom code overlay in your local site build</figcaption>
</figure>
<p>Check out the <a href="https://github.com/maxboeck/eleventastic/blob/master/src/assets/styles/__styles.11ty.js">Eleventastic source</a> to see how to achieve this. (HT to “Supermaya” by Mike Riethmuller for the idea)</p>
<p>A single template can also build multiple files this way. Using Eleventy’s <code>pagination</code> feature, you can i.e. generate different <a href="https://github.com/maxboeck/eleventastic/blob/master/src/assets/scripts/__scripts.11ty.js">Javascript bundles</a> from different source files:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// scripts.11ty.js</span><br /><br /><span class="token keyword">const</span> <span class="token constant">ENTRY_POINTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span><br />    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">'app.js'</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token string">'comments/index.js'</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">'search/index.js'</span><br /><span class="token punctuation">}</span><br /><br />module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><br />    <span class="token comment">// again, the data() function does esentially the same </span><br />    <span class="token comment">// as defining front matter in a markdown file.</span><br />    <span class="token keyword">async</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token punctuation">{</span><br />            <span class="token comment">// define a custom property "entryPoints" first</span><br />            <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token constant">ENTRY_POINTS</span><span class="token punctuation">,</span><br /><br />            <span class="token comment">// then take each of the files in "entryPoints"</span><br />            <span class="token comment">// and process them separately as "bundleName"</span><br />            <span class="token literal-property property">pagination</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'entryPoints'</span><span class="token punctuation">,</span><br />                <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">'bundleName'</span><span class="token punctuation">,</span><br />                <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">1</span><br />            <span class="token punctuation">}</span><span class="token punctuation">,</span><br /><br />            <span class="token comment">// for each bundle, output a different Javascript file</span><br />            <span class="token function-variable function">permalink</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> bundleName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/assets/scripts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bundleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br /><br />            <span class="token comment">// keep the scripts.11ty.js itself out of collections</span><br />            <span class="token literal-property property">eleventyExcludeFromCollections</span><span class="token operator">:</span> <span class="token boolean">true</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// a custom helper function that will be called with</span><br />    <span class="token comment">// each separate file the template processes.</span><br />    <span class="token keyword">async</span> <span class="token function">compileJS</span><span class="token punctuation">(</span><span class="token parameter">bundleName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">const</span> entryPoint <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token constant">ENTRY_POINTS</span><span class="token punctuation">[</span>bundleName<span class="token punctuation">]</span><span class="token punctuation">)</span><br />        <span class="token comment">// do compilation stuff inhere like</span><br />        <span class="token comment">// run file through webpack, Babel, etc</span><br />        <span class="token comment">// and return the result as a string</span><br /><br />        <span class="token comment">// --- omitted for brevity ---</span><br /><br />        <span class="token keyword">return</span> js<br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// output the compiled JS as file contents</span><br />    <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> bundleName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">try</span> <span class="token punctuation">{</span><br />            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileJS</span><span class="token punctuation">(</span>bundleName<span class="token punctuation">)</span><br />        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><br />            <span class="token keyword">return</span> <span class="token keyword">null</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>I personally prefer the fully-integrated way of doing things, because it’s easier for my brain to think of assets this way. HTML, CSS, JS, SVG: it’s all handled the same. However, your personal preference might differ. That’s OK - there really is no “right way” of doing this.</p>
<p>The beauty of unopinionated tools like Eleventy is that you get to choose what fits you best. If it works, it works! 😉</p>

            ]]></content>
        </entry>
        <entry>
            <title>Medium-Style Share Highlights in Eleventy</title>
            <link href="https://mxb.dev/blog/medium-share-highlight-eleventy/"/>
            <updated>2021-04-13T00:00:00Z</updated>
            <id>https://mxb.dev/blog/medium-share-highlight-eleventy/</id>
            <content type="html"><![CDATA[
                <p class="lead">I took a stab at building <a href="https://github.com/maxboeck/eleventy-plugin-share-highlight">a plugin</a> for Eleventy that lets me highlight selected pieces of text and provide users with an easy way to share them.</p>
<p>This feature was first made popular by <a href="https://medium.com/">Medium</a>, where authors can pick a “top highlight” in a post and hovering it will show a tooltip with sharing options. I wanted something like this for independent blogging too, so I came up with a custom solution.</p>
<p>Here’s how that looks in action:</p>
<p><share-highlight aria-label="Share this"><mark>Here’s some highlighted text you can share! You shouldn’t though, this is obviously just a demo. Lorem Ipsum Dolor to you, friend!</mark></share-highlight></p>
<h2 id="h-how-it-works"><a class="heading-anchor" href="https://mxb.dev/blog/medium-share-highlight-eleventy/#h-how-it-works" aria-hidden="true">#</a> How it works</h2>
<p>The base of this feature is a <code>&lt;mark&gt;</code> tag wrapped in a custom <code>&lt;share-highlight&gt;</code> element.</p>
<p>If the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share">Web Share API</a> is supported (currently in Safari, Edge and Android Chrome), clicking the element will bring up your share options and insert the quoted text and a link to the current page. You can share it on any platform that registers as a share target.</p>
<figure>
    <img src="https://mxb.dev/blog/medium-share-highlight-eleventy/share_options.jpg" alt="screenshot of the share options menu in Android" />
    <figcaption>Here's how sharing looks in Android Chrome</figcaption>
</figure>
<p>If the API is not supported, the component will fall back to sharing on Twitter via <a href="https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/guides/web-intent">tweet intent URL</a>. The tooltip will show the Twitter icon and clicking the highlight opens a new tab with a pre-filled tweet:</p>
<figure>
    <img src="https://mxb.dev/blog/medium-share-highlight-eleventy/tweet.jpg" alt="screenshot of a pre-filled tweet to a blogpost, with the highlighted text as a quote" />
    <figcaption>Sharing to Twitter as a Fallback</figcaption>
</figure>
<h2 id="h-how-to-use-it"><a class="heading-anchor" href="https://mxb.dev/blog/medium-share-highlight-eleventy/#h-how-to-use-it" aria-hidden="true">#</a> How to use it</h2>
<p>If you want to use this on your own site, follow these steps. (keep in mind that this is an early version though, and there are probably  still some <a href="https://mxb.dev/blog/medium-share-highlight-eleventy/#h-accessibility-considerations">issues to sort out</a>.)</p>
<ol>
<li>Download the plugin with NPM by running <code>npm i eleventy-plugin-share-highlight --save</code> on the command line in your project’s root folder (where the package.json file is).</li>
<li>Add the plugin to your <code>.eleventy.js</code> configuration file:</li>
</ol>
<pre class="language-js"><code class="language-js"><span class="token comment">// .eleventy.js</span><br /><span class="token keyword">const</span> pluginShareHighlight <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eleventy-plugin-share-highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eleventyConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    eleventyConfig<span class="token punctuation">.</span><span class="token function">addPlugin</span><span class="token punctuation">(</span>pluginShareHighlight<span class="token punctuation">,</span> <span class="token punctuation">{</span><br />        <span class="token comment">// optional: define the tooltip label.</span><br />        <span class="token comment">// will be "Share this" if omitted.</span><br />        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"Teilen"</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<ol start="3">
<li>This will register the <code>highlight</code> shortcode. You can use it in your templates or markdown files like this:</li>
</ol>
<pre class="language-md"><code class="language-md"><span class="token comment">&lt;!-- blogpost.md --></span><br />{% highlight %}Here's some highlighted text you can share!{% endhighlight %}</code></pre>
<p>This will highlight the containing text in a <code>&lt;mark&gt;</code> tag and wrap it in the custom element <code>&lt;share-highlight&gt;</code>. So the output HTML will look something like this:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>share-highlight</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Share this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span>Here's some highlighted text you can share!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>share-highlight</span><span class="token punctuation">></span></span></code></pre>
<p>If Javascript or Custom Elements are not supported, or if your post is displayed e.g. in an RSS reader, the <code>&lt;mark&gt;</code> tag will still be valid and give the highlighted text the correct semantics.</p>
<ol start="4">
<li>To further enhance that with the instant sharing function, you need to add the <a href="https://github.com/maxboeck/eleventy-plugin-share-highlight/blob/main/share-highlight.js">custom element definition</a> first. Depending on your setup, you can either include that as part of a bundle by importing it directly:</li>
</ol>
<pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'eleventy-plugin-share-highlight/share-highlight'</span></code></pre>
<p>…or <a href="https://github.com/maxboeck/eleventy-plugin-share-highlight/blob/main/share-highlight.js">copy the file</a> and add it directly to your HTML with something like:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/share-highlight.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<ol start="5">
<li>To style the highlight, add <a href="https://github.com/maxboeck/eleventy-plugin-share-highlight/blob/main/styles.css">this piece of CSS</a> and customize it to match your design:</li>
</ol>
<pre class="language-css"><code class="language-css"><span class="token comment">/* general styles for text highlight */</span><br /><span class="token selector">mark</span> <span class="token punctuation">{</span><br />    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/* styling if webcomponent is supported */</span><br /><span class="token selector">share-highlight</span> <span class="token punctuation">{</span><br />    <span class="token comment">/* default state */</span><br />    <span class="token property">--share-highlight-text-color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><br />    <span class="token property">--share-highlight-bg-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><br />    <span class="token comment">/* hover/focus state */</span><br />    <span class="token property">--share-highlight-text-color-active</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><br />    <span class="token property">--share-highlight-bg-color-active</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><br />    <span class="token comment">/* tooltip */</span><br />    <span class="token property">--share-highlight-tooltip-text-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br />    <span class="token property">--share-highlight-tooltip-bg-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-accessibility-considerations"><a class="heading-anchor" href="https://mxb.dev/blog/medium-share-highlight-eleventy/#h-accessibility-considerations" aria-hidden="true">#</a> Accessibility Considerations</h2>
<p>This is my first Eleventy plugin and also my first web component. I’m fairly confident that the Eleventy part is sound, but I don’t have much experience with web components, and I have some concerns.</p>
<p>My biggest issue with this is accessibility. I want the element to be keyboard-accessible, so I made it focusable and added keyboard listeners to trigger it with the Enter key. The tooltip label also doubles as the <code>aria-label</code> property for the component, but I don’t quite know how screenreaders handle custom elements with no inherent semantics.</p>
<p>I guess the cleanest option would be to use an actual <code>&lt;button&gt;</code> to trigger the share action, but I also need the element to be inline-level, so the highlighting doesn’t break text flow.</p>
<p>If you know your way around webcomponents and have a suggestion on how to improve this thing, please feel free to <a href="https://github.com/maxboeck/eleventy-plugin-share-highlight">submit a PR</a>!</p>

            ]]></content>
        </entry>
        <entry>
            <title>Space Jam</title>
            <link href="https://mxb.dev/blog/space-jam/"/>
            <updated>2021-04-04T00:00:00Z</updated>
            <id>https://mxb.dev/blog/space-jam/</id>
            <content type="html"><![CDATA[
                <p class="lead">The iconic 1996 "Space Jam" <a href="https://www.spacejam.com/">website</a> was recently relaunched to promote the new movie. Thankfully, the developers still <a href="https://www.spacejam.com/1996/">kept the old site</a> around to preserve its intergalactic legacy.</p>
<p>It’s not often that a website stays up mostly unchanged for 25 years. So out of curiosity, I ran a quick check on both sites.</p>
<p>Unsurprisingly, the new site is a lot heavier than the original: with <strong>4.673KB vs. 120KB</strong>, the new site is about <strong>39 times the size</strong> of the old one. That’s because the new site has a trailer video, high-res images and a lot more Javascript:</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/space-jam/sizes.png" alt="byte size comparison of the 1996 and 2021 space jam websites" />
    <figcaption>The new site has gained some weight</figcaption>
</figure>
<p>This is keeping with the general trend of websites growing heavier every year, with the <a href="https://httparchive.org/reports/page-weight">average site</a> weighing in at around 1.900KB now.</p>
<p>But since our connection speeds and device capabilities are significantly better now - that’s fine. Everything is way faster now than it was back in the days of Michael Jordan’s first Looney Tunes adventure.</p>
<p>Is it though? Let’s find out.</p>
<h2 id="h-party-like-it%E2%80%99s-1996"><a class="heading-anchor" href="https://mxb.dev/blog/space-jam/#h-party-like-it%E2%80%99s-1996" aria-hidden="true">#</a> Party like it’s 1996</h2>
<p>1996 was a different time. The Spice Girl’s “Wannabe” was in anti-shock discmans everywhere, and the most common network connection was 56k dial-up modems. So of course the original developers had a smaller performance budget to work with, and the site is much lighter. Fair enough - so how long did it take to load the original Space Jam site back then?</p>
<p>I ran a <a href="https://webpagetest.org/result/210404_BiDcBV_b347ef65fef0d8e8615d0196f93d631a/">webpagetest</a> with a simulated '96 connection: dial-up on an average desktop computer. Dial-up had a maximum speed of 56 kbit/s, but in reality it came in at something around <strong>40-50 kbit/s</strong>.</p>
<p>Here’s how that looked (fire up the <a href="https://www.youtube.com/watch?v=iHW1ho8L7V8">dial-up noise</a> in another tab for the full experience):</p>
<video width="408" height="384" controls="" muted="">
    <source src="https://mxb.dev/blog/space-jam/1996.mp4" type="video/mp4" />
</video>
<p class="u-align-center">
    <a href="https://webpagetest.org/result/210404_BiDcBV_b347ef65fef0d8e8615d0196f93d631a/">Test Summary</a> | 
    <a href="https://webpagetest.org/video/compare.php?tests=210404_BiDcBV_b347ef65fef0d8e8615d0196f93d631a-r%3A1-c%3A0&highlightLCP=1&thumbSize=200&ival=500&end=visual">Film Strip View</a>
</p>
<p>We can see the first content (the “press box shuttle” menu item) after <strong>4 seconds</strong>. The other menu items -all separate GIF images- come in slowly after that. Since the HTML renders as soon as it is parsed, you could theoretically already click on the items before the rest of the page has finished though. The whole site is done after <strong>28.1 seconds</strong> in this test.</p>
<h2 id="h-back-to-the-future-2021"><a class="heading-anchor" href="https://mxb.dev/blog/space-jam/#h-back-to-the-future-2021" aria-hidden="true">#</a> Back to the Future: 2021</h2>
<p>Now let’s look at the current, futuristic state of the web. Luckily we don’t use dial-up anymore. The most common connection these days is a mobile 3G network, and the most common device is an Android phone (a Moto G4 in this test). A typical 3G connection comes in at around <strong>1.5 Mbp/s</strong>, so it is roughly <strong>30 times faster</strong> than dial-up. This shouldn’t take long:</p>
<video width="408" height="592" controls="" muted="">
    <source src="https://mxb.dev/blog/space-jam/2021.mp4" type="video/mp4" />
</video>
<p class="u-align-center">
    <a href="https://webpagetest.org/result/210404_BiDc1N_ab2991b56a23742f37e661115c39b551/">Test Summary</a> | 
    <a href="https://webpagetest.org/video/compare.php?tests=210404_BiDc1N_ab2991b56a23742f37e661115c39b551-r:1-c:0">Film Strip View</a>
</p>
<p>Funnily enough, the first meaningful paint also shows up after about <strong>4 seconds</strong>. It’s not <em>actual</em> content though, it’s the loading screen, informing us that we’ve now loaded 0% of the site.</p>
<p>We reach 100% at 12 seconds, but the first real piece of content is not rendered until <strong>21.5 seconds</strong>: it’s a youtube video in a modal window. The site is finally ready after <strong>26.8 seconds</strong>, although actually playing the video would take some more loading time.</p>
<h2 id="h-results"><a class="heading-anchor" href="https://mxb.dev/blog/space-jam/#h-results" aria-hidden="true">#</a> Results</h2>
<p>Right. So after 25 years of technological progress, after bringing 4.7 billion people in the world online, after we just landed a fifth robot on Mars, visiting the Space Jam website is now <strong>1.3 seconds faster</strong>. That seems… underwhelming.</p>
<p>__</p>
<p>I know that this is just a movie promo site. And of course the requirements for a website are different now - people expect rich content. But I think this speaks to a larger point:</p>
<p><share-highlight aria-label="Share this"><mark>Although connection speeds and devices keep getting better and better, the web is actually getting slower. We see the increasing bandwidth as an invitation to use more and more stuff in our websites. More images, more videos, more JavaScript.</mark></share-highlight></p>
<p>We just keep filling the available <em>space, jamming</em> up the pipes in the process so nothing actually gets faster. Well, at least the dial-up sound is gone now.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Webmention Analytics</title>
            <link href="https://mxb.dev/blog/webmention-analytics/"/>
            <updated>2021-02-07T00:00:00Z</updated>
            <id>https://mxb.dev/blog/webmention-analytics/</id>
            <content type="html"><![CDATA[
                <p class="lead">I'm a fan of webmentions. I've written about <a href="https://mxb.dev/blog/using-webmentions-on-static-sites/">how to use them</a> before, and I'm quite happy with having them on my site.</p>
<p>However, it can get difficult to see what’s going on with them - especially if there’s a lot of “background noise”. Many sites just scrape content from well-known blogs and republish it for SEO juice. If that content includes a link to your site, it can lead to webmention spam.</p>
<p>Unlike on social media, you also don’t get notifications or reports about incoming webmentions. You’re just handed a bunch of raw data to use however you like. That’s part of the beauty of the Indieweb though: you can tailor it to whatever suits you best.</p>
<p>I recently started playing around with the data I get from webmention.io to see if it could be displayed in a more meaningful way. The result is a new side project I call:</p>
<p>✨✨✨ <strong>Webmention Analytics</strong> ✨✨✨<br />
You can see it in action in <a href="https://webmentions.mxb.dev/">this demo</a> on my site.</p>
<figure class="extend">
    <a href="https://webmentions.mxb.dev/2020-06/">
        <img src="https://mxb.dev/blog/webmention-analytics/cover.jpg" width="1200" height="750" alt="barchart showing days of the month at the x-axis and different amounts of webmentions on the y-axis." />
    </a>
    <figcaption>Breakdown of webmentions per day</figcaption>
</figure>
<p>I built this with <a href="https://11ty.dev/">Eleventy</a> and <a href="https://netlify.com/">Netlify</a>, mainly because that’s my favorite tech stack to tinker with. But for analytics that don’t have to be real-time, static site generators are actually a really good fit.</p>
<p>Expensive computations like parsing and analyzing 8000+ data points like this can be run once a day through a periodic build hook. The reports it generates are then instantly available to the user, while still being up-to-date enough.</p>
<h2 id="h-features"><a class="heading-anchor" href="https://mxb.dev/blog/webmention-analytics/#h-features" aria-hidden="true">#</a> Features</h2>
<ul>
<li>group webmention data by month</li>
<li>overview of webmentions by type (like, reply, repost, mention, bookmark…) and day</li>
<li>show top source URLs sending webmentions to your site</li>
<li>show top target URLs on your site receiving webmentions</li>
<li>show top tweets generating webmentions through brid.gy</li>
<li>check incoming webmentions against a blocklist of known “content scrapers” and spam domains</li>
<li>automatic daily updates with cron job</li>
</ul>
<figure class="extend">
    <a href="https://webmentions.mxb.dev/2020-06/">
        <img src="https://mxb.dev/blog/webmention-analytics/targets-and-sources.jpg" width="1200" height="788" alt="table showing most common sources and targets for webmentions" />
    </a>
    <figcaption>Top sources and targets</figcaption>
</figure>
<figure>
    <a href="https://webmentions.mxb.dev/2020-06/">
        <img src="https://mxb.dev/blog/webmention-analytics/flagged.jpg" width="1000" height="788" alt="" />
    </a>
    <figcaption>Webmentions flagged as spam</figcaption>
</figure>
<h2 id="h-get-your-own-instance"><a class="heading-anchor" href="https://mxb.dev/blog/webmention-analytics/#h-get-your-own-instance" aria-hidden="true">#</a> Get your own instance!</h2>
<p>If you also use webmention.io to show webmentions on your site, you can <a href="https://github.com/maxboeck/webmention-analytics">fork the code on Github</a> and make your own instance of <code>webmention-analytics</code>. Just follow the <a href="https://github.com/maxboeck/webmention-analytics#get-your-own-instance">instructions</a> in the README to get started.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Keep in mind that this is still a very early version of a weekend side project, so there's probably a few things to iron out. Cheers!</p></div></div>

            ]]></content>
        </entry>
        <entry>
            <title>Making Persistent Build Folders in Netlify</title>
            <link href="https://mxb.dev/blog/persistent-build-folders-netlify/"/>
            <updated>2021-01-05T00:00:00Z</updated>
            <id>https://mxb.dev/blog/persistent-build-folders-netlify/</id>
            <content type="html"><![CDATA[
                <p class="lead">Static Site Generators are all-or-nothing. Each time they build a new version of the site, they throw away everything that was created before and start from scratch.</p>
<p>That’s usually what you want to ensure everything is up-to-date. But there are special cases when keeping parts of the previous build around makes sense. For example, If you fetch lots of data from an external source during your build, it might make sense to cache that data and re-use it again in the future.</p>
<p>I recently found such a case when working on the Eleventy webmentions feature. For each build, a script queries the webmention.io API and fetches all the webmentions for the site. That can be <strong>a lot</strong> of data - and most of it stays the same, so fetching everything new again each time is sort of wasteful.</p>
<h2 id="h-a-cache-folder"><a class="heading-anchor" href="https://mxb.dev/blog/persistent-build-folders-netlify/#h-a-cache-folder" aria-hidden="true">#</a> A Cache Folder</h2>
<p>A better solution is to store the fetched webmentions locally in a separate <code>_cache</code> folder as JSON and give them a <code>lastFetched</code> timestamp. On the next go, we can load the old data straight from there and only query the API for webmentions newer than that timestamp.</p>
<p>My <a href="https://github.com/maxboeck/mxb/blob/master/src/data/webmentions.js">webmentions code</a> does exactly that - but it had a big problem: that only worked locally. Since Netlify (where my site is hosted) throws everything out the window each time, I couldn’t use the cache there.</p>
<h2 id="h-plugins-to-the-rescue"><a class="heading-anchor" href="https://mxb.dev/blog/persistent-build-folders-netlify/#h-plugins-to-the-rescue" aria-hidden="true">#</a> Plugins to the Rescue</h2>
<p>To edit anything related to the Netlify build process itself, you need a build plugin. There is a <a href="https://app.netlify.com/plugins">directory of plugins</a> available for you to choose from, but you can also define your own plugins and deploy them alongside the rest of your code.</p>
<p>To <a href="https://docs.netlify.com/configure-builds/build-plugins/create-plugins/#local-plugins">define a custom plugin</a>, make a new directory called <code>plugins</code> and within that, a new directory for your code:</p>
<pre class="language-bash"><code class="language-bash">_cache<br />_site<br />src<br />plugins<br />└── webmention-cache<br />    ├── index.js<br />    └── manifest.yml<br />package.json<br />netlify.toml</code></pre>
<p>Your plugin should contain at least two files: a manifest with some metadata, and the actual plugin code.<br />
For the manifest file, let’s just set a name:</p>
<pre class="language-yml"><code class="language-yml"><span class="token comment"># manifest.yml</span><br /><span class="token key atrule">name</span><span class="token punctuation">:</span> webmention<span class="token punctuation">-</span>cache</code></pre>
<p>The meat of the plugin is in the <code>index.js</code> file. There are lots of things you could do here- but for this usecase, it’s enough to define an object with two functions. These are hooks that will be called on specific parts of the build process that Netlify runs.</p>
<p>Both functions will be given some arguments, and among them is the <code>utils</code> object we can use to access the internal build cache:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// index.js</span><br />module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><br />    <span class="token comment">// Before the build runs,</span><br />    <span class="token comment">// restore a directory we cached in a previous build.</span><br />    <span class="token comment">// Does not do anything if:</span><br />    <span class="token comment">//  - the directory already exists locally</span><br />    <span class="token comment">//  - the directory has never been cached</span><br />    <span class="token keyword">async</span> <span class="token function">onPreBuild</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> utils <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">await</span> utils<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token string">'./_cache'</span><span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span><br />    <span class="token comment">// After the build is done,</span><br />    <span class="token comment">// cache directory for future builds.</span><br />    <span class="token comment">// Does not do anything if:</span><br />    <span class="token comment">//  - the directory does not exist</span><br />    <span class="token keyword">async</span> <span class="token function">onPostBuild</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> utils <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">await</span> utils<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'./_cache'</span><span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<ol>
<li>The <code>onPreBuild</code> hook looks for a previously cached <code>_cache</code> folder and restores it within the build.</li>
<li>The <code>onPostBuild</code> hook takes the final build output, looks for changes in the <code>_cache</code> folder and saves it for later.</li>
</ol>
<p>Because these hooks only look at changes that happen between the start and end of your build, your code needs to create the cache directory itself and write files to it as it runs. You can do that by using node’s filesystem functions, similiar to what I’ve <a href="https://github.com/maxboeck/mxb/blob/master/src/data/webmentions.js#L52">done here</a>.</p>
<div class="callout callout--warning"><span class="callout__icon"><svg class="icon icon--warning" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-warning"></use></svg></span><div class="callout__content"><p>It's important to note that this will not overwrite any existing files from your repository, so it only works when there is no <code>_cache</code> folder already committed to your site. It might make sense to add it to your <code>.gitignore</code> file.</p></div></div>
<h2 id="h-register-the-plugin"><a class="heading-anchor" href="https://mxb.dev/blog/persistent-build-folders-netlify/#h-register-the-plugin" aria-hidden="true">#</a> Register the Plugin</h2>
<p>The last thing to do is to let the Netlify build script know you intend to use your plugin. You can register it with a line in your <code>netlify.toml</code> configuration file:</p>
<pre class="language-toml"><code class="language-toml"><span class="token comment"># netlify.toml</span><br /><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span><span class="token punctuation">]</span><br />    <span class="token key property">package</span> <span class="token punctuation">=</span> <span class="token string">"./plugins/webmention-cache"</span></code></pre>
<p>Now, when you run a new build, you should see something like these lines in your deploy log:</p>
<pre class="language-bash"><code class="language-bash"><span class="token number">2</span>:02:08 PM: ❯ Loading plugins<br /><span class="token number">2</span>:02:08 PM:    - ./plugins/webmention-cache from netlify.toml<br /><span class="token number">2</span>:02:08 PM: ​<br /><span class="token number">2</span>:02:08 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:08 PM:   <span class="token number">1</span>. onPreBuild <span class="token builtin class-name">command</span> from ./plugins/webmention-cache         <br /><span class="token number">2</span>:02:08 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:09 PM: ​<br /><span class="token number">2</span>:02:09 PM: <span class="token punctuation">(</span>./plugins/webmention-cache onPreBuild completed <span class="token keyword">in</span> 302ms<span class="token punctuation">)</span><br /><span class="token number">2</span>:02:09 PM: ​<br /><span class="token number">2</span>:02:09 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:09 PM:   <span class="token number">2</span>. build.command from netlify.toml                            <br /><span class="token number">2</span>:02:09 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:09 PM: ​<br /><span class="token number">2</span>:02:09 PM: $ <span class="token function">npm</span> run build<br /><br /><span class="token punctuation">..</span>.<span class="token punctuation">[</span>lines omitted<span class="token punctuation">]</span><span class="token punctuation">..</span>.<br /><br /><span class="token number">2</span>:02:12 PM: <span class="token operator">>></span><span class="token operator">></span> <span class="token number">4240</span> webmentions loaded from cache<br /><span class="token number">2</span>:02:12 PM: <span class="token operator">>></span><span class="token operator">></span> <span class="token number">6</span> new webmentions fetched from https://webmention.io/api<br /><span class="token number">2</span>:02:12 PM: <span class="token operator">>></span><span class="token operator">></span> webmentions saved to _cache/webmentions.json<br /><br /><span class="token punctuation">..</span>.<span class="token punctuation">[</span>lines omitted<span class="token punctuation">]</span><span class="token punctuation">..</span>.<br /><br /><span class="token number">2</span>:02:29 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:29 PM:   <span class="token number">3</span>. onPostBuild <span class="token builtin class-name">command</span> from ./plugins/webmention-cache        <br /><span class="token number">2</span>:02:29 PM: ────────────────────────────────────────────────────────────────<br /><span class="token number">2</span>:02:29 PM: ​<br /><span class="token number">2</span>:02:29 PM: <span class="token punctuation">(</span>./plugins/webmention-cache onPostBuild completed <span class="token keyword">in</span> 53ms<span class="token punctuation">)</span></code></pre>
<p>And that’s about it!</p>

            ]]></content>
        </entry>
        <entry>
            <title>A year in review: 2020</title>
            <link href="https://mxb.dev/blog/year-in-review-2020/"/>
            <updated>2020-12-19T00:00:00Z</updated>
            <id>https://mxb.dev/blog/year-in-review-2020/</id>
            <content type="html"><![CDATA[
                <p class="lead">I don't think I have to tell anyone why this year sucked, what with the pandemic and all. 2020 is going down in history as a massive crapstorm.</p>
<p>Still, I want to <a href="https://mxb.dev/blog/year-in-review-2019">continue the tradition</a> of “end-of-the-year” blogposts and since there’s already enough doom out there these days, I’m trying to focus on the good things that happened instead.</p>
<h2 id="h-work"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-work" aria-hidden="true">#</a> Work</h2>
<p>The web industry is among the fortunate ones that are very well suited for remote and distributed work, which is why I was able to keep working from home throughout most of the year.</p>
<p>We rented a great new office in the spring that I’ve hardly been to since, but our team at <a href="https://www.codista.com/">Codista</a> is quite used to working remote and we already had all the necessary infrastructure in place.</p>
<p>We had more than enough projects on our hands and we did some really interesting, challenging stuff that I can’t talk about (yet) 😉 - so all in all, work was good.</p>
<h2 id="h-writing"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-writing" aria-hidden="true">#</a> Writing</h2>
<p>I wrote nine posts in 2020 - which is fewer than last year, but all things considered, that’s ok. The most popular ones were:</p>
<ul>
<li><a href="https://mxb.dev/blog/the-return-of-the-90s-web/">The Return of the 90s Web</a>: a look at some early trends on the web and how they might be resurrected</li>
<li><a href="https://mxb.dev/blog/emergency-website-kit/">The Emergency Website Kit</a>: an attempt to build a template for critical information websites</li>
<li><a href="https://mxb.dev/blog/color-theme-switcher/">Color Theme Switcher</a>: a case study of this blog’s weird color scheme feature (see header)</li>
</ul>
<h2 id="h-side-projects"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-side-projects" aria-hidden="true">#</a> Side Projects</h2>
<p>When the first lockdown hit, I kept occupied by building things - mostly in and around Eleventy, which helped me get ideas off the ground quickly. Here are some of these:</p>
<ul>
<li>
<p><a href="https://github.com/maxboeck/eleventastic">Eleventastic</a>: my personal starter kit for Eleventy projects. I wanted to get rid of “external” build tools like Gulp and manage all pipelines inside Eleventy itself.</p>
</li>
<li>
<p><a href="https://github.com/maxboeck/resume">Eleventy Resumé</a>: a simple microsite that functions as a CV/Resumé in web and print.</p>
</li>
<li>
<p><a href="https://whimsical.club/">Whimsical Website Club</a>: a collection of websites that spark joy by doing things a little bit less serious.</p>
</li>
</ul>
<h2 id="h-speaking"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-speaking" aria-hidden="true">#</a> Speaking</h2>
<p>I had some talks planned for 2020 which of course didn’t happen. I did a few online talks though and I participated in <a href="https://inclusivedesign24.org/2020/">Inclusive Design 24</a>, a free 24-hour livestream event where I talked about another side project, the “Emergency Website Kit”:</p>
<div class="embed embed--16-9">
    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/8RdrRCq8VzU?start=53" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
<h2 id="h-events"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-events" aria-hidden="true">#</a> Events</h2>
<p>The <a href="http://webclerks.at/">Webclerks</a> team and I had the pleasure of hosting our own little virtual meetup event <a href="https://webclerks.at/vienna-calling/">“Vienna Calling”</a> on Twitch, and we had a phenomenal lineup. A big thank you again to all the speakers who joined us, as well as the rest of the team who made this happen behind the scenes.</p>
<p>BTW: You can find the full event as a playlist on Youtube:</p>
<div class="embed embed--16-9">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PLSJe-hizqRL0qMDlLzBp1WZZXJFdmP6lz" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
<h2 id="h-traveling"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-traveling" aria-hidden="true">#</a> Traveling</h2>
<p>In the summer, the situation improved enough for me and my girlfriend to take some much needed vacation time. With international travel still closed, we decided to go on a road trip through Austria instead and it was awesome. This country has some really beautiful places in store.</p>
<!-- <blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;m staying in this cabin in the mountains for a few days without internet. So if there&#39;s any dev twitter drama kindly do it without me 😉 <a href="https://t.co/O62x9NoxG0">pic.twitter.com/O62x9NoxG0</a></p>&mdash; Max Böck (@mxbck) <a href="https://twitter.com/mxbck/status/1289958987647995904?ref_src=twsrc%5Etfw">August 2, 2020</a></blockquote> -->
<figure class="extend">
    <img src="https://mxb.dev/blog/year-in-review-2020/mountains.jpg" alt="A small cabin in the Austrian alps, under a clear blue sky" loading="lazy" />
    <figcaption>The Kanisalpe mountain range in Vorarlberg, Austria</figcaption>
</figure>
<h2 id="h-we-need-the-web"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-we-need-the-web" aria-hidden="true">#</a> We need the Web</h2>
<p>This year, more than ever, I realized the enormous impact the web has on all of us, and how important it is to keep it free and open. I know we’re all sick of doing things online all the time, but imagine for a moment what this year would have looked like had the web never been invented.</p>
<p>Millions of people would be completely isolated, even more would be out of their jobs. Schools could not operate. Civil rights movements would be almost impossible to organize. Global research projects like the development of a vaccine would take years longer. And you probably wouldn’t have seen the faces of your loved ones in months.</p>
<p>The web has become such an integral part of our lives that we sometimes take it for granted. It’s not. In fact this shitshow of a year should probably remind us that we need to take really good care of the things that are still connecting us.</p>
<h2 id="h-goals-for-2021"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-goals-for-2021" aria-hidden="true">#</a> <s>Goals for 2021</s></h2>
<p>I’m not going to compare my goals from last year with what I’ve accomplished in 2020. I don’t think it matters. Give yourself a break this year - it’s OK if things didn’t turn out the way you wanted.</p>
<p>I’ll see you all in 2021. And hopefully we’ll all have a vaccine in our system and a better year ahead of us.</p>
<h2 id="h-other-year-in-review-posts"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2020/#h-other-year-in-review-posts" aria-hidden="true">#</a> Other Year-in-Review Posts</h2>
<p>Have you written one of these yourself? Let me know and get added here.</p>
<ul>
<li><a href="https://hiddedevries.nl/en/blog/2020-12-17-2020-in-review/">Hidde de Vries</a></li>
<li><a href="https://marcus.io/blog/my-2020">Marcus Herrmann</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Whimsical Website Club</title>
            <link href="https://mxb.dev/blog/the-whimsical-web/"/>
            <updated>2020-06-30T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-whimsical-web/</id>
            <content type="html"><![CDATA[
                <p class="lead">The web needs to take itself less seriously. It's barely out of its twenties and suddenly it's all like "I can't make fansites for hippos anymore, I have businesses to run".</p>
<p>It used to be cooler. It used to be <span style="font-family: 'Comic Sans MS', cursive; font-weight: 700; letter-spacing: 2px;">weirder</span>.</p>
<p>As Sarah Drasner puts it in <a href="https://css-tricks.com/in-defense-of-a-fussy-website/">“In Defense of a Fussy Website”</a>:</p>
<blockquote>
    <p>While we’re all laser-focused on shipping the newest feature with the hottest software and the best Lighthouse scores, I’ve been missing a bit of the joy on the web.
    Apps are currently conveying little care for UX, guidance, richness, and — well, for humans trying to communicate through a computer, we’re certainly bending a lot to… the computer.</p>
</blockquote>
<p>I really liked that post, so I made small website meant to showcase how a more personal web could look like, and hopefully give someone else inspiration to make their own corner of the web a bit weirder.</p>
<h2 id="h-more-whimsy-please"><a class="heading-anchor" href="https://mxb.dev/blog/the-whimsical-web/#h-more-whimsy-please" aria-hidden="true">#</a> More whimsy, please!</h2>
<div class="extend">
    <a href="https://whimsical.club/">
        <img src="https://mxb.dev/blog/the-whimsical-web/cover.jpg" alt="The Whimsical Web" />
    </a>
</div>
<p>Introducing: <a href="https://whimsical.club/">The Whimsical Web</a> - a curated list of sites with an extra bit of fun.</p>
<p>I’ve collected a few of my favorites to start, but anyone can add a site to the list if it’s fun, quirky and personal.<br />
Just <a href="https://github.com/maxboeck/whimsical/issues/new?template=add-this-website.md&amp;title=Add+this+Website%21">open an issue on Github</a> and let me know.</p>
<p>Let’s see some fussy websites!</p>

            ]]></content>
        </entry>
        <entry>
            <title>The Return of the 90s Web</title>
            <link href="https://mxb.dev/blog/the-return-of-the-90s-web/"/>
            <updated>2020-06-18T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-return-of-the-90s-web/</id>
            <content type="html"><![CDATA[
                <p class="lead">In big cultural concepts like music or fashion, things have a way of coming around full circle.
I'm pretty sure someday grunge will come back as a hot new sample, and at some point our kids might think frosted hair tips are totally cool.</p>
<p>When I look at some of the trends on the web today, I wonder if we’re at that point yet. I wonder if we’re ready to revisit some of the ideas of the early web again.</p>
<p>Probably not in design - I’m afraid <code>dancing-baby.gif</code> is gone for good. But some of the broader ideas from back then are picking up a second wind lately, and I like it.</p>
<h2 id="h-serverside-rendering"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-serverside-rendering" aria-hidden="true">#</a> Serverside Rendering</h2>
<p>After spending the better part of the last decade shifting rendering logic to the client, it looks like the pendulum is about to swing into the other direction again.</p>
<p>With projects like <a href="https://www.phoenixframework.org/">Phoenix Liveview</a> or <a href="https://hey.com/how-it-works/">hey.com</a>’s recent “it’s-just-HTML” approach, it seems like server-side rendering (SSR) is stepping back into the spotlight.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If you think that sounds like the web of 25 years ago, you’re right! Except the HEY front-end stack progressively enhances the “classic web” to work like the “2020 web,” with all the fidelity you’d expect from a well-built SPA.</p>&mdash; Sam Stephenson (@sstephenson) <a href="https://twitter.com/sstephenson/status/1272608171056680960?ref_src=twsrc%5Etfw">June 15, 2020</a></blockquote>
<p>It makes sense - servers are <strong>really good</strong> at this, and sending compressed HTML through the network can be lightning fast. The classic request-response cycle has evolved as well: HTTP/2 and smart techniques like <a href="https://github.com/turbolinks/turbolinks">Turbolinks</a> or <a href="https://instant.page/">just-in-time preloading</a> allow for a much better experience now than when you first tried to load that Michael Jordan photo on the Space Jam website over dial-up.</p>
<p>Taking the responsibility of rendering UI and all the Javascript that comes with it off users’ shoulders would be a great <s>old</s> new strategy for the next generation of web apps.</p>
<h2 id="h-no-code-tools"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-no-code-tools" aria-hidden="true">#</a> No-Code Tools</h2>
<p><a href="https://en.wikipedia.org/wiki/Microsoft_FrontPage">Frontpage</a> and <a href="https://en.wikipedia.org/wiki/Adobe_Dreamweaver">Dreamweaver</a> were big in the 90s because of their “What You See Is What You Get” interface. People could set up a website without any coding skills, just by dragging boxes and typing text in them.</p>
<p>Of course they soon found that there was still source code underneath, you just didn’t see it. And most of the time, that source code was a big heap of auto-generated garbage - it ultimately failed to keep up with the requirements of the modern web.</p>
<figure class="extend">
    <a href="https://webflow.com/" rel="noopener noreferrer" target="_blank">
        <img src="https://mxb.dev/blog/the-return-of-the-90s-web/webflow.jpg" alt="the webflow interface, different design widgets and controls" loading="lazy" />
    </a>
</figure>
<p>Today our understanding of the web has improved, and so have our tools. <a href="https://webflow.com/">Webflow</a> is one of the contenders for the “no-code editor” trophy. The output it generates is far better.</p>
<p>These tools will probably not be a replacement for developers as a whole - complex projects still require tons of human brainpower to work. But for all the landing pages and marketing sites, this could be the holy grail of <abbr title="What you see is what you get">WYSIWYG</abbr> we thought we had in the 90s.</p>
<h2 id="h-personal-websites"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-personal-websites" aria-hidden="true">#</a> Personal Websites</h2>
<p>It might just be my IndieWeb filter bubble talking, but I think there is a renewed interest in personal websites. A lot of big social media giants are falling out of favor, and it becomes cool again to <strong>own a space</strong> on the web rather than being one of a billion usernames.</p>
<p>Our digital identities are becoming increasingly more important, and people become aware that they’re not in control of their data. Personal sites were very popular in the era before Myspace and Facebook, and it’s now easier than ever to build one.</p>
<p>Services like <a href="https://carrd.co/">Carrd</a> offer a straightforward way to create simple one-pagers, and their numbers show a lot of interest:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Totals for 2019:<br /><br />🙋 213k new users<br />🌐 381k new sites<br />💵 $308k <a href="https://t.co/k3mNeiIyzL">https://t.co/k3mNeiIyzL</a></p>&mdash; aj ⚡️ 🍜 (@ajlkn) <a href="https://twitter.com/ajlkn/status/1212418595763998720?ref_src=twsrc%5Etfw">January 1, 2020</a></blockquote>
<p>Blogging is gaining popularity again as well, used as a tool for self-marketing or simply to express opinions. There are lots of good options for people who want to pick up blogging - either on their own sites or with platforms like <a href="http://micro.blog/">micro.blog</a>, that offer more independence than Medium &amp; Co.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">If you're looking to build your own personal site and are interested in things like front-end dev and Eleventy, you can sign up for my personal email list. Get notified whenever I publish something new, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/the-return-of-the-90s-web/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Bob" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="bob@gmail.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-curated-feeds-and-discovery"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-curated-feeds-and-discovery" aria-hidden="true">#</a> Curated Feeds and Discovery</h2>
<p>Another issue created by social media is the prevalence of “algorithmic feeds”. We decided that the constant stream of input for our eyeballs should never end, so we built these complex systems to generate new content for us based on our interests.</p>
<p>But these are giant black boxes, and nobody really knows what signals go into them. Throw advertising, “fake news” and a couple of trolls into the mix, and you get the mess we all know now.</p>
<p>That’s why many people crave a <strong>more controlled reading experience</strong> on their own terms. Chronological, personal, relevant - a bespoke magazine of trusted sources. A curated feed.</p>
<p>One way to achieve something like that is through plain ol’ boring RSS. One more thing that was said to be dead but is growing in popularity again:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Who’s gonna read your personal blog because it has an RSS feed? I’m gonna read your personal blog because it has an RSS feed. <a href="https://t.co/mtcyKhEVet">pic.twitter.com/mtcyKhEVet</a></p>&mdash; Chris Coyier (@chriscoyier) <a href="https://twitter.com/chriscoyier/status/1214606808125341696?ref_src=twsrc%5Etfw">January 7, 2020</a></blockquote>
<p>Another possibility is to discover new content through human connections instead of algorithms. People we already know for their content recommend others in the same field, creating decentralized clusters of trusted information.</p>
<p>Website owners used to do this a lot in the days before search engines, by providing <a href="https://mxb.dev/blogroll/">Blogroll Pages</a> or forming <a href="https://en.wikipedia.org/wiki/Webring">Webrings</a> with links to others in their cluster.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p><strong>Webrings</strong> were a common way for people to connect their sites in the early web. To be a member of a webring, you had to embed a little widget on your site that contained a “forward”, a “backward”, and a “random” button. These buttons would then link to other sites in the ring.</p><p>BTW: If you want to host your own webring, I made this free <a href="https://mxb.dev/blog/webring-kit/">Starter Kit</a> for you.</p></div></div>
<webring-banner>
    <p>Member of the <a href="https://webringdemo.netlify.com/">An Example Webring</a> webring</p>
    <a href="https://webringdemo.netlify.com/prev">Previous</a>
    <a href="https://webringdemo.netlify.com/random">Random</a>
    <a href="https://webringdemo.netlify.com/next">Next</a>
</webring-banner>
<script async="" src="https://webringdemo.netlify.com/embed.js" charset="utf-8"></script>
<h2 id="h-smaller-communities-and-web-monetization"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-smaller-communities-and-web-monetization" aria-hidden="true">#</a> Smaller Communities and Web Monetization</h2>
<p>Many independent creators are moving away from big “everyone’s on them” platforms back to private, more niche communities. New models for membership sites like <a href="https://ghost.org/members/">Ghost’s “Members”</a> feature enable creators to build communities on their content. People teach courses, self-publish books or provide APIs for specific topics.</p>
<p>Where the 90s had chatrooms and message boards, today there are tools like <a href="https://discord.com/">Discord</a> or <a href="https://www.twitch.tv/">Twitch</a> that help people with shared interests to connect with each other. These niche communities can then be a powerful userbase for independent businesses.</p>
<p>Of course the problem of monetization has existed from the very start of the web, and it’s still not easy today to earn money without splattering ads everywhere. But new standards like the <a href="https://webmonetization.org/">Web Monetization API</a> could be a very interesting solution, enabling creators to <a href="https://coil.com/">receive micro-payments</a> for their content.</p>
<h2 id="h-learning-from-the-past"><a class="heading-anchor" href="https://mxb.dev/blog/the-return-of-the-90s-web/#h-learning-from-the-past" aria-hidden="true">#</a> Learning from the Past</h2>
<p>I don’t know if all of these trends will really play out, or if we’re up for something completely different. I do think it’s a good idea to learn from the past though, because that is what keeps us moving forward.</p>
<p>So maybe the second 90s can be even better than the first. At least we’re done with NSYNC this time.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Human Code</title>
            <link href="https://mxb.dev/blog/human-code/"/>
            <updated>2020-06-05T00:00:00Z</updated>
            <id>https://mxb.dev/blog/human-code/</id>
            <content type="html"><![CDATA[
                <p class="lead">Violence and injustice are omnipresent these days. We’re faced with an ugly truth and it’s gut-wrenching to watch.</p>
<p>Through my developer-centric filter bubble, I sometimes see the tech world react to times of crisis. Often our first instinct seems to be to turn to technology. Build something to fix this.</p>
<p>I get that if all you have is a hammer, everything looks like a nail. I’m guilty of this myself. That knee-jerk reaction might come from a genuine desire to help - and if code is what we know best, it’s understandable that we want to apply these skills here too.</p>
<p><strong>But some problems can’t be solved with technology.</strong></p>
<p>You can’t code away systemic racism, and you can’t design your way out of a human rights crisis.</p>
<p>No blockchain, no cloud and no A.I. will get us out of this.</p>
<p>There are problems that have to be solved with humans. They have to be solved in our laws, our culture, and ultimately our minds. It’s a long, hard, uncomfortable and sometimes violent process.</p>
<p>Technology can only help that process by taking a step back. By amplifying voices that would otherwise not be heard, and by providing tools for people to take action.</p>
<p>The web is an amazing tool in bringing us together. Yet some of the best and brightest minds of our generation are working on how to get more people to click on ads. Imagine what technology could be capable of if it focused all that energy on the problems in our communities instead.</p>
<p>There are examples of code being used for the greater good in this:</p>
<ul>
<li>People organize on independent websites and encrypted messaging apps</li>
<li>People <a href="https://twitter.com/imPatrickT/status/1268904975289253889?s=20">document police brutality</a> online and try to hold them accountable</li>
<li>When the “black squares” campaign drowned out images of the movement on Instagram, someone <a href="https://twitter.com/blastbots/status/1267792153016709121?s=19">wrote a bot</a> to reach out to posters to take them down.</li>
</ul>
<p>There’s many more I’m sure, but they all stand back behind the actual human beings in the streets, protesting for justice.</p>
<p>Code won’t bring us forward here. People will.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Color Theme Switcher</title>
            <link href="https://mxb.dev/blog/color-theme-switcher/"/>
            <updated>2020-04-30T00:00:00Z</updated>
            <id>https://mxb.dev/blog/color-theme-switcher/</id>
            <content type="html"><![CDATA[
                <p class="lead">Last year, the design gods decided that dark modes were the new hotness. "Light colors are for suckers", they laughed, drinking matcha tea on their fixie bikes or whatever.</p>
<p>And so every operating system, app and even some websites (mine included) suddenly had to come up with a dark mode. Fortunately though, this coincided nicely with widespread support for CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">custom properties</a> and the introduction of a new <code>prefers-color-scheme</code> media query.</p>
<p>There’s lots of tutorials on <a href="https://css-tricks.com/dark-modes-with-css/">how to build dark modes</a> already, but why limit yourself to light and dark? Only a Sith deals in absolutes.</p>
<p>That’s why I decided to build a new feature on my site:<br />
<strong>dynamic color themes!</strong> Yes, instead of two color schemes, I now have ten! That’s eight (8) better!</p>
<p>Go ahead and try it, hit that <strong>paintroller-button</strong> in the header.<br />
I’ll wait.</p>
<p><em>If you’re reading this somewhere else, the effect would look something like this:</em></p>
<div class="extend">
  <video poster="https://res.cloudinary.com/mxb/image/upload/v1620053481/theme-switcher-still_tq9zv2.png" width="752" height="452" preload="metadata" style="border: 1px solid var(--color-border)" muted="" controls="">
    <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1620053481/theme-switcher_q2nt7u.webm" type="video/webm" />
    <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1620053491/theme-switcher_h9ehlj.mov" type="video/mp4" />
  </video>
</div>
<p>Nice, right? Let’s look at how to do that!</p>
<h2 id="h-define-color-schemes"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-define-color-schemes" aria-hidden="true">#</a> Define Color Schemes</h2>
<p>First up, we need some data. We need to define our themes in a central location, so they’re easy to access and edit. My site uses <a href="https://www.11ty.dev/">Eleventy</a>, which lets me create a simple JSON file for that purpose:</p>
<pre class="language-json"><code class="language-json"><span class="token comment">// themes.json</span><br /><span class="token punctuation">[</span><br />    <span class="token punctuation">{</span><br />        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"bowser"</span><span class="token punctuation">,</span><br />        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Bowser's Castle"</span><span class="token punctuation">,</span><br />        <span class="token property">"colors"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />            <span class="token property">"primary"</span><span class="token operator">:</span> <span class="token string">"#7f5af0"</span><span class="token punctuation">,</span><br />            <span class="token property">"secondary"</span><span class="token operator">:</span> <span class="token string">"#2cb67d"</span><span class="token punctuation">,</span><br />            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"#fffffe"</span><span class="token punctuation">,</span><br />            <span class="token property">"border"</span><span class="token operator">:</span> <span class="token string">"#383a61"</span><span class="token punctuation">,</span><br />            <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#16161a"</span><span class="token punctuation">,</span><br />            <span class="token property">"primaryOffset"</span><span class="token operator">:</span> <span class="token string">"#e068fd"</span><span class="token punctuation">,</span><br />            <span class="token property">"textOffset"</span><span class="token operator">:</span> <span class="token string">"#94a1b2"</span><span class="token punctuation">,</span><br />            <span class="token property">"backgroundOffset"</span><span class="token operator">:</span> <span class="token string">"#29293e"</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span><br />    <span class="token punctuation">{</span>...<span class="token punctuation">}</span><br /><span class="token punctuation">]</span></code></pre>
<p>Our color schemes are objects in an array, which is now available during build. Each theme gets a <code>name</code>, <code>id</code> and a couple of color definitions. The parts of a color scheme depend on your specific design; In my case, I assigned each theme eight properties.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>It's a good idea to give these properties logical names instead of visual ones like &quot;light&quot; or &quot;muted&quot;, as colors vary from theme to theme. I've also found it helpful to define a couple of &quot;offset&quot; colors - these are used to adjust another color on interactions like hover and such.</p></div></div>
<p>In addition to the “default” and “dark” themes I already had before, I created eight more themes this way. I used a couple of different sources for inspiration; the ones I liked best are <a href="https://color.adobe.com/explore">Adobe Color</a> and <a href="https://www.happyhues.co/">happyhues</a>.</p>
<p>All my themes are named after Mario Kart 64 race tracks by the way, because why not.</p>
<h2 id="h-transform-to-custom-css-properties"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-transform-to-custom-css-properties" aria-hidden="true">#</a> Transform to Custom CSS Properties</h2>
<p>To actually use our colors in CSS, we need them in a different format. Let’s create a stylesheet and make custom properties out of them. Using Eleventy’s template rendering, we can do that by generating a <code>theme.css</code> file from the data, looping over all themes. We’ll use a macro to output the color definitions for each.</p>
<p>I wrote this in Nunjucks, the templating engine of my choice - but you can do it in any other language as well.</p>
<pre class="language-css"><code class="language-css"><span class="token comment">/* theme.css.njk */</span><br />---<br /><span class="token property">permalink</span><span class="token punctuation">:</span> <span class="token string">'/assets/css/theme.css'</span><br /><span class="token property">excludeFromSitemap</span><span class="token punctuation">:</span> true<br />---<br /><span class="token comment">/*<br />  this macro will transform the colors in the JSON data<br />  into custom properties to use in CSS.<br />*/</span><br /><span class="token punctuation">{</span>% macro <span class="token function">colorscheme</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> %<span class="token punctuation">}</span><br />    <span class="token selector">--color-bg:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.background <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-bg-offset:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.backgroundOffset <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-text:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.text <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-text-offset:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.textOffset <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-border:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.border <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-primary:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.primary <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-primary-offset:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.primaryOffset <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;<br />    --color-secondary:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> colors.secondary <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">;</span><br /><span class="token punctuation">{</span>% endmacro %<span class="token punctuation">}</span><br /><br /><span class="token comment">/* <br />  get the "default" light and dark color schemes<br />  to use if no other theme was selected<br />*/</span><br /><span class="token punctuation">{</span>%- set default = themes|<span class="token function">getTheme</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span> -%<span class="token punctuation">}</span><br /><span class="token punctuation">{</span>%- set dark = themes|<span class="token function">getTheme</span><span class="token punctuation">(</span><span class="token string">'dark'</span><span class="token punctuation">)</span> -%<span class="token punctuation">}</span><br /><br /><span class="token comment">/*<br />  the basic setup will just use the light scheme<br />*/</span><br /><span class="token selector">:root</span> <span class="token punctuation">{</span><br />    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">colorscheme</span><span class="token punctuation">(</span>default.colors<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><span class="token comment">/*<br />  if the user has a system preference for dark schemes,<br />  we'll use the dark theme as default instead<br />*/</span><br /><span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token selector">:root</span> <span class="token punctuation">{</span><br />        <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">colorscheme</span><span class="token punctuation">(</span>dark.colors<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">/*<br />  finally, each theme is selectable through a <br />  data-attribute on the document. E.g:<br />  &lt;html data-theme="bowser"><br />*/</span><br /><span class="token punctuation">{</span>% for theme in themes %<span class="token punctuation">}</span><br /><span class="token selector">[data-theme='{{ theme.id }}']</span> <span class="token punctuation">{</span><br />    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">colorscheme</span><span class="token punctuation">(</span>theme.colors<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><span class="token punctuation">{</span>% endfor %<span class="token punctuation">}</span><br /></code></pre>
<h2 id="h-using-colors-on-the-website"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-using-colors-on-the-website" aria-hidden="true">#</a> Using colors on the website</h2>
<p>Now for the tedious part - we need to go through all of the site’s styles and replace every color definition with the corresponding custom property. This is different for every site - but your code might look like this if it’s written in SCSS:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">body </span><span class="token punctuation">{</span><br />    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span><br />    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token variable">$line-height</span><span class="token punctuation">;</span><br />    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$gray-dark</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>Replace the static SCSS variable with the theme’s custom property:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">body </span><span class="token punctuation">{</span><br />    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span><br />    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token variable">$line-height</span><span class="token punctuation">;</span><br />    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<div class="callout callout--warning"><span class="callout__icon"><svg class="icon icon--warning" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-warning"></use></svg></span><div class="callout__content"><p><strong>Attention:</strong> Custom Properties are supported in <a href="https://caniuse.com/#search=custom%20properties">all modern browsers</a>, but if you need to support IE11 or Opera Mini, be sure to provide a fallback.</p></div></div>
<p>It’s fine to mix static preprocessor variables and custom properties by the way - they do different things. Our line height is not going to change dynamically.</p>
<p>Now do this for every instance of <code>color</code>, <code>background</code>, <code>border</code>, <code>fill</code> … you get the idea. Told you it was gonna be tedious.</p>
<h2 id="h-building-the-theme-switcher"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-building-the-theme-switcher" aria-hidden="true">#</a> Building the Theme Switcher</h2>
<p>If you made it this far, congratulations! Your website is now themeable (in theory). We still need a way for people to switch themes without manually editing the markup though, that’s not very user-friendly. We need some sort of UI component for this - a theme switcher.</p>
<h3 id="h-generating-the-markup"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-generating-the-markup" aria-hidden="true">#</a> Generating the Markup</h3>
<p>The switcher structure is pretty straightforward: it’s essentially a list of buttons, one for each theme. When a button is pressed, we’ll switch colors. Let’s give the user an idea what to expect by showing the theme colors as little swatches on the button:</p>
<figure class="extend">
    <img src="https://res.cloudinary.com/mxb/image/upload/v1620053480/theme-buttons_ilai00.jpg" loading="lazy" alt="a row of buttons, showing the theme name and color swatches" />
    <figcaption>Fact: All good design is derivative of Mario Kart</figcaption>
</figure>
<p>Here’s the template to generate that markup. Since custom properties are cascading, we can set the <code>data-theme</code> attribute on the individual buttons as well, to inherit the correct colors. The button also holds its <code>id</code> in a <code>data-theme-id</code> attribute, we will pick that up with Javascript later.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themeswitcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />{% for theme in themes %}<br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themeswitcher__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__btn js-themepicker-themeselect<span class="token punctuation">"</span></span> <span class="token attr-name">data-theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ theme.id }}<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select color theme '{{ theme.name }}'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ theme.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__palette<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__swatch themepicker__swatch--primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__swatch themepicker__swatch--secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__swatch themepicker__swatch--border<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__swatch themepicker__swatch--textoffset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themepicker__swatch themepicker__swatch--text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br />{% endfor %}<br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><br /></code></pre>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.themepicker__swatch </span><span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><br />    <span class="token property">width</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span><br />    <span class="token property">height</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span><br />    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><br />    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 2px #ffffff<span class="token punctuation">;</span><br /><br />    <span class="token selector"><span class="token parent important">&amp;</span>--primary </span><span class="token punctuation">{</span><br />        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--secondary </span><span class="token punctuation">{</span><br />        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-secondary<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--border </span><span class="token punctuation">{</span><br />        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-border<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--textoffset </span><span class="token punctuation">{</span><br />        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-offset<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--text </span><span class="token punctuation">{</span><br />        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>There’s some more styling involved, but I’ll leave that out for brevity here. If you’re interested in the extended version, you can find all the code in <a href="https://github.com/maxboeck/mxb">my site’s github repo</a>.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm starting an email list for people interested in CSS and design experiments! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/color-theme-switcher/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Sam" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="sam@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h3 id="h-setting-the-theme"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-setting-the-theme" aria-hidden="true">#</a> Setting the Theme</h3>
<p>The last missing piece is some Javascript to handle the switcher functionality. This process is a bit more involved than we might initially assume. We need to check the user’s system preference through the <code>prefers-color-scheme</code> media query. But crucially, we also need to enable the user to override that preference, and then store the selected theme choice for later.</p>
<p>I’ve omitted some stuff here for brevity - see the <a href="https://github.com/maxboeck/mxb/blob/master/src/assets/scripts/modules/themepicker.js">full script</a> on Github for all the details.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// let's make this a new class</span><br /><span class="token keyword">class</span> <span class="token class-name">ThemeSwitcher</span> <span class="token punctuation">{</span><br />    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// define some state variables</span><br />        <span class="token keyword">this</span><span class="token punctuation">.</span>activeTheme <span class="token operator">=</span> <span class="token string">'default'</span><br /><br />        <span class="token comment">// get all the theme buttons from before</span><br />        <span class="token keyword">this</span><span class="token punctuation">.</span>themeSelectBtns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button[data-theme-id]'</span><span class="token punctuation">)</span><br />        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// determine if there is a preferred theme</span><br />        <span class="token keyword">const</span> systemPreference <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSystemPreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />        <span class="token keyword">const</span> storedPreference <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStoredPreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br /><br />        <span class="token comment">// explicit choices overrule system defaults</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span>storedPreference<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span>activeTheme <span class="token operator">=</span> storedPreference<br />        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>systemPreference<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span>activeTheme <span class="token operator">=</span> systemPreference<br />        <span class="token punctuation">}</span><br /><br />        <span class="token comment">// when clicked, get the theme id and pass it to a function</span><br />        Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>themeSelectBtns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">btn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />            <span class="token keyword">const</span> id <span class="token operator">=</span> btn<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>themeId<br />            btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token function">getSystemPreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// check if the system default is set to darkmode</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">return</span> <span class="token string">'dark'</span><br />        <span class="token punctuation">}</span><br />        <span class="token keyword">return</span> <span class="token boolean">false</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token function">getStoredPreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// check if the user has selected a theme before</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Storage <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br />        <span class="token keyword">return</span> <span class="token boolean">false</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">// this whole thing only makes sense if custom properties are supported -</span><br /><span class="token comment">// so let's check for that before initializing our switcher.</span><br /><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token constant">CSS</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CSS</span><span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'var(--fake-var)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">new</span> <span class="token class-name">ThemeSwitcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<p>When somebody switches themes, we’ll take the theme id and set is as the <code>data-theme</code> attribute on the document. That will trigger the corresponding selector in our <code>theme.css</code> file, and the chosen color scheme will be applied.</p>
<p>Since we want the theme to persist even when the user reloads the page or navigates away, we’ll save the selected id in <code>localStorage</code>.</p>
<pre class="language-js"><code class="language-js"><span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token comment">// set the theme id on the &lt;html> element...</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span>activeTheme <span class="token operator">=</span> id<br />    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-theme'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><br /><br />    <span class="token comment">// and save the selection in localStorage for later</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasLocalStorage<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>On a server-rendered site, we could store that piece of data in a cookie instead and apply the theme id to the html element before serving the page. Since we’re dealing with a static site here though, there is no server-side processing - so we have to do a small workaround.</p>
<p>We’ll retrieve the theme from <code>localStorage</code> in a tiny additional script in the head, right after the stylesheet is loaded. Contrary to the rest of the Javascript, we want this to execute as early as possible to avoid a FODT (“flash of default theme”).</p>
<p>👉 <strong>Update:</strong> Chris Coyier came up with the term “FART” (<a href="https://css-tricks.com/flash-of-inaccurate-color-theme-fart/">Flash of inAccurate ColoR Theme</a>) for this, which of course is way better.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/css/main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><br />        <span class="token comment">// if there's a theme id in localstorage, use it on the &lt;html></span><br />        localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <br />        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-theme'</span><span class="token punctuation">,</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<p>If no stored theme is found, the site uses the default color scheme (either light or dark, depending on the users <a href="https://web.dev/prefers-color-scheme/">system preference</a>).</p>
<h2 id="h-get-creative"><a class="heading-anchor" href="https://mxb.dev/blog/color-theme-switcher/#h-get-creative" aria-hidden="true">#</a> Get creative</h2>
<p>You can create any number of themes this way, and they’re not limited to flat colors either - with some extra effort you can have patterns, gradients or even GIFs in your design. Although just because you can doesn’t always mean you should, as is evidenced by my site’s new <em>“Lobster Life”</em> theme.</p>
<p>Please don’t use that one.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Eleventy Résumé Builder</title>
            <link href="https://mxb.dev/blog/eleventy-resume-builder/"/>
            <updated>2020-04-18T00:00:00Z</updated>
            <id>https://mxb.dev/blog/eleventy-resume-builder/</id>
            <content type="html"><![CDATA[
                <p class="lead">Last week I came across <a href="https://ericwbailey.design/writing/how-to-not-make-a-resume-in-react.html">this post</a> by Eric Bailey. In it he describes some of the issues he's seeing with overengineered, inaccessible résumés.</p>
<p>This again addresses the over-reliance on powerful Javascript frameworks like React, even in cases where simple semantic HTML might be better suited for the task.</p>
<p>I’m currently putting my self-isolated weekend time towards side projects, and I thought this could be something I can tackle. So I built something new:</p>
<h2 id="h-a-r%C3%A9sum%C3%A9-template"><a class="heading-anchor" href="https://mxb.dev/blog/eleventy-resume-builder/#h-a-r%C3%A9sum%C3%A9-template" aria-hidden="true">#</a> A résumé template</h2>
<figure class="extend">
    <a href="https://demo-resume.netlify.app/"><img src="https://mxb.dev/blog/eleventy-resume-builder/resume.png" alt="" /></a>
    <figcaption>A generated résumé on screen and in print</figcaption>
</figure>
<p>This is a static micro-site generated by <a href="https://11ty.dev/">Eleventy</a> that can be used as an online résumé. The output is basically just a simple <code>index.html</code> file.</p>
<p><strong>Features:</strong></p>
<ul>
<li>Fully Customizable</li>
<li>Semantic HTML</li>
<li>Accessible (WCAG AA)</li>
<li>Print Styles</li>
<li><a href="http://microformats.org/wiki/h-resume">h-resume</a> Microformat</li>
<li>Integrated Spellcheck Linter</li>
<li>Self-Contained (no external resources)</li>
<li>Search Engine Optimized (meta, JSON-LD)</li>
<li>Critical CSS Inlined</li>
</ul>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>You can find the full <a href="https://github.com/maxboeck/resume">source code on Github</a>, along with instructions how to set up and customize the project.</p></div></div>
<p>Many people are out of work due to the pandemic already, and even more might still lose their jobs as the world is headed towards a massive economic fallout. There is little we can do to stop that, but a tool like this might hopefully be a small help for people to find new work once the situation improves.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in front-end development and static sites. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/eleventy-resume-builder/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Phil" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="phil@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>

            ]]></content>
        </entry>
        <entry>
            <title>The Emergency Website Kit</title>
            <link href="https://mxb.dev/blog/emergency-website-kit/"/>
            <updated>2020-03-22T00:00:00Z</updated>
            <id>https://mxb.dev/blog/emergency-website-kit/</id>
            <content type="html"><![CDATA[
                <p class="lead">In cases of emergency, many organizations need a quick way to publish critical information. But existing (CMS) websites are often unable to handle sudden spikes in traffic.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Just received a shelter-in-place emergency alert with a web address for more information. Clicked the link. The site is down. All emergency sites should be static.</p>&mdash; Nicholas C. Zakas (@slicknet) <a href="https://twitter.com/slicknet/status/1239972949819404291?ref_src=twsrc%5Etfw">March 17, 2020</a></blockquote>
<p>To make things worse, natural disasters can also damage local network infrastructure, sometimes leaving people with very poor mobile connections.</p>
<p>I’ve <a href="https://mxb.dev/blog/hurricane-web/">written about</a> the practice of publishing minimal “text-only” versions of critical news websites before and I think it makes a lot of sense to rely on the <a href="https://en.wikipedia.org/wiki/Rule_of_least_power">rule of least power</a> for these things. When it comes to resilience, you just can’t beat static HTML.</p>
<h2 id="h-an-emergency-website-kit"><a class="heading-anchor" href="https://mxb.dev/blog/emergency-website-kit/#h-an-emergency-website-kit" aria-hidden="true">#</a> An Emergency Website Kit</h2>
<p>Like so many others, I’m currently in voluntary quarantine at home - and I used some time this weekend to put a small <a href="https://github.com/maxboeck/emergency-site">boilerplate</a> together for this exact usecase.</p>
<p>Here’s the main idea:</p>
<ul>
<li>generate a static site with <a href="https://11ty.dev/">Eleventy</a></li>
<li>minimal markup, inlined CSS</li>
<li>aim to transmit everything in the first connection roundtrip (~14KB)</li>
<li>progressively enable offline-support w/ Service Worker</li>
<li>set up <a href="https://www.netlifycms.org/">Netlify CMS</a> for easy content editing</li>
<li>one-click deployment via Netlify</li>
</ul>
<p>The site contains only the bare minimum - no webfonts, no tracking, no unnecessary images. The entire thing should fit in a single HTTP request. It’s basically just a small, ultra-lean blog focused on maximum resilience and accessibility. The Service Worker takes it a step further from there so if you’ve visited the site once, the information is still accessible even if you lose network coverage.</p>
<p>The end result is just a set of static files that can be easily hosted on cloud infrastructure and put on a CDN. Netlify does this out of the box, but other providers or privately owned servers are possible as well.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>You can find the full <a href="https://github.com/maxboeck/emergency-site">project source on Github</a> as well as a <a href="https://emergency-site.netlify.app/">demo site here</a>.</p></div></div>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in front-end development and static sites! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/emergency-website-kit/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Sam" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="sam@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-not-everyone-is-a-developer"><a class="heading-anchor" href="https://mxb.dev/blog/emergency-website-kit/#h-not-everyone-is-a-developer" aria-hidden="true">#</a> Not Everyone is a Developer</h2>
<p>I’m aware that not everyone, especially the people in charge of setting up websites like this, is familiar with things like <code>Node</code> or the command line. I want to keep the barrier to entry as low as possible.</p>
<p>Taking a hint from the excellent <a href="https://www.servicerelief.us/start">servicerelief.us</a> project, it is possible to configure the template in such a way that all configuration can be done via environment variables.</p>
<p>These are set in the Netlify UI when the site is first deployed, meaning a user would only need a free Github and Netlify account to get started - without ever touching a line of code or having to mess around with npm or Eleventy itself. The content editing can all be done through Netlify CMS, which offers a much more useable graphical interface.</p>
<p>In the meantime, if you want to set up an emergency website and need help to get started, <a href="mailto:hello@mxb.dev">let me know</a>!</p>
<h2 id="h-update-2504"><a class="heading-anchor" href="https://mxb.dev/blog/emergency-website-kit/#h-update-2504" aria-hidden="true">#</a> Update 25.04.</h2>
<p>I recently did a short talk about this project at an online meetup. You can <a href="https://www.youtube.com/watch?v=0WCNOHCuqYU">watch it here</a>:</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/0WCNOHCuqYU?start=5" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

            ]]></content>
        </entry>
        <entry>
            <title>Making a Gigposter</title>
            <link href="https://mxb.dev/blog/making-a-gigposter/"/>
            <updated>2020-02-20T00:00:00Z</updated>
            <id>https://mxb.dev/blog/making-a-gigposter/</id>
            <content type="html"><![CDATA[
                <p class="lead">Long before I wrote my first line of code, all I wanted to do was make music. I went to a music-focused high school, played in a couple of bands, and I loved it.</p>
<p>I also loved making flyers, posters and CD artwork for local bands - It’s actually what got me started in design and ultimately led me to build for the web. You see I can’t really draw, so my only option to create the images in my head was with the help of computers, which I was able to use. Creating posters became a hobby of mine.</p>
<p>These days, I’m usually too busy to find time for that hobby. But I keep a collection of my favourite gigposters and once in a while, when an occasion arises, I get to do one myself.</p>
<p>I still do vocals in one band, and so fortunately that occasion comes once a year in the form of a <em>Rage Against the Machine</em> cover gig we play in my hometown. The event is called <a href="https://www.youtube.com/watch?v=oxK7rSrg5jY">“Rage/Aid”</a> because all of the proceeds are donated to charity.</p>
<p><strong>TL;DR:</strong> <a href="https://mxb.dev/blog/making-a-gigposter/#h-final-result">Here’s the poster</a> I did for that show, and how I made it.</p>
<h2 id="h-concept"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-concept" aria-hidden="true">#</a> Concept</h2>
<p>The hardest part for me is coming up with a good idea. Much like a website, a gigposter is a mixture of information and art - and should be tailored to the general vibe of the band/show. That being said, there really are no rules as to which motives fit which genre. You get to freely explore different ideas and concepts.</p>
<p>I usually start with a few crudely-drawn pencil sketches of possible motives. Just shoot these out real quick and let your mind wander - you can care about making them look good later. You can get inspiration from anywhere: art, nature, architecture, movies… whatever captures your attention.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/sketch.jpg" width="752" height="475" alt="initial pencil sketches on a notepad" style="border: 1px solid #BBB" />
    <figcaption>some initial sketches</figcaption>
</figure>
<p>For this one, I liked the idea of referencing a famous painting, <a href="https://en.wikipedia.org/wiki/The_Son_of_Man">“The Son of Man”</a> by René Magritte. It’s the one with the apple in front of a man’s face - you might know it.</p>
<p>I thought I could take the concept of the faceless, anonymous person and put a twist on it. I also knew I wanted fire in there somehow to symbolize Rage against the Machine’s anger and spirit of revolution, so I drew a lit match instead of the apple.</p>
<p><em>It really doesn’t have to be clever or deep or anything though, it’s a fucking poster, not an arts degree. 🧐 I just liked the visual and thought it would go well with the vibe, so that’s what I used.</em></p>
<h2 id="h-illustration"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-illustration" aria-hidden="true">#</a> Illustration</h2>
<p>As I mentioned earlier, I can’t draw for shit. There are some <a href="https://mxb.dev/blog/the-lost-art-of-the-gigposter/">insanely talented poster artists</a> out there that do it all by hand and I greatly admire their skill - but I have to rely on digital trickery to make my stuff look good.</p>
<p>So I took to a stock photo site to find something I could base my illustration on. After some searching, I came across <a href="https://www.shutterstock.com/de/g/GlebShabash?searchterm=schattenri%C3%9F">this series of backlit faces</a> that seemed like a nice fit.</p>
<p>I like to have the main motive as a vector drawing because that’s just easier to work with. I can tweak certain parts or recolor it later without too much trouble. Plus if I need it on the side of a bus someday, I can always scale it up. So my first step is usually to get the motive vectorized.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/vectorize.jpg" width="752" height="606" alt="a split screen view of the used photo (left) and the color-separated vector (right)" />
    <figcaption>the stock photo is vectorized and color-separated</figcaption>  
</figure>
<p>I opened the stock photo in Illustrator and began tracing the outline with the pen tool. I also separated the colors into three layers, from dark to light. This sort of thing is common in stencil or screenprint artwork, and I wanted to recreate that style. It works best on high-contrast images like this.</p>
<p>I played around with different filters and effects to give the silhouette shape more detail. The one I chose is the <a href="https://en.wikipedia.org/wiki/Halftone">halftone filter</a>: it transforms the shapes into thousands of “print dots”. The size and density of these dots then determine the lightness.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/halftone.jpg" width="752" height="584" alt="view of the halftone effect, a portion of the image is zoomed to show resulting print dots" loading="lazy" />
    <figcaption>halftone blends the colors together as print dots</figcaption>
</figure>
<p>This breaks a bit with the stencil style, but I like how it blends the edges of the three color layers together, and it reminds me of old newspapers and billboards.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/match.jpg" width="752" height="475" alt="a matchstick, its vectorized version, and a vector outline of a flame" loading="lazy" />
    <figcaption>match original and with treshold applied; flame vector</figcaption>
</figure>
<p>For the match, I googled for a random picture as a base, applied a <a href="https://en.wikipedia.org/wiki/Thresholding_(image_processing)">treshold</a> and vectorized it in Illustrator. The flame is just a doodle I made with the pen tool, with a few extra points and distortion added to make the edges more jagged. The zigzag filter can help with that.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/motive.jpg" width="752" height="653" alt="the motive put together, match in front of a black silhouette" loading="lazy" />
    <figcaption>putting the main motive together</figcaption>
</figure>
<p>Putting the main motive together already looks cool; the flame fits nicely inside the silhouette shape. Good enough for now - I’ll let that sit for a while and work on other stuff.</p>
<h2 id="h-background"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-background" aria-hidden="true">#</a> Background</h2>
<p>For the background, I switched to Photoshop as it’s pixel-based. It’s important to work in CMYK colors here and make sure the document is at least 300dpi, large enough for the intended poster size - it’s a pain to scale pixel artwork up later on.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/background.jpg" width="752" height="414" alt="a red background with multiple layers of detail applied" loading="lazy" />
    <figcaption>background with multiple layers of detail</figcaption>
</figure>
<p>I started with a flat color and then progressively layered other stuff on top to give it more detail. The base here was a bright red.</p>
<p>I then used a <a href="https://lostandtaken.com/downloads/category/paint/watercolor-texture/">watercolor texture</a>, a bit of speckle/noise and a grunge brush to make it look more eroded. I was going for a screenprint-like style, where the color often doesn’t distribute evenly across the paper and has these interesting imperfections. The nice thing about blending these layers together in Photoshop is that you can still easily tweak the base color afterwards and try out different color schemes.</p>
<p>Another trick I like is to give the artwork a “frame”, again to make it look a bit more handmade:</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/frame.jpg" width="752" height="564" alt="the red frame now has a frame around it" loading="lazy" />
    <figcaption>outer frame has rough edges to make it look more like a screenprint</figcaption>
</figure>
<p>This is just an extra mask layer, where the sides are drawn with a <a href="https://www.brusheezy.com/free/paint-roller">paintroller brush</a> that gives you these nice rough edges. These are small details, but they all add to the general look and feel of the poster.</p>
<h2 id="h-typography"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-typography" aria-hidden="true">#</a> Typography</h2>
<p>Gigposters let you get really creative with type. There are some awesome pieces that use crazy custom letterforms and make them a part of the artwork itself. For my poster, I just wanted something simple that matched the illustration style.</p>
<p>I found this nice big brush font called “Generous” by Danish type foundry <a href="http://pizzadude.dk/">PizzaDude</a>. It has broad strokes and rough edges that go well with the background, and work nicely as the display font. I paired it with the clean sans-serif <a href="https://www.fonts.com/font/hvd-fonts/brandon-grotesque">Brandon Grotesque</a> for the body copy.</p>
<img src="https://mxb.dev/blog/making-a-gigposter/fonts.jpg" width="640" height="268" alt="type sample of two fonts, one grungy, one clean" loading="lazy" />
<p>There are some other pieces of information that just have to be on there, like the date and venue. Rather than doing one big text block though, I like to break these up a bit and play with ways to integrate them into the artwork.</p>
<p>I put the supporting act in a separate badge to make it stand out more, and I made a little cutaway in the frame to hold the venue logo.</p>
<div class="extend">
    <img src="https://mxb.dev/blog/making-a-gigposter/typo-details.jpg" width="752" height="564" alt="two zoomed sections of the poster show a badge and a small detail vor the venue logo" loading="lazy" />
</div>
<h2 id="h-getting-to-print"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-getting-to-print" aria-hidden="true">#</a> Getting to Print</h2>
<p>Colors always look different on screen than in print. A piece of paper doesn’t glow, so they are usually a bit darker and less saturated in CMYK. To make sure they turn out right, you can <a href="https://en.wikipedia.org/wiki/Prepress_proofing">proof</a> your work before you send it off. If you know your color profile, Photoshop can simulate how colors will look in print.</p>
<p>A color profile is a bit of data that sets things like the color space, maximum ink application and other instructions for the printer. My local printer for example uses one called “ISO Coated v2 300%” (print companies will usually tell you which profile to use on their website). You can <a href="http://www.eci.org/en/downloads#icc_profiles_from_eci">download and install</a> these for free.</p>
<p>After everything is ready, I import the poster without all the type and vector elements into InDesign, then add them back in there. That way they’ll actually end up in the final PDF as vectors and are guaranteed to look sharp. InDesign also lets you set things like <a href="https://en.wikipedia.org/wiki/Bleed_(printing)">bleed</a> and crop marks, which are sometimes required by the printer.</p>
<h2 id="h-final-result"><a class="heading-anchor" href="https://mxb.dev/blog/making-a-gigposter/#h-final-result" aria-hidden="true">#</a> Final Result</h2>
<p>And here’s the whole thing put together (click for full PDF):</p>
<div class="extend">
    <a href="https://drive.google.com/file/d/1N_9SAstwos4O77pU5YKCRY8p_fZiVZDs/view" target="_blank" rel="noopener noreferrer">
        <img src="https://mxb.dev/blog/making-a-gigposter/poster.jpg" alt="the finished poster: a dark silhouette with a lit match in front of its face, against a bright red background. The title reads 'Rage Aid'." loading="lazy" style="border: 1px solid #DDD; box-shadow: 0 6px 12px 0 rgba(0, 0, 0, 0.15)" />
    </a>
</div>
            ]]></content>
        </entry>
        <entry>
            <title>A year in review: 2019</title>
            <link href="https://mxb.dev/blog/year-in-review-2019/"/>
            <updated>2019-12-31T00:00:00Z</updated>
            <id>https://mxb.dev/blog/year-in-review-2019/</id>
            <content type="html"><![CDATA[
                <p class="lead">As the final hours of 2019 are winding down, I want to take a moment and look back at everything that happened this year - because it was a busy one.</p>
<h2 id="h-work"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-work" aria-hidden="true">#</a> Work</h2>
<p>At the beginning of 2019, I became a partner at <a href="https://www.codista.com/">Codista</a>, the software studio where I’ve been working for some time now. Thomas, Luis and I now run the company as a trio, and building together has been great.</p>
<p>Besides working as a frontend developer on a number of challenging projects this year, I was also responsible for the rebranding of our own identity. There are some interesting new ideas in the works for our studio in 2020, and I’m excited to see them come to life.</p>
<h2 id="h-writing"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-writing" aria-hidden="true">#</a> Writing</h2>
<p>Counting this one, I’ve written ten new posts in 2019. That’s more than last year, but I’d still like to increase that number.</p>
<p>The most popular posts were:</p>
<ul>
<li><a href="https://mxb.dev/blog/the-css-mindset/">The CSS Mindset</a>: a collection of helpful mental models for writing CSS,</li>
<li><a href="https://mxb.dev/blog/on-simplicity/">On Simplicity</a>: how sometimes “less is more” in tech, and</li>
<li><a href="https://mxb.dev/blog/using-webmentions-on-static-sites/">Static Indieweb pt2: Using Webmentions</a>: a rundown of how to implement webmentions with Eleventy.</li>
</ul>
<p>The feedback from the web community on these posts was amazing, and it never gets old to hear that anything you’ve made actually helped people in some way.</p>
<p>Like in 2018, all my writing was published on my own website. I’m increasingly fond of the IndieWeb and the principles behind it, and I want to continue striving for more independence. Eleventy and Netlify both have been very valuable improvements for my personal site this year, and I really like working with them.</p>
<h2 id="h-speaking"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-speaking" aria-hidden="true">#</a> Speaking</h2>
<p>I wrote two new talks in 2019 and had the chance to speak at a few community events.</p>
<p>First I was invited as a guest speaker to the <a href="https://mozilla-tito-devr.netlify.com/">Mozilla Developer Roadshow</a>, where I had a really interesting “Fireside Chat” about CSS with HJ Chen. It was awesome meeting her and I’m very grateful for the opportunity to speak there.</p>
<p>Following my blog post about the topic, I gave a talk on <a href="https://www.youtube.com/watch?v=1TsFOfBB4GA">the CSS Mindset</a> at CSS-Minsk-JS in September and had a wonderful time. A big thank you to the organizers and attendees, who made me feel very much at home in Minsk.</p>
<figure>
    <img src="https://mxb.dev/blog/year-in-review-2019/minsk.jpg" alt="me and Ian in a bar in minsk" loading="lazy" />
  <figcaption>I met <a href="https://twitter.com/IanPouncey">Ian Pouncey</a> at CSS-Minsk-JS</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/year-in-review-2019/slide.jpg" alt="diagram of five personal websites, connected thorugh the anarchy symbol" loading="lazy" />
  <figcaption>One of the slides in my <a href="https://noti.st/mxb/lhMFMv/rage-against-the-content-machine">IndieWeb talk</a></figcaption>
</figure>
<p>A big part of this year was devoted to making our own <a href="https://webclerks.at/">Webclerks Conference</a> happen in Vienna. It was the first time for me to be involved in the organization of such an event and I really had no idea how it would turn out, so I’m overjoyed that it went so well.</p>
<p>I also shared my experiences with the IndieWeb in a talk called <a href="https://youtu.be/ucLEMETfrTA?t=7282">“Rage against the Content Machine”</a> there. I’d love to do that one again in the new year.</p>
<h2 id="h-traveling"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-traveling" aria-hidden="true">#</a> Traveling</h2>
<p>I’ve been fortunate enough to see many beautiful places on this planet now. I made a <a href="https://mxb.dev/traveling">little map</a> to keep track of them here.</p>
<p>This year, I visited Portugal, Georgia, Belarus, the Czech Republic and the Azores. My personal favourites were the ancient city of Tbilisi and the raw nature of São Miguel island, both fascinating places in their own regard.</p>
<figure>
    <img src="https://mxb.dev/blog/year-in-review-2019/tbilisi.jpg" alt="nighttime view of tbilisi city from a nearby hilltop" loading="lazy" />
  <figcaption>Tbilisi, Georgia</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/year-in-review-2019/saomiguel.jpg" alt="twin lakes of sete cidades, sao miguel island in the azores" loading="lazy" />
  <figcaption>Sete Cidades, São Miguel, Azores</figcaption>
</figure>
<h2 id="h-personal"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-personal" aria-hidden="true">#</a> Personal</h2>
<p>2019 was also a source of frustration in many ways. From the ongoing global shift to right-wing populism to increasingly dystopian technology trends to the looming threat of climate change. I’ve had some issues with worrying and stress in my personal life as well.</p>
<p>But I’d like to think that the new decade can be an opportunity to learn from past mistakes and change things for the better. I’m going to try and focus on that going forward.</p>
<h2 id="h-goals-for-2020"><a class="heading-anchor" href="https://mxb.dev/blog/year-in-review-2019/#h-goals-for-2020" aria-hidden="true">#</a> Goals for 2020</h2>
<ul>
<li>help to further grow Codista into a sustainable, ethical business</li>
<li>write more regularly</li>
<li>continue involvement in the IndieWeb community</li>
<li>attend and speak at more conferences</li>
<li>make more music</li>
<li>read more non-tech books</li>
<li>keep up with friends and enjoy life a little more</li>
</ul>
<p>That’s all folks. See you tomorrow!</p>

            ]]></content>
        </entry>
        <entry>
            <title>Webclerks Conference</title>
            <link href="https://mxb.dev/blog/webclerks-conf-2019/"/>
            <updated>2019-11-28T00:00:00Z</updated>
            <id>https://mxb.dev/blog/webclerks-conf-2019/</id>
            <content type="html"><![CDATA[
                <p class="lead">It has been three days now since I stood on stage at Urania Vienna, hearing Manuel close our <a href="https://webclerks.at/">very first conference</a>. I'm still not really sure how we pulled that off.</p>
<figure class="extend">
    <img src="https://mxb.dev/blog/webclerks-conf-2019/webclerks-team.jpg" alt="The webclerks team on stage in front of a screen" />
    <figcaption>Photo by Sergey Poliakov <a href="https://twitter.com/sergeypoliakov/status/1199253984579670018">(Twitter)</a></figcaption>
</figure>
<p>I have been to quite a few web development conferences as an attendee, and lately even as a speaker. But the organization of such events always eluded me. I of course noticed when an event was particularly well put together, but I always assumed that the people running the show had a large team, lots of experience and were just very talented organizers.</p>
<p>That’s why it felt so weird to suddenly find myself in that group. Clearly we’re just a bunch of people who thought it would be cool to invite some of our heroes and heroines to Vienna, with little prior experience in creating an event at that scale.</p>
<p>But then it worked! We’d somehow gotten ourselves an absolutely incredible line-up of speakers and a sold out venue.</p>
<h2 id="h-welcome-to-webclerks-conference"><a class="heading-anchor" href="https://mxb.dev/blog/webclerks-conf-2019/#h-welcome-to-webclerks-conference" aria-hidden="true">#</a> Welcome to Webclerks Conference</h2>
<figure class="extend">
    <img src="https://mxb.dev/blog/webclerks-conf-2019/webclerks-jeremy.jpg" alt="the full auditorium listening to jeremy's keynote" />
    <figcaption>Jeremy Keith giving his opening keynote</figcaption>
</figure>
<p>Fast forward to last Monday, when months of work finally resulted in that one special day. Sleep had been rare in the days before, and the tension was high.</p>
<p>None of us really knew how this would turn out, so we just gave it our best shot. And the <a href="https://adactio.com/journal/16175">feedback</a> so far from speakers and attendees alike has been great:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">It&#39;s hard to believe that the <a href="https://twitter.com/wearewebclerks?ref_src=twsrc%5Etfw">@wearewebclerks</a> conference was the first one ever by the organisers. It was slick, welcoming, friendly, and interesting. Thanks for asking me to speak! ♥️ <a href="https://twitter.com/hashtag/webclerks?src=hash&amp;ref_src=twsrc%5Etfw">#webclerks</a></p>&mdash; Charlie Don&#39;t Surf (@sonniesedge) <a href="https://twitter.com/sonniesedge/status/1199240143699423232?ref_src=twsrc%5Etfw">November 26, 2019</a></blockquote>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The <a href="https://twitter.com/wearewebclerks?ref_src=twsrc%5Etfw">@wearewebclerks</a> conference today was seriously awesome! Great talks, great organization and great people! And all of that in Vienna ♥️ Looking forward to the next year <a href="https://twitter.com/hashtag/webclerks?src=hash&amp;ref_src=twsrc%5Etfw">#webclerks</a> <a href="https://t.co/GHOqfgzsNB">pic.twitter.com/GHOqfgzsNB</a></p>&mdash; Lisa Gringl (@kringal) <a href="https://twitter.com/kringal/status/1199049566244540417?ref_src=twsrc%5Etfw">November 25, 2019</a></blockquote>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">✅ brilliant speakers<br />✅ surprise acts<br />✅ live captions<br />✅ tasty food from &quot;Speisen ohne Grenzen&quot;<br />✅ water bottles to reduce waste<br /><br />Congratulations to the organizers of a great <a href="https://twitter.com/hashtag/webclerks?src=hash&amp;ref_src=twsrc%5Etfw">#webclerks</a> community conference <a href="https://t.co/sOflfHkA1F">pic.twitter.com/sOflfHkA1F</a></p>&mdash; Harald Atteneder (@urbantrout) <a href="https://twitter.com/urbantrout/status/1199043552858329089?ref_src=twsrc%5Etfw">November 25, 2019</a></blockquote>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">This conference was a great example of getting it right from the beginning. Amazing speakers, inclusive, accessible and with all details taken care of. Congratulations to the team! I&#39;m really looking forward to next year&#39;s event <a href="https://twitter.com/hashtag/webclerks?src=hash&amp;ref_src=twsrc%5Etfw">#webclerks</a> <a href="https://t.co/YlRfzyt5kD">pic.twitter.com/YlRfzyt5kD</a></p>&mdash; Magdalena Adrover (@madrovergaya) <a href="https://twitter.com/madrovergaya/status/1199036748279496705?ref_src=twsrc%5Etfw">November 25, 2019</a></blockquote>
<h2 id="h-lessons-learned"><a class="heading-anchor" href="https://mxb.dev/blog/webclerks-conf-2019/#h-lessons-learned" aria-hidden="true">#</a> Lessons Learned</h2>
<p>Here are some of my personal takeaways from the experience:</p>
<ul>
<li>
<p>It really pays off to have a <strong>good tech team</strong>. We could not have asked for a better crew than <a href="https://www.eventsolutions.cc/">ALC</a>, they handled the event flawlessly by themselves. A huge thing to get off your shoulders as an organizer.</p>
</li>
<li>
<p>If you want to livestream an event on youtube, that apparently requires a “brand account”. These take 24 hours to approve, so it’s best to not discover this <strong>the night before the conference</strong>. (Thankfully <a href="https://twitter.com/jkphl">Joschi</a> from a11yclub helped us out there!)</p>
</li>
<li>
<p>The <strong>glass water bottles</strong> we put into everyone’s goodie bag were a big hit. People liked that they could refill anytime. Less waste, more hydration!</p>
</li>
<li>
<p>You can <strong>make your own rules!</strong> Not all tech confs have to follow the same recipe. In fact some of the little differences are what makes you stand out.</p>
</li>
<li>
<p>We’re not a faceless recruiting event, but a <strong>community of humans</strong>, and we wanted to be as inclusive as possible. That thought went into a lot of aspects of our conference from ticket pricing to info emails to food choices. Definitely something to keep.</p>
</li>
</ul>
<figure class="extend">
    <img src="https://mxb.dev/blog/webclerks-conf-2019/webclerks-remy.jpg" alt="Manuel and Remy chatting between talks" />
</figure>
<h2 id="h-roll-credits"><a class="heading-anchor" href="https://mxb.dev/blog/webclerks-conf-2019/#h-roll-credits" aria-hidden="true">#</a> Roll Credits</h2>
<p>I really have to highlight the insane amount of work that <a href="https://twitter.com/mmatuzo">Manuel</a> and <a href="https://twitter.com/claudia_laber">Claudi</a> have put into this event. There’s an internal Trello board with about a gazillion tasks on it, and most of those had their names on them. It is beyond me how they did it.</p>
<p><a href="https://twitter.com/lctdnl">Daniel</a> has been an absolute beast as well - he did all the designs, printed badges, flags, shirts, stickers - you name it. If you thought webclerks looked like a professional brand, it’s because of him.</p>
<p>We also had lots of help from awesome volunteers who dedicated their time and energy to our event. <a href="https://twitter.com/jeannineprueger">Jeannine</a>, <a href="https://twitter.com/KerstinWuk">Kerstin</a>, Michel, Anne and <a href="https://twitter.com/greg_808">Gregor</a> have been incredibly helpful and I’m so glad they joined our team.</p>
<h2 id="h-community-matters"><a class="heading-anchor" href="https://mxb.dev/blog/webclerks-conf-2019/#h-community-matters" aria-hidden="true">#</a> Community Matters</h2>
<p>I honestly can’t think of many industries where it would have been possible to put an event like this together from scratch. I believe the reason this worked at all is the incredible openness displayed in the web community.</p>
<p>Where international speakers come to a small local conference to share their knowledge. Where companies like mozilla support a relatively unknown event and fund inclusiveness. Where attendees pay it forward to enable underrepresented others to join.</p>
<p>I’m happy and proud to be a part of that community.</p>
<p>Thank you! 🎉</p>

            ]]></content>
        </entry>
        <entry>
            <title>Roads</title>
            <link href="https://mxb.dev/blog/roads/"/>
            <updated>2019-10-20T00:00:00Z</updated>
            <id>https://mxb.dev/blog/roads/</id>
            <content type="html"><![CDATA[
                <p class="lead">There's a small town that needs a new road. The old road is pretty worn and full of potholes, so it's time for a change.</p>
<p>First plans look promising. It’s really nice and modern. The old road had sidewalks and a bike lane, but these don’t really fit in with the new design and take too much time to build. Nobody on the planning committee knows any pedestrians or cyclists anyway, so the project doesn’t really focus on that.</p>
<p>Soon people get to work. Instead of regular concrete though, the construction crew decides to use a new cutting-edge synthetic asphalt. It was developed by a big construction company from the city that uses it to build a 12-lane highway in the nation’s capital - but they say anyone can use it.</p>
<p>Everyone in construction is very excited to work with this new material. You can do amazing stuff with it, and the team needs less time to get things done. They say this process will make the new road a lot better than the old one, and every modern construction crew does it this way now.</p>
<p>The friction point of the new asphalt is quite high though, so people will need a bit more horse power to drive on it - and it also takes about five times more fuel than usual. Luckily everybody on the construction team earns a very nice salary and drives a big BMW, so that isn’t really an issue. They do a couple of test drives and it all works fine.</p>
<p>The road is almost finished and everybody is really happy with it. But it was expensive to build, and the town wants to get that money back in some way. They don’t really like to put up toll booths, as these tend to scare drivers off. Instead they make a deal with some of the bigger advertising companies to put up some cameras.</p>
<p>Every car that drives on the new road will be photographed and analysed, and the ad firms can then decide to put up billboards in the middle of the road that are perfectly tailored to each driver. That is a bit distracting and slows the cars down somewhat, but it will generate revenue for the town. Plus, all these photos of drivers will tell the planners more about how it is working.</p>
<p>Finally, the road is finished.<br />
There are fewer people using it now. That’s ok though, the new road isn’t for everyone.</p>
<p>Some might even feel that the old road was better in a way, potholes and all. It didn’t have all the fancy new features, but it got them where they wanted to go.<br />
But that’s the nature of progress - just how these things are done today.</p>
<p>It’s the future.</p>

            ]]></content>
        </entry>
        <entry>
            <title>IndieWeb Link Sharing</title>
            <link href="https://mxb.dev/blog/indieweb-link-sharing/"/>
            <updated>2019-08-11T00:00:00Z</updated>
            <id>https://mxb.dev/blog/indieweb-link-sharing/</id>
            <content type="html"><![CDATA[
                <p class="lead">A pain point of the IndieWeb is that it's sometimes not as convenient to share content as it is on the common social media platforms.</p>
<p>Posting a new short <a href="https://mxb.dev/notes">“note”</a> on my site currently requires me to commit a new markdown file to the repository on Github. That’s doable (for a developer), but not really convenient, especially when you’re on the go and just want to share a quick link. Twitter and other social media platforms literally make this as easy as clicking a single button, which makes it tempting to just post stuff straight to them. That’s why I wanted to improve this process for my site.</p>
<p>A quick Google search revealed that smarter people have already solved that problem. I came across this <a href="https://timkadlec.com/remembers/2018-02-06-saving-links-to-my-site-with-a-bookmarklet/">blog post by Tim Kadlec</a> who describes adapting someone else’s link sharing technique for his (Hugo-powered) blog. That just left me the task of adapting it for my setup (Eleventy, Netlify) and customizing a few details.</p>
<p>The new link sharing basically has three main parts:</p>
<ul>
<li>a small Javascript bookmarklet to act as a “share button”</li>
<li>a form that collects and sends the shared link data, and</li>
<li>a serverless function to process it and create a new file.</li>
</ul>
<p>Here’s how they work together:</p>
<h2 id="h-the-bookmarklet"><a class="heading-anchor" href="https://mxb.dev/blog/indieweb-link-sharing/#h-the-bookmarklet" aria-hidden="true">#</a> The Bookmarklet</h2>
<p>The button to kick things off is just a small bit of Javascript that takes the current page’s title, URL and optionally a piece of selected text you may want to quote along with the link.</p>
<p>It then sends these things as GET parameters to <code>mxb.dev/share</code> by opening a new window to it.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />    <span class="token comment">// get link title</span><br />    <span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><br />    title <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />    <span class="token comment">// get optional text selection</span><br />    <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getSelection<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        selection <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>selection <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>selection<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string">'Control'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        selection <span class="token operator">=</span> document<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    selection <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />    <span class="token comment">// generate share URL</span><br />    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'https://mxb.dev/share/?title='</span><span class="token operator">+</span>title<span class="token operator">+</span><span class="token string">'&amp;body='</span><span class="token operator">+</span>selection<span class="token operator">+</span><span class="token string">'&amp;url='</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />    <span class="token comment">// open popup window to sharing form</span><br />    <span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token string">'resizable,scrollbars,status=0,toolbar=0,menubar=0,titlebar=0,width=680,height=700,location=0'</span><span class="token punctuation">;</span><br />    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'Sharer'</span><span class="token punctuation">,</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>The bookmarklet looks like this:<br />
<a class="bookmarklet" href="javascript:(function(){var title = document.getElementsByTagName('title')[0].innerHTML;title = encodeURIComponent(title);var selection = '';if (window.getSelection) {selection = window.getSelection().toString();} else if (document.selection &amp;&amp; document.selection.type != 'Control') {selection = document.selection.createRange().text;}selection = encodeURIComponent(selection);new_window=window.open('https://mxb.dev/share/?title='+title+'&amp;body='+selection+'&amp;url='+encodeURIComponent(document.location.href),'Sharer','resizable,scrollbars,status=0,toolbar=0,menubar=0,titlebar=0,width=680,height=700,location=0');})();">Share on MXB</a></p>
<p>…and can then be dragged to the bookmarks bar for quick access.</p>
<h2 id="h-the-sharing-form"><a class="heading-anchor" href="https://mxb.dev/blog/indieweb-link-sharing/#h-the-sharing-form" aria-hidden="true">#</a> The Sharing Form</h2>
<p>At <a href="https://mxb.dev/share/">mxb.dev/share</a>, I’ve created a small preact app. It will take the GET params passed in via the URL and generate a live preview of the resulting note, so I know what the end product will look like.</p>
<p>There’s also a form that will be pre-populated with the values, which lets me include additional information and edit everything before posting.</p>
<p>The form also has fields for the Github username and security token, necessary for authentification. My password manager will fill those in automatically.</p>
<img src="https://mxb.dev/blog/indieweb-link-sharing/sharer.png" style="box-shadow:0 0 24px rgba(0,0,0,0.2)" alt="The sharing form with a live preview of the note" loading="lazy" />
<h2 id="h-the-handler-script"><a class="heading-anchor" href="https://mxb.dev/blog/indieweb-link-sharing/#h-the-handler-script" aria-hidden="true">#</a> The Handler Script</h2>
<p>When I hit the submit button, the form will send the data along to another endpoint. I’ve built a serverless function to handle the processing, so I could theoretically send data from other sources there too and keep the posting logic in one place. <a href="https://www.netlify.com/docs/functions/">Netlify Functions</a> seemed to be a nice fit for this.</p>
<p>Here’s the <a href="https://github.com/maxboeck/mxb/blob/master/lambda/share.js">full script</a> if you’re interested. It reads the posted data and generates a new markdown file from it, called something like <code>2019-08-11-amphora-ethan-marcotte.md</code>:</p>
<pre class="language-markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><br /><span class="token front-matter yaml language-yaml">title: "Amphora - Ethan Marcotte"<br />date: "2019-08-11T16:57:13.104Z"<br />syndicate: false<br />tags: link</span><br /><span class="token punctuation">---</span></span><br /><br />...we've reached a point where AMP may "solve" the web's <br />performance issues by supercharging the web’s accessibility problem. <br />(via <span class="token url">[<span class="token content">@beep</span>](<span class="token url">https://twitter.com/beep</span>)</span>)<br /><br /><span class="token url">[<span class="token content">ethanmarcotte.com/wrote/amphora</span>](<span class="token url">https://ethanmarcotte.com/wrote/amphora/</span>)</span></code></pre>
<p>It will then use the <a href="https://developer.github.com/v3/">Github API</a> to post that file as a base64-encoded string to a predetermined location in the site’s repository (in my case the folder where I keep all my notes).</p>
<p>Here’s the core function responsible for that:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">postFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> data<br />    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token function">getFileName</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><br />    <span class="token keyword">const</span> fileContent <span class="token operator">=</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><br />    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token constant">API_FILE_TARGET</span> <span class="token operator">+</span> fileName<br /><br />    <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span><br />        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'new shared link'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">content</span><span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">committer</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max Böck'</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'hello@mxb.dev'</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><br />        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />            <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/vnd.github.v3+json'</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<p>That’s pretty much it! After the file is committed, Netlify will kick in and re-build the static site with the new content. If I have marked the “syndicate to Twitter” flag, another script will then cross-post the link there. (More on that in <a href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/">Static Indieweb pt1: Syndicating Content</a>).</p>
<h2 id="h-mobile-share-target"><a class="heading-anchor" href="https://mxb.dev/blog/indieweb-link-sharing/#h-mobile-share-target" aria-hidden="true">#</a> Mobile Share Target</h2>
<p>A caveat of this technique is the use on mobile. Javascript bookmarklets are not as easily available in mobile browsers, which complicates the process again.</p>
<p>Thankfully Aaron Gustafson recently pointed out that it’s possible to <a href="https://www.aaron-gustafson.com/notebook/my-own-personal-pwa/">define a “Share Target”</a> for Progressive Web Apps. That means if your site is a PWA (it probably should be), you can add an entry like this to its manifest file:</p>
<pre class="language-json"><code class="language-json"><span class="token comment">// site.webmanifest</span><br /><span class="token punctuation">{</span><br />    ...<span class="token punctuation">,</span><br />    <span class="token property">"share_target"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />        <span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"/share/"</span><span class="token punctuation">,</span><br />        <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span><br />        <span class="token property">"enctype"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span><br />        <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span><br />            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><br />            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"url"</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>That little bit of JSON registers your site as an application that can share things, just like Twitter, WhatsApp and the others. So after I “install” my PWA (read: create a shortcut link on my device home screen), it shows up as an option in the native Android “share” dialog:</p>
<figure>
    <img src="https://mxb.dev/blog/indieweb-link-sharing/sharesheet.jpg" alt="PWA Share Sheet on Android" width="350" loading="lazy" />
    <figcaption>The "Max Böck" share option is available after installing the PWA.</figcaption> 
</figure>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Selecting the &quot;MXB&quot; option will grab the current page title and URL and send them as GET args to my sharing form, just like the bookmarklet would on desktop. There's still a small bug in there where the URL will be sent as the <code>text</code> parameter, but that can be corrected with a bit of Javascript in the form app.</p></div></div>
<p>I’m quite happy with how this turned out, as it feels really simple and straightforward. One step closer to IndieWeb bliss!</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in personal websites and the IndieWeb. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/indieweb-link-sharing/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Bob" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="bob@gmail.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
            ]]></content>
        </entry>
        <entry>
            <title>Good Enough</title>
            <link href="https://mxb.dev/blog/good-enough/"/>
            <updated>2019-06-11T00:00:00Z</updated>
            <id>https://mxb.dev/blog/good-enough/</id>
            <content type="html"><![CDATA[
                <p class="lead">There is a thing that happens to me while writing. I start with a fresh idea, excited to shape it into words. But as time passes, I lose confidence.</p>
<p>The original concept starts to look shallow or irrelevant, and the phrases sound awkward and repetitive. It just doesn’t feel good anymore.</p>
<p>I don’t think that’s unique to me - In fact I guess one of the reasons why many people would rather write a series of tweets than a longform blog post is that the expectations we set for ourselves are much higher with the latter. Posts need to be “done right” - there’s a greater risk of falling into the trap of perfectionism.</p>
<p>I know the anxiety of sharing something with the world. I know there is a pressure to match the quality we see elsewhere on the web. But maybe we should stop trying to live up to somebody else’s standards and focus on just <a href="https://www.sarasoueidan.com/desk/just-write/">getting stuff out there</a> instead. Maybe our “imperfect” things are already helpful to someone. Maybe this shouldn’t be so hard.</p>
<h2 id="h-perfect-is-the-enemy-of-done"><a class="heading-anchor" href="https://mxb.dev/blog/good-enough/#h-perfect-is-the-enemy-of-done" aria-hidden="true">#</a> Perfect is the Enemy of Done</h2>
<p>Don’t get me wrong, I don’t mean we should all half-ass our writing. There are a lot of details to get right, and going the extra mile certainly pays off as it makes for better articles.</p>
<p>However at least for me, there is a point where a post is about <strong>80% done</strong>, and I start to get in my own head:</p>
<blockquote>
<p>“Maybe this isn’t as good as I thought it would be.”</p>
</blockquote>
<blockquote>
<p>“Seems like everyone already knows that.”</p>
</blockquote>
<blockquote>
<p>“This is missing something new and exciting.”</p>
</blockquote>
<blockquote>
<p>“I’m sure somebody already covered this way better.”</p>
</blockquote>
<p>This is where posts die.<br />
They get swallowed by these voices of doubt and end up collecting dust in a <code>drafts</code> folder as “maybe I’ll come back and finish this later” pieces. I’ve got about six of these currently, and it seems like I’m <a href="https://twitter.com/mmatuzo/status/1098127036630159360">not the only one</a>.</p>
<h2 id="h-just-publish-it"><a class="heading-anchor" href="https://mxb.dev/blog/good-enough/#h-just-publish-it" aria-hidden="true">#</a> Just Publish It</h2>
<p>So now I’m trying a new approach to avoid this:</p>
<p>I’ll publish something as soon as I feel confident that all the <strong>important</strong> points I want to get across are there. I try to ignore the voice screaming “it’s not ready” just for long enough to push it online. Then I share the link on Twitter.</p>
<p>Right away, the act of making a post public forces me to read it again. And of course the minute it’s out there I’ll immediately notice a bunch of errors I didn’t spot before. It’s a law of nature or something. That’s ok though, I can just push a couple of fixes.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Doing a thing now were I publish stuff early to avoid &quot;It&#39;s-not-ready-anxiety&quot; and get it out there. Fixing shit later, sorry 🙃 <a href="https://t.co/MYCY382Pn9">pic.twitter.com/MYCY382Pn9</a></p>&mdash; Max Böck (@mxbck) <a href="https://twitter.com/mxbck/status/1136535575606046721?ref_src=twsrc%5Etfw">June 6, 2019</a></blockquote>
<p>Then there’s the feedback aspect. Publishing might either go largely ignored, or the post might get shared or commented on.</p>
<p>If it’s ignored, well - no harm done. It’s out there, that’s all that matters. But if it gains traction, that’s not only a sign that the post is interesting to people, it’s also a motivation boost to get me over that last 20%.</p>
<p>Most importantly though, publishing early is an exercise for my brain. It’s ignoring the feelings of self-doubt. It’s forcing myself to actively decide that something is <strong>good enough</strong>.</p>
<h2 id="h-fix-it-in-post"><a class="heading-anchor" href="https://mxb.dev/blog/good-enough/#h-fix-it-in-post" aria-hidden="true">#</a> Fix it in Post</h2>
<p>One of the benefits of <a href="https://matthiasott.com/articles/into-the-personal-website-verse">writing on your own site</a> is that you can always go back and edit stuff later.</p>
<p>Maybe you have a good idea for an additional paragraph that makes a certain point clearer. Maybe you find a better way to write a piece of code. Maybe somebody points out a thing you haven’t considered yet, and you want to include it. Well, why wouldn’t you? Nobody says blog posts should be set in stone. Improve it for the next reader who comes along.</p>
<p>You can even retroactively change the way your post is displayed on social media. For example, if you add an open graph image to your post after publishing it, you can use Twitter’s <a href="https://cards-dev.twitter.com/validator">Card Validator</a> to scrape the URL again, and all the links people may have already shared will update.</p>
<p>I know of some people doing this in web development, for example in <a href="https://www.aaron-gustafson.com/notebook/a-grand-experiment/">open redesigns</a> of their personal sites. I don’t know if anyone tried it with writing yet though. Maybe it’s a bad idea.</p>
<p>But for now, I like it.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in front-end development and design. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/good-enough/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Alice" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="alice@awesome.io" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/good-enough/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li><a href="https://www.sarasoueidan.com/desk/just-write/">Just write</a> by Sara Soueidan</li>
<li><a href="https://matthiasott.com/notes/out-there">Out there</a> by Matthias Ott</li>
<li><a href="https://zen-of-programming.com/blog-post-workflow/">My Blog Post Workflow</a> by Ali Spittel</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>The CSS Mindset</title>
            <link href="https://mxb.dev/blog/the-css-mindset/"/>
            <updated>2019-06-05T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-css-mindset/</id>
            <content type="html"><![CDATA[
                <p class="lead">Ah yes, CSS. Hardly a week passes without it being the topic of a heated online discussion. It's too hard. It's too simple. It's unpredictable. It's not a real programming language. Peter Griffin struggles with blinds dot gif.</p>
<p>I don’t know why CSS sparks so many different emotions in developers, but I have a hunch as to why it can sometimes seem illogical or frustrating: You need a certain <strong>mindset</strong> to write good CSS.</p>
<p>Now, you probably need a mindset for coding in general, but the declarative nature of CSS makes it particularly difficult to grasp, especially if you think about it in terms of a “traditional” programming language.</p>
<p>Robin Rendle makes a very good point in this <a href="https://css-tricks.com/newsletter/151/">CSS-Tricks Newsletter</a> where he finds that CSS lives somewhere between rigid, logical systems like Math and flexible, adaptive systems like natural languages:</p>
<figure>
    <img src="https://mxb.dev/blog/the-css-mindset/css-math-language.jpg" alt="a diagram with three boxes on an axis. the first box lists properties of mathematics: rigid; emperical; logical. The last says natural language is flexible; adaptive; illogical. CSS sits in between." />
    <figcaption>Comparison of Math, CSS and Language by <a href="https://www.robinrendle.com/">Robin Rendle</a>, 2019</figcaption>
</figure>
<p>Other programming languages often work in controlled environments, like servers. They expect certain conditions to be true at all times, and can therefore be understood as concrete instructions as to how a program should execute.</p>
<p>CSS on the other hand works in a place that can never be fully controlled, so it has to be flexible by default. It’s less about “programming the appearance” and more about translating a design into a set of rules that communicate the intent behind it. Leave enough room, and the browser will do the heavy lifting for you.</p>
<p>For most people who write CSS professionally, the mindset just comes naturally after a while. Many developers have that “aha!” moment when things finally start to click. It’s not just about knowing all the technical details, it’s more about a general sense of the ideas behind the language.</p>
<p>This is true whether you write CSS-in-JS, Sass or plain vanilla stylesheets. The output will always be CSS - so knowing these concepts will be helpful regardless of your tooling choice.</p>
<p>I tried to list some of them here.</p>
<h2 id="h-everything-is-a-rectangle"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-everything-is-a-rectangle" aria-hidden="true">#</a> Everything is a Rectangle</h2>
<p>This seems obvious, given that the box model is probably one of the first things people learn about CSS. But picturing each DOM element as a box is crucial to understanding why things layout the way they do. Is it inline or block level? Is it a flex item? How will it grow/shrink/wrap in different contexts?</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Open your devtools and hover over elements to see the boxes they're drawing, or use a utility style like <code>outline: 2px dotted hotpink</code> to visualize its hidden boundaries.</p></div></div>
<h2 id="h-the-cascade-is-your-friend"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-the-cascade-is-your-friend" aria-hidden="true">#</a> The Cascade is your Friend</h2>
<p>The Cascade - a scary concept, I know. Say “Cascade” three times in front of a mirror and somewhere, some unrelated styling will break.</p>
<p>While there are legitimate reasons to avoid the cascade, it doesn’t mean that it’s all bad. In fact, when used correctly, it can make your life a lot easier.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>The important part is to know which styles belong on the global scope and which are better restricted to a component. It also helps to know the defaults that are passed down, to avoid declaring unnecessary rules.</p></div></div>
<h2 id="h-as-much-as-necessary-as-little-as-possible"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-as-much-as-necessary-as-little-as-possible" aria-hidden="true">#</a> As much as necessary, as little as possible</h2>
<p>Aim to write the minimal amount of rules necessary to achieve a design. Fewer properties mean less inheritance, less restriction and less trouble with overrides down the line. Think about what your selector should essentially do, then try to express just that. There’s no point in declaring <code>width: 100%</code> on an element that’s already block-level. There’s no need to set <code>position: relative</code> if you don’t need a new stacking context.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Avoid unnecessary styles, and you avoid unintended consequences.</p></div></div>
<h2 id="h-shorthands-have-long-effects"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-shorthands-have-long-effects" aria-hidden="true">#</a> Shorthands have long effects</h2>
<p>Some CSS features can be written in “shorthand” notation. This makes it possible to declare a bunch of related properties together. While this is handy, be aware that using the shorthand will also declare the default value for each property you don’t explicitly set. Writing <code>background: white;</code> will effectively result in all these properties being set:</p>
<pre class="language-css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><br /><span class="token property">background-image</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><br /><span class="token property">background-position</span><span class="token punctuation">:</span> 0% 0%<span class="token punctuation">;</span><br /><span class="token property">background-size</span><span class="token punctuation">:</span> auto auto<span class="token punctuation">;</span><br /><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat<span class="token punctuation">;</span><br /><span class="token property">background-origin</span><span class="token punctuation">:</span> padding-box<span class="token punctuation">;</span><br /><span class="token property">background-clip</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><br /><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span></code></pre>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>It's better to be explicit. If you want to change the background color, use <code>background-color</code>.</p></div></div>
<h2 id="h-always-be-flexible"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-always-be-flexible" aria-hidden="true">#</a> Always Be Flexible</h2>
<p>CSS deals with a large amount of unknown variables: screen size, dynamic content, device capabilities - the list goes on. If your styles are too narrow or restrictive, chances are one of these variables will trip you up. That’s why a key aspect in writing good CSS is to embrace its flexibility.</p>
<p>Your goal is to write a set of instructions that is comprehensive enough to describe what you want to achieve, yet flexible enough to let the browser figure out the <strong>how</strong> by itself. That’s why its usually best to avoid <em>“magic numbers”</em>.</p>
<p>Magic numbers are random hard values. Something like:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.thing</span> <span class="token punctuation">{</span><br />    <span class="token property">width</span><span class="token punctuation">:</span> 218px<span class="token punctuation">;</span> <span class="token comment">/* why? */</span><br /><span class="token punctuation">}</span></code></pre>
<p>Whenever you find yourself tapping the arrow key in your devtools, adjusting a pixel value to make something fit - that’s probably a magic number. These are rarely the solution to a CSS problem, because they restrict styles to a very specific usecase. If the constraints change, that number will be off.</p>
<p>Instead, think about what you actually want to achieve in that situation. Alignment? An aspect ratio? Distributing equal amounts of space? All of these have flexible solutions.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>In most cases, it's better to define a rule for the intent, rather than hard-code the computed solution to it.</p></div></div>
<h2 id="h-context-is-key"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-context-is-key" aria-hidden="true">#</a> Context is Key</h2>
<p>For many layout concepts it’s imperative to understand the relationship between elements and their container. Most components are sets of parent and child nodes. Styles applied to the parent can affect the descendants, which might make them ignore other rules. Flexbox, Grid and <code>position:absolute</code> are common sources of such errors.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>When in doubt about a particular element behaving different than you'd want it to, look at the context it's in. Chances are something in its ancestry is affecting it.</p></div></div>
<h2 id="h-content-will-change"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-content-will-change" aria-hidden="true">#</a> Content will change</h2>
<p>The number one mistake made by designers and developers alike is assuming that things will always look like they do in the static mockup. I can assure you, they will not.</p>
<p>Strings may be longer than intended or contain special characters, images might be missing or have weird dimensions. Displays may be very narrow or extremely wide. Those are all states you need to anticipate.</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Always be aware that what you see is just one UI state in a bigger spectrum. Instead of styling the thing on your screen, try to build a &quot;blueprint&quot; of the component. Then make sure that whatever you throw at it won't break your styling.</p></div></div>
<h2 id="h-find-patterns-and-re-use-them"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-find-patterns-and-re-use-them" aria-hidden="true">#</a> Find Patterns and re-use them</h2>
<p>When you set out to turn a design mockup into code, it’s often helpful to take inventory of the different patterns included first. Analyse each screen and take note of any concept that occurs more than one. It might be something small like a typographic style, or large like a certain layout pattern. What can be abstracted? What’s unique?</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Thinking of pieces in a design as standalone things makes them easier to reason about, and helps to draw the boundaries between components.</p></div></div>
<h2 id="h-use-consistent-names"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-use-consistent-names" aria-hidden="true">#</a> Use consistent Names</h2>
<p>A surprisingly large part of programming in general is coming up with good names for stuff. In CSS, it helps to stick to a convention. Naming schemes like <a href="http://getbem.com/">BEM</a> or <a href="http://smacss.com/">SMACSS</a> can be very helpful; but even if you don’t use them, stick to a certain vocabulary. You’ll find that certain component patterns come up over and over - but is it called a “hero” or a “stage”? Is it “slider” or “carousel”?</p>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Establish a routine in how you name parts of your UI, then stick to that convention in all your projects. When working in a team, it can be helpful to agree on component names early on and document them somewhere for new team members.</p></div></div>
<hr />
<p>All these things were important for me to understand, but your personal experience as to what matters most might be different. Did you have another “aha” moment that made you understand CSS better? Let me know!</p>
<p><strong>Update:</strong> I did <a href="https://noti.st/mxb/MxkoVi/the-css-mindset">a talk about the CSS Mindset</a> at CSS-Minsk-JS in September. There’s also a video recording available, if you prefer that.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in CSS and front-end development! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/the-css-mindset/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Bob" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="bob@gmail.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/the-css-mindset/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li><a href="https://www.smashingmagazine.com/2019/01/how-to-learn-css/">How to learn CSS</a> by Rachel Andrews</li>
<li><a href="https://css-tricks.com/the-secret-weapon-to-learning-css/">The Secret Weapon to learning CSS</a> by Robin Rendle</li>
<li><a href="https://andy-bell.design/wrote/css-doesnt-suck/">CSS doesn’t suck</a> by Andy Bell</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>A Webring Kit</title>
            <link href="https://mxb.dev/blog/webring-kit/"/>
            <updated>2019-04-14T00:00:00Z</updated>
            <id>https://mxb.dev/blog/webring-kit/</id>
            <content type="html"><![CDATA[
                <p class="lead">After Tatiana Mac proposed to <a href="https://twitter.com/TatianaTMac/status/1114388079630929926">bring webrings back</a>, I hacked something new together over the weekend: A starter kit for hosting your own webring!</p>
<h2 id="h-what%E2%80%99s-a-webring%3F"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-what%E2%80%99s-a-webring%3F" aria-hidden="true">#</a> What’s a Webring?</h2>
<p>It’s a blast from the past: In the 90s, sites about a common topic could join together in a central index. To be a member, you had to embed a little widget on your page that contained a “forward”, a “backward”, and a “random” button. These buttons would then link to the next or previous site in the ring.</p>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>Since the term &quot;webring&quot; is trademarked in the US, this needs another cool name. Know any? Please <a href="https://github.com/maxboeck/webring/issues/1">add it to this thread</a>!</p></div></div>
<h2 id="h-a-curated-community"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-a-curated-community" aria-hidden="true">#</a> A curated community</h2>
<p>To keep the ring from getting spammed or flooded with trolls, it has to be curated. The project does that by hosting the member index on Github, in a simple <a href="https://github.com/maxboeck/webring/blob/master/src/data/members.json">JSON file</a>. Admins can accept or decline pull requests from people who want to join the ring, after reviewing their sites. There’s also a Code of Conduct that every member has to follow in order to be part of the ring.</p>
<p>For people who are not technical enough to submit a pull request, there’s also a simple signup form (using Netlify forms) to send the admin your site’s info via email and let them add you.</p>
<figure>
  <img src="https://mxb.dev/blog/webring-kit/webring-card.png" alt="a card showing the webring description and memberlist" />
  <figcaption>You can build webrings for anything</figcaption>
</figure>
<h2 id="h-free-and-open"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-free-and-open" aria-hidden="true">#</a> Free and Open</h2>
<p>I wanted to make this as easy as possible, so people can start linking their personal sites together straight away. So I made the boilerplate using <a href="https://www.11ty.io/">Eleventy</a>. After forking <a href="https://github.com/maxboeck/webring">the codebase</a>, the proud webring admin only needs to set a title and a bit of meta data.</p>
<p>Eleventy then generates a <a href="https://webringdemo.netlify.com/">site like this</a> that lists all the members, shows the Code of Conduct and the instructions on how to join.</p>
<p>You can deploy it to <a href="https://www.netlify.com/">Netlify</a>, a free static site host, with just a few clicks. Netlify also lets you either use one of their subdomains, or a custom one you own.</p>
<h2 id="h-a-central-widget"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-a-central-widget" aria-hidden="true">#</a> A central widget</h2>
<p>Members of the ring can copy a code snippet to embed a banner on their site. I borrowed a bit from Twitters embed widget here: The basic markup is just a link to the index, and the prev/random/next links. But if you also include the script tag, it will replace that with a custom web component, designed by the ring admin.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webring-banner</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Member of the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webringdemo.netlify.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>An Example Webring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> webring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webringdemo.netlify.com/prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Previous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webringdemo.netlify.com/random<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webringdemo.netlify.com/next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webring-banner</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webringdemo.netlify.com/embed.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>This will automatically show the title, member count, maybe a logo. And it can be edited from a central location. It might look something like this:</p>
<webring-banner>
    <p>Member of the <a href="https://webringdemo.netlify.com/">An Example Webring</a> webring</p>
    <a href="https://webringdemo.netlify.com/prev">Previous</a>
    <a href="https://webringdemo.netlify.com/random">Random</a>
    <a href="https://webringdemo.netlify.com/next">Next</a>
</webring-banner>
<script async="" src="https://webringdemo.netlify.com/embed.js" charset="utf-8"></script>
<h2 id="h-rss-feeds"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-rss-feeds" aria-hidden="true">#</a> RSS Feeds</h2>
<p>If a member publishes an RSS feed on their site, they can add that to the ring as well: the index page will generate an <a href="https://de.wikipedia.org/wiki/Outline_Processor_Markup_Language">OPML file</a>, so people can subscribe to all members at once.</p>
<h2 id="h-host-your-own-ring"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-host-your-own-ring" aria-hidden="true">#</a> Host your own Ring!</h2>
<p>If you want to start your own webring, go ahead! Fork the <a href="https://github.com/maxboeck/webring">repository on Github</a> and follow the instructions there - It’s free and doesn’t take long!</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in personal websites and the IndieWeb! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/webring-kit/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Lisa" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="lisa@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-read-more"><a class="heading-anchor" href="https://mxb.dev/blog/webring-kit/#h-read-more" aria-hidden="true">#</a> Read More</h2>
<ul>
<li><a href="https://www.sonniesedge.net/posts/webrings">Webrings</a> by Charlie Owen, further elaborating on Tatiana’s tweet.</li>
<li><a href="https://bryanlrobinson.com/blog/2019/02/07/bring-fansites-back-to-the-web/">Let’s bring Fan Sites and webrings back!</a> by Bryan Robinson, who wrote a first implementation of webring lambda functions.</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>On Simplicity</title>
            <link href="https://mxb.dev/blog/on-simplicity/"/>
            <updated>2019-01-31T00:00:00Z</updated>
            <id>https://mxb.dev/blog/on-simplicity/</id>
            <content type="html"><![CDATA[
                <p class="lead">In the 1997 movie "Contact", Jodie Foster discovers an alien signal that contains the construction plans for a spaceship. Trying to assemble it, the engineers are surprised to find that the crew capsule is just an empty metal pod.</p>
<p>“That shit’s unsafe”, they say (I’m paraphrasing), so they attach a complicated wall-mounted seat to the inside. When the ship launches, that seat starts to pick up heavy vibrations and violently breaks apart. Foster releases her seatbelt seconds before it kills her and ultimately finds that the design was perfect all along, enjoying the rest of the ride in smooth anti-gravity.</p>
<p>We assume that complex problems always require complex solutions. We try to solve complexity by inventing tools and technologies to address a problem; but in the process we create another layer of complexity that, in turn, causes its own set of issues.</p>
<h2 id="h-simplicity-as-a-feature"><a class="heading-anchor" href="https://mxb.dev/blog/on-simplicity/#h-simplicity-as-a-feature" aria-hidden="true">#</a> Simplicity as a Feature</h2>
<p>Obviously not every problem has a simple solution, and most complex tools exist because of real usecases. But I think there’s a lot of value in actively questioning <strong>the need</strong> for complexity. Sometimes the smarter way to build things is to try and take some pieces away, rather than add more to it.</p>
<p>Static sites are on the rise again now, precisely because they are simple. They don’t try to manage serverside code with clever abstractions - they don’t have any. They don’t try to prevent security breaches with advanced firewalls - they get rid of the database entirely.</p>
<p>Some of the most important things in the world are intentionally designed “simple”. In any system, the potential for error directly increases with its complexity - that’s why most elections still work by putting pieces of paper in a box.</p>
<h2 id="h-think-for-yourself-question-complexity"><a class="heading-anchor" href="https://mxb.dev/blog/on-simplicity/#h-think-for-yourself-question-complexity" aria-hidden="true">#</a> Think for Yourself, Question Complexity</h2>
<p>Developers are obsessed with the notion of “best practice”.<br />
It implies that there is one correct way of doing things, and all other solutions are either imperfect or, at worst, “anti-patterns”. But the definition of best practice changes everytime a new technology arises, rendering the previous solution worthless garbage (even though it still gets the job done).</p>
<p>There is an undeniable ego factor to the way we use technology in our projects. To show everyone else how clever we are, we come up with harder and harder ways to achieve our tasks. And of course they all solve specific problems - but that does not mean they are always the best solution, regardless of context.</p>
<p>It’s cool to use the latest and greatest tech; but we should always ask if our choices really benefit the user, or if we do it mostly for ourselves. After all, the “Developer Experience” is only a means to an end.</p>
<p>And if we’re talking DX - I’ll take simplicity over features any day.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Using Webmentions in Eleventy</title>
            <link href="https://mxb.dev/blog/using-webmentions-on-static-sites/"/>
            <updated>2019-01-10T00:00:00Z</updated>
            <id>https://mxb.dev/blog/using-webmentions-on-static-sites/</id>
            <content type="html"><![CDATA[
                <p class="lead">In last week's post, I talked about syndicating content from a static site to Twitter. But getting content out is only half the challenge.</p>
<p>The real value of social media (apart from the massive ad revenue and dystopian data mining) is in the reactions we get from other people. The likes, reposts and replies - they’re what makes it “social”. To gain control over our own content, we need to capture these interactions as well and pull them back to our sites. In indieweb terms, that’s known as <a href="https://indieweb.org/backfeed">“backfeed”</a>.</p>
<h2 id="h-hello-webmentions"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-hello-webmentions" aria-hidden="true">#</a> Hello Webmentions</h2>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>A <a href="https://indieweb.org/Webmention">Webmention</a> is an open standard for a reaction to something on the web. It's currently in W3C recommendation status. When you link to a website, you can send it a Webmention to notify it.</p><p>It's comparable to pingbacks, except that webmentions contain a lot more information than a simple &quot;ping&quot;. They can be used to express likes, reposts, comments or other things.</p></div></div>
<p>To make a site support webmentions, it needs to declare an endpoint to accept them. That endpoint can be a script hosted on your own server, or in the case of static sites, a third-party service like <a href="https://webmention.io/">webmention.io</a>.</p>
<p>Webmention.io is a free service made by indieweb pioneer Aaron Parecki that does most of the groundwork of receiving, storing and organizing incoming webmentions for you. It’s awesome!</p>
<p>To use it, sign up for a free account there using the <a href="https://indieauth.com/">IndieAuth</a> process, then include a link tag in the <code>head</code> of your site:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pingback<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webmention.io/mxb.dev/xmlrpc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webmention<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webmention.io/mxb.dev/webmention<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h3 id="h-turning-social-media-interactions-into-webmentions"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-turning-social-media-interactions-into-webmentions" aria-hidden="true">#</a> Turning social media interactions into webmentions</h3>
<p>Cool. So that’s all very nice, but the real party is still over at <em>[currently hip social network]</em>, you say. Nobody ever sends me any webmentions.</p>
<p>Well, while your platform of choice is still around, you can use a tool to automatically turn social media interactions into beautiful open webmentions. <a href="https://brid.gy/">Bridgy</a> is another free service that can monitor your Twitter, Facebook or Instagram activity and send a webmention for every like, reply or repost you receive.</p>
<p>So if you were to publish a tweet that contains a link back to your site, and somebody writes a comment on it, Bridgy will pick that up and send it as a webmention to your endpoint!</p>
<p>The resulting entry on webmention.io then looks something like this:</p>
<pre class="language-json"><code class="language-json">    <span class="token punctuation">{</span><br />      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"entry"</span><span class="token punctuation">,</span><br />      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"card"</span><span class="token punctuation">,</span><br />        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Sara Soueidan"</span><span class="token punctuation">,</span><br />        <span class="token property">"photo"</span><span class="token operator">:</span> <span class="token string">"https://webmention.io/avatar/pbs.twimg.com/579a474c9b858845a9e64693067e12858642fa71059d542dce6285aed5e10767.jpg"</span><span class="token punctuation">,</span><br />        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://sarasoueidan.com"</span><br />      <span class="token punctuation">}</span><span class="token punctuation">,</span><br />      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://twitter.com/SaraSoueidan/status/1022009419926839296"</span><span class="token punctuation">,</span><br />      <span class="token property">"published"</span><span class="token operator">:</span> <span class="token string">"2018-07-25T06:43:28+00:00"</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-received"</span><span class="token operator">:</span> <span class="token string">"2018-07-25T07:01:17Z"</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-id"</span><span class="token operator">:</span> <span class="token number">537028</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-source"</span><span class="token operator">:</span> <span class="token string">"https://brid-gy.appspot.com/comment/twitter/mxbck/1022001729389383680/1022009419926839296"</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-target"</span><span class="token operator">:</span> <span class="token string">"https://mxb.dev/blog/layouts-of-tomorrow/"</span><span class="token punctuation">,</span><br />      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br />        <span class="token property">"content-type"</span><span class="token operator">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span><br />        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"This looks great!"</span><span class="token punctuation">,</span><br />        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"This looks great!"</span><br />      <span class="token punctuation">}</span><span class="token punctuation">,</span><br />      <span class="token property">"in-reply-to"</span><span class="token operator">:</span> <span class="token string">"https://mxb.dev/blog/layouts-of-tomorrow/"</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-property"</span><span class="token operator">:</span> <span class="token string">"in-reply-to"</span><span class="token punctuation">,</span><br />      <span class="token property">"wm-private"</span><span class="token operator">:</span> <span class="token boolean">false</span><br />    <span class="token punctuation">}</span></code></pre>
<h3 id="h-but-wait-there%E2%80%99s-more"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-but-wait-there%E2%80%99s-more" aria-hidden="true">#</a> But wait, there’s more!</h3>
<p>The beauty of webmentions is that unlike with regular social media, reactions to your content are not limited to users of one site. You can combine comments from Facebook and Twitter with replies people posted on their own blogs. You can mix retweets and shares with mentions of your content in newsletters or forum threads.</p>
<p>You also have complete control over who and what is allowed in your mentions. Content silos often only allow muting or blocking on your own timeline, everyone else can still see unwanted or abusive @-replies. With webmentions, you’re free to moderate reactions however you see fit. Fuck off, Nazis!</p>
<h2 id="h-including-webmentions-in-static-sites"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-including-webmentions-in-static-sites" aria-hidden="true">#</a> Including webmentions in static sites</h2>
<p>Once the webmention endpoint is in place, we still need to pull the aggregated data down to our site and display it in a meaningful way.</p>
<p>The way to do this depends on your setup. Webmention.io offers an <a href="https://github.com/aaronpk/webmention.io#api">API</a> that provides data as a JSON feed, for example. You can query mentions for a specific URL, or get everything associated with a particular domain (allthough the latter is only available to site owners.)</p>
<p>My site uses <a href="https://11ty.io/">Eleventy</a>, which has a conventient way to pull in external data at build time. By providing a <a href="https://www.11ty.io/docs/data-js/#using-js-data-files">custom function</a> that queries the API, Eleventy will fetch my webmentions and expose them to the templates when generating the site.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// data/webmentions.js</span><br /><span class="token keyword">const</span> <span class="token constant">API_ORIGIN</span> <span class="token operator">=</span> <span class="token string">'https://webmention.io/api/mentions.jf2'</span><br /><br />module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> domain <span class="token operator">=</span> <span class="token string">'mxb.dev'</span><br />    <span class="token keyword">const</span> token <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEBMENTION_IO_TOKEN</span><br />    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">API_ORIGIN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><br /><br />    <span class="token keyword">try</span> <span class="token punctuation">{</span><br />        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">const</span> feed <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />            <span class="token keyword">return</span> feed<br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><br />        <span class="token keyword">return</span> <span class="token keyword">null</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p><em>The feed can now be accessed in the {{ webmentions }} variable.</em></p>
<p>Here’s <a href="https://github.com/maxboeck/mxb/blob/master/src/data/webmentions.js">the complete function</a> if you’re interested. Other static site generators offer similiar methods to fetch external data.</p>
<h2 id="h-parsing-and-filtering"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-parsing-and-filtering" aria-hidden="true">#</a> Parsing and Filtering</h2>
<p>Now that the raw data is available, we can mold it into any shape we’d like. For my site, the processing steps look like this:</p>
<ul>
<li>Filter the raw data for each post, only include mentions targeting that URL.</li>
<li>Only allow “mentions” and “replies” in the comment section. Likes and Reposts go somewhere else.</li>
<li>Remove entries that dont have any content to display.</li>
<li>Sanitize the output - strip HTML tags, truncate long content, etc.</li>
</ul>
<pre class="language-js"><code class="language-js"><span class="token comment">// filters.js</span><br /><span class="token keyword">const</span> sanitizeHTML <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sanitize-html'</span><span class="token punctuation">)</span><br /><br /><span class="token keyword">function</span> <span class="token function">getWebmentionsForUrl</span><span class="token punctuation">(</span><span class="token parameter">webmentions<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> allowedTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'mention-of'</span><span class="token punctuation">,</span> <span class="token string">'in-reply-to'</span><span class="token punctuation">]</span><br /><br />    <span class="token keyword">const</span> <span class="token function-variable function">hasRequiredFields</span> <span class="token operator">=</span> <span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />        <span class="token keyword">const</span> <span class="token punctuation">{</span> author<span class="token punctuation">,</span> published<span class="token punctuation">,</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> entry<br />        <span class="token keyword">return</span> author<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> published <span class="token operator">&amp;&amp;</span> content<br />    <span class="token punctuation">}</span><br />    <span class="token keyword">const</span> <span class="token function-variable function">sanitize</span> <span class="token operator">=</span> <span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />        <span class="token keyword">const</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> entry<br />        <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            content<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">sanitizeHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>value<span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br />        <span class="token keyword">return</span> entry<br />    <span class="token punctuation">}</span><br /><br />    <span class="token keyword">return</span> webmentions<br />        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> entry<span class="token punctuation">[</span><span class="token string">'wm-target'</span><span class="token punctuation">]</span> <span class="token operator">===</span> url<span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> allowedTypes<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>entry<span class="token punctuation">[</span><span class="token string">'wm-property'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>hasRequiredFields<span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>sanitize<span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<p>In Eleventy’s case, I can set that function as a custom filter to use in my post templates.<br />
Each post will then loop over its webmentions and output them underneath.</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- webmentions.njk --></span><br />{% set mentions = webmentions | getWebmentionsForUrl(absoluteUrl) %}<br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webmentions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />{% for webmention in mentions %}<br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webmentions__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        {% include 'webmention.njk' %}<br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br />{% endfor %}<br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre>
<p>You can see the result by scrolling down to the <a href="https://mxb.dev/blog/using-webmentions-on-static-sites/#webmentions">end of this post</a> (if there are any replies 😉).</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in personal websites and the IndieWeb. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/using-webmentions-on-static-sites/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Lisa" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="lisa@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-client-side-rendering"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-client-side-rendering" aria-hidden="true">#</a> Client-Side Rendering</h2>
<p>Because static sites are, well, static - it’s possible that new mentions have happened since the last build. To keep the webmention section up-to-date, there’s an extra step we can take: client side rendering.</p>
<p>Remember I said the webmention.io API can be used to only fetch mentions for a specific URL? That comes in handy now. After the page has loaded, we can fetch the latest mentions for the current URL and re-render the static webmention section with them.</p>
<p>On my site, I used <a href="https://preactjs.com/">Preact</a> to do just that. It has a very small (~3kB) footprint and lets me use React’s mental model and JSX syntax. It would probably also have been possible to re-use the existing <code>nunjucks</code> templates, but this solution was the easiest and most lightweight for me.</p>
<p>I essentially used the same logic here as I did in the static build, to ensure matching results. The rendering only starts after the API call returned valid data though - if anything goes wrong or the API is unavailable, there will still be the static content as a fallback.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// webmentions/index.js</span><br /><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'preact'</span><br /><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><br /><br /><span class="token operator">...</span><br /><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'webmentions'</span><span class="token punctuation">)</span><br /><span class="token keyword">if</span> <span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token function">fetchMentions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App webmentions<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><br />            <span class="token punctuation">}</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<div class="callout callout--info"><span class="callout__icon"><svg class="icon icon--info" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-info"></use></svg></span><div class="callout__content"><p>I also made an <a href="https://github.com/maxboeck/eleventy-webmentions">Eleventy Starter Template</a> with basic webmention support, using some of the techniques in this post. Check it out!</p></div></div>
<p>There are of course still some missing pieces, most notably the ability to send outgoing webmentions to URLs linked to in your own blog posts. <s>I might have to look into that.</s></p>
<h2 id="h-update-outgoing-webmentions"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-update-outgoing-webmentions" aria-hidden="true">#</a> Update: Outgoing Webmentions!</h2>
<p><a href="https://remysharp.com/">Remy Sharp</a> has recently published a very useful new tool that takes care of handling <strong>outgoing</strong> webmentions for you. <a href="https://webmention.app/">Webmention.app</a> is a platform agnostic service that will check a given URL for links to other sites, discover if they support webmentions, then send a webmention to the target.</p>
<p>You can use that service in a number of ways, including your own command line. If you host your site on Netlify though, it’s also very straightforward to integrate it <a href="https://webmention.app/docs#how-to-integrate-with-netlify">using deployment webhooks</a>!</p>
<h2 id="h-jekyll-plugin"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-jekyll-plugin" aria-hidden="true">#</a> Jekyll Plugin</h2>
<p>My implementation was heavily inspired by Aaron Gustafson’s excellent Jekyll Plugin (link below), which goes even further with customization and caching options. If you’re running a Jekyll site, use that for almost instant webmention support 👍.</p>
<h2 id="h-further-resources"><a class="heading-anchor" href="https://mxb.dev/blog/using-webmentions-on-static-sites/#h-further-resources" aria-hidden="true">#</a> Further Resources</h2>
<ul>
<li><a href="https://www.w3.org/TR/webmention/">W3C Recommendation</a> for the Webmention Standard</li>
<li><a href="https://github.com/aarongustafson/jekyll-webmention_io">Webmention.io Jekyll Plugin</a> by Aaron Gustafson</li>
<li><a href="https://indieweb.org/Webmention-developer#IndieWeb_Examples">Indieweb Examples</a> of people using Webmentions on their sites</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Syndicating Content to Twitter</title>
            <link href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/"/>
            <updated>2019-01-06T00:00:00Z</updated>
            <id>https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/</id>
            <content type="html"><![CDATA[
                <p class="lead">One of the core principles of the <a href="https://indieweb.org/">IndieWeb</a> is that people should own their own content. Controlling how and where they publish makes users more independent from big content silos.</p>
<p>However, the main reason why people publish on Twitter / Medium or other platforms is that they can reach a much bigger audience there - everyone’s on them, so you have to be too. Publishing on a personal site can cut you off from those readers. That’s why it might be a good idea to automatically post copies of your content on these sites whenever you publish something new.</p>
<p>This practice is known as “<abbr title="Publish on Own Site, Syndicate Elsewhere">POSSE</abbr>” (Publish on your Own Site, Syndicate Elsewhere). It enables authors to reach people on other platforms while still keeping control of the original content source.</p>
<p>For the recent relaunch of my personal website, I wanted to embrace some of these ideas. I included a section called <a href="https://mxb.dev/notes">notes</a> featuring small, random pieces of content - much like tweets. These notes are perfect candidates for syndication to Twitter.</p>
<h2 id="h-syndication-on-static-sites"><a class="heading-anchor" href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/#h-syndication-on-static-sites" aria-hidden="true">#</a> Syndication on Static Sites</h2>
<p>My site is built with <a href="https://11ty.io/">Eleventy</a>, a static site generator based on node, and hosted on <a href="https://netlify.com/">Netlify</a>. Static sites are awesome for a variety of reasons, but interacting with other platforms typically requires some serverside code - which they don’t have.</p>
<p>Luckily though, Netlify provides a service called <a href="https://www.netlify.com/docs/functions/">“Functions”</a>, which lets you write custom AWS lambda functions without the hassle of dealing with AWS directly. Perfect! 🤘</p>
<h2 id="h-a-content-feed"><a class="heading-anchor" href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/#h-a-content-feed" aria-hidden="true">#</a> A content feed</h2>
<p>The first step is to publish a machine-readable feed of the content we want to syndicate. That’s exactly what RSS-Feeds are for - but they’re usually in XML format, which is not ideal in this case.</p>
<p>For my own site, I chose to provide notes as a simple JSON object. I already have an atom feed for content readers, and JSON makes the note processing easier later on.</p>
<p><a href="https://mxb.dev/notes.json">My feed</a> looks something like this:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// notes.json</span><br /><span class="token punctuation">[</span><br />    <span class="token punctuation">{</span><br />        <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><br />        <span class="token string-property property">"date"</span><span class="token operator">:</span> <span class="token string">"2018-12-02T14:20:17"</span><span class="token punctuation">,</span><br />        <span class="token string-property property">"url"</span><span class="token operator">:</span> <span class="token string">"https://mxb.dev/notes/2018-12-02/"</span><span class="token punctuation">,</span><br />        <span class="token string-property property">"content"</span><span class="token operator">:</span> <span class="token string">"Here's my first note!"</span><span class="token punctuation">,</span><br />        <span class="token string-property property">"syndicate"</span><span class="token operator">:</span> <span class="token boolean">true</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span><br />    <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><br /><span class="token punctuation">]</span></code></pre>
<p>All entries also include a custom <code>syndicate</code> flag that overrides the auto-publishing behaviour if necessary.</p>
<h2 id="h-event-triggered-functions"><a class="heading-anchor" href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/#h-event-triggered-functions" aria-hidden="true">#</a> Event-Triggered Functions</h2>
<p>Now for the tricky part: we need to write a lambda function to push new notes to Twitter. I won’t go into detail on how to build lambda functions on Netlify, there are already some great tutorials about this:</p>
<ul>
<li><a href="https://scotch.io/tutorials/build-and-deploy-a-serverless-function-to-netlify">Build and deploy a serverless function to Netlify</a> (scotch.io)</li>
<li><a href="https://functions-playground.netlify.com/">Lambda functions playground</a> (netlify.com)</li>
</ul>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p>Be sure to also check out the <a href="https://www.npmjs.com/package/netlify-lambda">netlify-lambda cli</a>, a very handy tool to test and build your functions in development.</p></div></div>
<p>To trigger our custom function everytime a new version of the site was successfully deployed, we just need to name it <code>deploy-succeeded.js</code>. Netlify will then automatically fire it after each new build, while also making sure it’s not executable from the outside.</p>
<p>Whenever that function is invoked, it should fetch the list of published notes from the JSON feed. It then needs to check if any new notes were published, and whether they should be syndicated to Twitter.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// deploy-succeeded.js</span><br />exports<span class="token punctuation">.</span><span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://mxb.dev/notes.json'</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>processNotes<span class="token punctuation">)</span><br />        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><br />            <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">422</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span></code></pre>
<p>Since we will have to interact with the Twitter API, it’s a good idea to use a dedicated helper class to take some of that complexity off our hands. The <code>twitter</code> <a href="https://www.npmjs.com/package/twitter">package on npm</a> does just that. We will have to register for a <a href="https://apps.twitter.com/">developer account</a> on Twitter first though, to get the necessary API keys and tokens. Store those in your project’s <code>.env</code> file.</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">TWITTER_CONSUMER_KEY</span><span class="token operator">=</span>YourTwitterConsumerKeyHere<br /><span class="token assign-left variable">TWITTER_CONSUMER_SECRET</span><span class="token operator">=</span>YourTwitterConsumerSecretStringHere<br /><span class="token assign-left variable">TWITTER_ACCESS_TOKEN_KEY</span><span class="token operator">=</span><span class="token number">12345678</span>-YourTwitterAccessTokenKeyHere<br /><span class="token assign-left variable">TWITTER_ACCESS_TOKEN_SECRET</span><span class="token operator">=</span>YourTwitterAccessTokenSecretStringHere</code></pre>
<p>Use these keys to initialize your personal Twitter client, which will handle the posting for your account.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Configure Twitter API Client</span><br /><span class="token keyword">const</span> twitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twitter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br />    <span class="token literal-property property">consumer_key</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TWITTER_CONSUMER_KEY</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">consumer_secret</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TWITTER_CONSUMER_SECRET</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">access_token_key</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TWITTER_ACCESS_TOKEN_KEY</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">access_token_secret</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TWITTER_ACCESS_TOKEN_SECRET</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>Right. Now we need to look at the <code>notes</code> array and figure out what to do. To keep it simple, let’s assume the latest note is a new one we just pushed. Since the JSON feed lists notes in descending date order, that would be the first item in the array.</p>
<p>We can then search twitter for tweets containing the latest note’s URL (we will include that in every syndicated tweet to link back to the original source). If we find anything, then it’s already been published and we don’t need to do anything. If not, we’ll go ahead.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">processNotes</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">notes</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token comment">// assume the last note was not yet syndicated</span><br />    <span class="token keyword">const</span> latestNote <span class="token operator">=</span> notes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><br /><br />    <span class="token comment">// check if the override flag for this note is set</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>latestNote<span class="token punctuation">.</span>syndicate<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'Latest note has disabled syndication.'</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// check twitter for any tweets containing note URL.</span><br />    <span class="token comment">// if there are none, publish it.</span><br />    <span class="token keyword">const</span> search <span class="token operator">=</span> <span class="token keyword">await</span> twitter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'search/tweets'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">q</span><span class="token operator">:</span> latestNote<span class="token punctuation">.</span>url <span class="token punctuation">}</span><span class="token punctuation">)</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>search<span class="token punctuation">.</span>statuses <span class="token operator">&amp;&amp;</span> search<span class="token punctuation">.</span>statuses<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token function">publishNote</span><span class="token punctuation">(</span>latestNote<span class="token punctuation">)</span><br />    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'Latest note was already syndicated.'</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Next, we need to prepare the tweet we want to send. Since our self-published note does not have the same restrictions that twitter has, we should format its content first.</p>
<p>My implementation simply strips all HTML tags from the content, makes sure it is not too long for Twitter’s limit, and includes the source url at the end. It’s also worth noting that Eleventy will escape the output in the JSON feed, so characters like <code>&quot;</code> will be encoded to <code>&amp;quot;</code> entities. We need to reverse that before posting.</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Prepare the content string for tweet format</span><br /><span class="token keyword">const</span> <span class="token function-variable function">prepareStatusText</span> <span class="token operator">=</span> <span class="token parameter">note</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> maxLength <span class="token operator">=</span> <span class="token number">200</span><br /><br />    <span class="token comment">// strip html tags and decode entities</span><br />    <span class="token keyword">let</span> text <span class="token operator">=</span> note<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^>]+></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><br />    text <span class="token operator">=</span> entities<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><br /><br />    <span class="token comment">// truncate note text if its too long for a tweet.</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> maxLength<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'...'</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token comment">// include the note url at the end.</span><br />    text <span class="token operator">=</span> text <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> note<span class="token punctuation">.</span>url<br />    <span class="token keyword">return</span> text<br /><span class="token punctuation">}</span></code></pre>
<p>When everything is done, we just need to send our note off to Twitter:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// Push a new note to Twitter</span><br /><span class="token keyword">const</span> <span class="token function-variable function">publishNote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">note</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> statusText <span class="token operator">=</span> <span class="token function">prepareStatusText</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span><br />    <span class="token keyword">const</span> tweet <span class="token operator">=</span> <span class="token keyword">await</span> twitter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'statuses/update'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br />        <span class="token literal-property property">status</span><span class="token operator">:</span> statusText<br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>tweet<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">return</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span><br />            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Note </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>note<span class="token punctuation">.</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> successfully posted to Twitter.</span><span class="token template-punctuation string">`</span></span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Hopefully that all worked, and you should end up with something like this in your timeline:</p>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">I did some housekeeping over the holidays and switched my website to <a href="https://twitter.com/eleven_ty?ref_src=twsrc%5Etfw">@eleven_ty</a> and <a href="https://twitter.com/Netlify?ref_src=twsrc%5Etfw">@Netlify</a> !<br /><br />👉 <a href="https://t.co/oq0OyPyjRs">https://t.co/oq0OyPyjRs</a></p>&mdash; Max Böck (@mxbck) <a href="https://twitter.com/mxbck/status/1081178633513910272?ref_src=twsrc%5Etfw">January 4, 2019</a></blockquote>
<p>🎉 You can find the <a href="https://gist.github.com/maxboeck/77c3c8e244f190147cca2f7383d5f183">finished lambda function</a> here.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in personal websites and the IndieWeb! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/syndicating-content-to-twitter-with-netlify-functions/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Bob" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="bob@gmail.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-further-resources"><a class="heading-anchor" href="https://mxb.dev/blog/syndicating-content-to-twitter-with-netlify-functions/#h-further-resources" aria-hidden="true">#</a> Further Resources</h2>
<ul>
<li><a href="https://indieweb.org/note">Indieweb Notes</a> The concept behind this.</li>
<li><a href="https://github.com/philhawksworth/eleventyone">eleventyone by Phil Hawksworth</a> A starter for Eleventy sites, including lambda functions and <code>netlify-lambda</code>.</li>
<li><a href="https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update.html">Twitter API Docs</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>The Hurricane Web</title>
            <link href="https://mxb.dev/blog/hurricane-web/"/>
            <updated>2018-09-16T00:00:00Z</updated>
            <id>https://mxb.dev/blog/hurricane-web/</id>
            <content type="html"><![CDATA[
                <p>As Hurricane Florence makes its way across the US southeast coast, many people are stuck in areas with severe flooding. These people rely on outside information, yet have limited bandwidth and power.</p>
<p>To help them, news platforms like <a href="http://lite.cnn.io/en">CNN</a> and <a href="https://text.npr.org/">NPR</a> provide text-only versions of their sites:</p>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">We have a text-only version of our website for anyone who needs to stay up-to-date on Hurricane Florence news and keep their battery and data usage to a minimum: <a href="https://t.co/n2UDDKmlja">https://t.co/n2UDDKmlja</a></p>&mdash; NPR (@NPR) <a href="https://twitter.com/NPR/status/1040580925329948673?ref_src=twsrc%5Etfw">September 14, 2018</a></blockquote>
<p>That’s a great thing. Here’s how it looks:</p>
<a href="https://text.npr.org/">
    <img src="https://mxb.dev/blog/hurricane-web/npr.png" style="border:1px solid #DDD;" alt="Screenshot of the NPR text-only site" />
</a>   
<h2 id="h-less-is-more"><a class="heading-anchor" href="https://mxb.dev/blog/hurricane-web/#h-less-is-more" aria-hidden="true">#</a> Less is More</h2>
<p>Text-only sites like these are usually treated as a <abbr title="Minimum Viable Product">MVP</abbr> of sorts. A slimmed-down version of the real site, specifically for emergencies.</p>
<p>I’d argue though that in some aspects, they are actually better than the original. Think about it- that simple NPR site gets a lot of points right:</p>
<ul>
<li>It’s pure content, without any distractions</li>
<li>It’s almost completely fail-safe</li>
<li>It’s responsive by default and will work on any device</li>
<li>It’s accessible</li>
<li>It’s search engine friendly</li>
<li>It’s machine readable and translatable</li>
<li>It has close to perfect performance scores:</li>
</ul>
<figure>
    <img src="https://mxb.dev/blog/hurricane-web/lighthouse-npr.png" alt="Google Lighthouse Report for text.npr.org" />
    <figcaption>The site needs exactly one request (the HTML), weighs in under 5KB and loads in about one second on a low-bandwidth 2g connection.</figcaption>
</figure>
<p>Most importantly, it’s user friendly. People get what they came for (the news) and are able to accomplish their tasks.</p>
<p>The only thing missing here might be a few sensible lines of CSS to set better typography rules. Those could still be inlined in the head though, easily coming in under the 14KB limit for the first connection roundtrip.</p>
<p>This is the web as it was originally designed. Pure information, with zero overhead. Beautiful in a way.</p>
<img src="https://mxb.dev/blog/hurricane-web/requests-npr.png" alt="" />
<p>The “full” NPR site in comparison takes <strong>~114 requests</strong> and weighs close to <strong>3MB</strong> on average. Time to first paint is around 20 seconds on slow connections. It includes ads, analytics, tracking scripts and social media widgets.</p>
<p>Meanwhile, the actual news content is roughly the same. The articles are identical - apart from some complementary images, they convey exactly the same information.</p>
<p>If the core user experience can be realized with so little, then what is all that other stuff for?</p>
<h2 id="h-the-cost-of-comfort"><a class="heading-anchor" href="https://mxb.dev/blog/hurricane-web/#h-the-cost-of-comfort" aria-hidden="true">#</a> The Cost of Comfort</h2>
<p>Of course the main NPR site offers a lot more than just news, it has all sorts of other features. It has live radio, podcasts, video and more. Articles are preloaded via AJAX. It’s a much richer experience - but all that comes at a price.</p>
<p>I recently read <a href="https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/">this great article</a> by Alex Russel, in which he compares Javascript to CO<sub>2</sub> - in the sense that too much of it can be harmful to the ecosystem.</p>
<p>Javascript enables us to do amazing things and it can really enhance the user experience, if done right. But it always has a cost. It’s <a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/">the most expensive way</a> to accomplish a task, and it’s also the most fragile. It’s easy to forget that fact when we develop things on a highspeed broadband connection, on our state-of-the-art devices.</p>
<p>That’s why websites built for a storm do not rely on Javascript. The benefit simply does not outweigh the cost. They rely on resilient HTML, because that’s all that is really necessary here.</p>
<p>That NPR site is a very useful thing that serves a purpose, and it does so in the simplest, most efficient way possible. Personally, I’d love to see more distilled experiences like this on the web.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in resilient front-end development. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/hurricane-web/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Lisa" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="lisa@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<p>… “Well, this might work for a news site - but not every usecase is that simple.”, I hear you say.</p>
<p>True. The web is a text-based medium, and it works best with that type of content. But the basic approach is still valid in any other scenario:</p>
<p>Figure out what the main thing is people want from your site and deliver it - using the simplest, least powerful technology available. That’s what <a href="https://www.w3.org/2001/tag/doc/leastPower.html">“the rule of least power”</a> tells us, and it’s still the best strategy to a make a website truly resilient.</p>
<p>Make it withstand hurricanes.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Connection-Aware Components</title>
            <link href="https://mxb.dev/blog/connection-aware-components/"/>
            <updated>2018-07-02T00:00:00Z</updated>
            <id>https://mxb.dev/blog/connection-aware-components/</id>
            <content type="html"><![CDATA[
                <p class="lead">Over the last decade, we have learned to embrace the uncertainty of developing for the web.</p>
<p>We don’t design sites for specific screen dimensions anymore, we make them responsive. We don’t assume ideal browsers and devices, we use progressive enhancement. When it comes to connectivity though, we still treat that as a binary choice: you’re either on- or offline.</p>
<p>Real connections are not that simple. Depending on your location, network condition or data plan, speeds can range from painfully slow to blazingly fast. The concept of “online” can be a drastically different experience for different users, especially on mobile.</p>
<p>What if there was a way to adapt websites based on our users connections, just like we do for varying display widths and browser capabilities? The <a href="https://wicg.github.io/netinfo/">Network Information API</a> might enable us to do so.</p>
<h2 id="h-the-network-information-api"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-the-network-information-api" aria-hidden="true">#</a> The Network Information API</h2>
<p>This API is an editor’s draft by the <a href="https://wicg.io/" title="Web Incubator Community Group">WICG</a> and currently available in Chrome. It can be accessed through the read-only property <code>navigator.connection</code> (<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection">MDN</a>), which exposes several properties that provide information about a user’s current connection:</p>
<ul>
<li><code>connection.type</code>:</li>
</ul>
<p>Returns the physical network type of the user agent as strings like “cellular”, “ethernet” or “wifi”.</p>
<ul>
<li><code>connection.downlink</code>:</li>
</ul>
<p>An effective bandwidth estimate (in Mb/s), based on recently observed active connections.</p>
<ul>
<li><code>connection.rtt</code>:</li>
</ul>
<p>An estimate of the average round-trip time (in milliseconds), based on recently observed active connections.</p>
<ul>
<li><code>connection.saveData</code>:</li>
</ul>
<p>Returns true if the user has requested “reduced data mode” in their browser settings.</p>
<ul>
<li><code>connection.effectiveType</code>:</li>
</ul>
<p>This is a combined estimation of the network quality, based on the round-trip time and downlink properties. It returns a string that describes the connection as either: <code>slow-2g</code>, <code>2g</code>, <code>3g</code> or <code>4g</code>. Here’s how these categories are determined:</p>
<div class="extend">
    <figure>
        <img src="https://mxb.dev/blog/connection-aware-components/connection-types.png" alt="" />
        <figcaption>Table of the <a href="http://wicg.github.io/netinfo/#dfn-effective-connection-type">effective connection types (ECT)</a></figcaption> 
    </figure>
</div>
<h3 id="h-responding-to-changes"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-responding-to-changes" aria-hidden="true">#</a> Responding to Changes</h3>
<p>There is also an Event Listener available on the <code>connection</code> property that fires whenever a change in the network quality is detected:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">onConnectionChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> <span class="token punctuation">{</span> rtt<span class="token punctuation">,</span> downlink<span class="token punctuation">,</span> effectiveType <span class="token punctuation">}</span> <span class="token operator">=</span> navigator<span class="token punctuation">.</span>connection<br />    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Round Trip Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rtt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><br />    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Downlink Speed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>downlink<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Mb/s</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><br />    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Effective Type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>effectiveType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><br /><span class="token punctuation">}</span><br />navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> onConnectionChange<span class="token punctuation">)</span></code></pre>
<h3 id="h-support"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-support" aria-hidden="true">#</a> Support</h3>
<a href="https://caniuse.com/#search=Network%20Information%20API">
    <img src="https://mxb.dev/blog/connection-aware-components/support.png" alt="can I use support table for the network information API" />
</a>
<p>👉 <strong>Be aware that all of this is still experimental.</strong> Only Chrome and Samsung Internet browsers have currently implemented the API. It’s a very good candidate for progressive enhancement though - and support for other platforms <a href="https://docs.google.com/document/d/1LTk9uVMGi4kurzcF5ellsAJReTF31fFJMHrQwSVtBjc/edit">is on the way</a>.</p>
<h2 id="h-connection-aware-components"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-connection-aware-components" aria-hidden="true">#</a> Connection-aware components</h2>
<p>So how could this be used? Knowing about connection quality enables us to custom-fit resources based on network speed and data preferences. This makes it possible to build an interface that dynamically responds to the user’s connection - a “connection-aware” frontend.</p>
<p>By combining the Network Information API with <strong>React</strong>, we could write a component that renders different elements for different speeds. For example, a <code>&lt;Media /&gt;</code> component in a news article might output:</p>
<ul>
<li><strong>offline</strong>: a placeholder with alt text</li>
<li><strong>2g / reduced data mode</strong>: a low-resolution image, ~30kb</li>
<li><strong>3g</strong>: a high resolution retina image, ~200kb</li>
<li><strong>4g</strong>: a HD video ~1.8MB</li>
</ul>
<div class="extend">
    <figure>
        <img src="https://mxb.dev/blog/connection-aware-components/component-states.jpg" alt="a media component, showing four different states of an image or video of a chameleon" />
        <figcaption>The different states of our Media component</figcaption> 
    </figure>
</div>
<p>Here’s a (very simplified) example of how that might work:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ConnectionAwareMedia</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">(</span><br />    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><br />        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><br />            <span class="token literal-property property">connectionType</span><span class="token operator">:</span> <span class="token keyword">undefined</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// check connection type before first render.</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>connection <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">const</span> connectionType <span class="token operator">=</span> navigator<span class="token punctuation">.</span>onLine <br />                <span class="token operator">?</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>effectiveType<br />                <span class="token operator">:</span> <span class="token string">'offline'</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br />                connectionType<br />            <span class="token punctuation">}</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><br />    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token keyword">const</span> <span class="token punctuation">{</span> connectionType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<br />        <span class="token keyword">const</span> <span class="token punctuation">{</span> imageSrc<span class="token punctuation">,</span> videoSrc<span class="token punctuation">,</span> alt <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<br /><br />        <span class="token comment">// fallback if network info API is not supported.</span><br />        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectionType<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Image</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imageSrc<span class="token punctuation">.</span>hires<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token comment">// render different subcomponents based on network speed.</span><br />        <span class="token keyword">switch</span><span class="token punctuation">(</span>connectionType<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">case</span> <span class="token string">'offline'</span><span class="token operator">:</span><br />                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Placeholder</span></span> <span class="token attr-name">caption</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><br /><br />            <span class="token keyword">case</span> <span class="token string">'4g'</span><span class="token operator">:</span><br />                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Video</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>videoSrc<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><br /><br />            <span class="token keyword">case</span> <span class="token string">'3g'</span><span class="token operator">:</span><br />                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Image</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imageSrc<span class="token punctuation">.</span>hires<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><br /><br />            <span class="token keyword">default</span><span class="token operator">:</span><br />                <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Image</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imageSrc<span class="token punctuation">.</span>lowres<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">)</span></code></pre>
<h3 id="h-using-a-higher-order-component"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-using-a-higher-order-component" aria-hidden="true">#</a> Using a Higher-Order Component</h3>
<p>The above example makes our component a bit unpredictable - it renders different things, even when given the same props. This makes it harder to test and maintain. To simplify it and enable reuse of our logic, moving the network condition check into a separate higher-order component might be a good idea.</p>
<p>Such a <abbr title="Higher Order Component">HoC</abbr> could take in any component we want and make it connection-aware, injecting the effective connection type as a prop.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">withConnectionType</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent<span class="token punctuation">,</span> respondToChange <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span><br />        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><br />                <span class="token literal-property property">connectionType</span><span class="token operator">:</span> <span class="token keyword">undefined</span><br />            <span class="token punctuation">}</span><br />            <span class="token comment">// Basic API Support Check.</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span>hasNetworkInfoSupport <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><br />                navigator<span class="token punctuation">.</span>connection <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>effectiveType<br />            <span class="token punctuation">)</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span>setConnectionType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setConnectionType</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token comment">// Check before the component first renders.</span><br />            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setConnectionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token comment">// optional: respond to connectivity changes.</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span>respondToChange<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><br />                    <span class="token string">'change'</span><span class="token punctuation">,</span> <br />                    <span class="token keyword">this</span><span class="token punctuation">.</span>setConnectionType<br />                <span class="token punctuation">)</span><br />            <span class="token punctuation">}</span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span>respondToChange<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><br />                    <span class="token string">'change'</span><span class="token punctuation">,</span> <br />                    <span class="token keyword">this</span><span class="token punctuation">.</span>setConnectionType<br />                <span class="token punctuation">)</span><br />            <span class="token punctuation">}</span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">getConnectionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">const</span> connection <span class="token operator">=</span> navigator<span class="token punctuation">.</span>connection<br />            <span class="token comment">// check if we're offline first...</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                <span class="token keyword">return</span> <span class="token string">'offline'</span><br />            <span class="token punctuation">}</span><br />            <span class="token comment">// ...or if reduced data is preferred.</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span>saveData<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                <span class="token keyword">return</span> <span class="token string">'saveData'</span><br />            <span class="token punctuation">}</span><br />            <span class="token keyword">return</span> connection<span class="token punctuation">.</span>effectiveType<br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">setConnectionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasNetworkInfoSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />                <span class="token keyword">const</span> connectionType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br />                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br />                    connectionType<br />                <span class="token punctuation">}</span><span class="token punctuation">)</span><br />            <span class="token punctuation">}</span><br />        <span class="token punctuation">}</span><br /><br />        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />            <span class="token comment">// inject the prop into our component.</span><br />            <span class="token comment">// default to "undefined" if API is not supported.</span><br />            <span class="token keyword">return</span> <span class="token punctuation">(</span><br />                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span><br />                    <span class="token attr-name">connectionType</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>connectionType<span class="token punctuation">}</span></span><br />                    <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span><br />                <span class="token punctuation">/></span></span><br />            <span class="token punctuation">)</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">// Now we can reuse the function to enhance all kinds of components.</span><br /><span class="token keyword">const</span> ConnectionAwareMedia <span class="token operator">=</span> <span class="token function">withConnectionType</span><span class="token punctuation">(</span>Media<span class="token punctuation">)</span></code></pre>
<p>👉  This small proof-of concept is also <a href="https://codepen.io/mxbck/pen/5e897c9cd7c75d130d1f86bc5b87a1d2?editors=0010" target="_blank" rel="noopener noreferrer">available on CodePen</a>, if you want to play around.</p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in modern front-end development! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/connection-aware-components/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Lisa" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="lisa@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/connection-aware-components/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li><a href="https://wicg.github.io/netinfo/">Network Information API Draft</a> - WICG</li>
<li><a href="https://groups.google.com/a/chromium.org/forum/m/#!topic/blink-dev/UVfNMH50aaQ">Dev Thread in Chromium Forum</a>- Intent to Ship</li>
<li><a href="https://googlechrome.github.io/samples/network-information/index.html">Official Example for Chrome</a> - shows all currently available properties</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>The Layouts of Tomorrow</title>
            <link href="https://mxb.dev/blog/layouts-of-tomorrow/"/>
            <updated>2018-06-14T00:00:00Z</updated>
            <id>https://mxb.dev/blog/layouts-of-tomorrow/</id>
            <content type="html"><![CDATA[
                <p>If you’ve been to any web design talk in the last couple of years, you’ve probably seen this famous tweet by Jon Gold:</p>
<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">which one of the two possible websites are you currently designing? <a href="https://t.co/ZD0uRGTqqm">pic.twitter.com/ZD0uRGTqqm</a></p>&mdash; Jon Gold (@jongold) <a href="https://twitter.com/jongold/status/694591217523363840?ref_src=twsrc%5Etfw">2. Februar 2016</a></blockquote>
<p>It mocks the fact that a lot of today’s websites look the same, as they all follow the same standard layout practices that we’ve collectively decided to use. Building a blog? Main column, widget sidebar. A marketing site? Big hero image, three teaser boxes (it <em>has</em> to be three).</p>
<p>When we look back at what the web was like in earlier days, I think there’s room for a lot more creativity in web design today.</p>
<h2 id="h-enter-css-grid"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-enter-css-grid" aria-hidden="true">#</a> Enter CSS Grid</h2>
<p><a href="https://www.w3.org/TR/css-grid-1/">Grid</a> is the first real tool for layout on the web. Everything we had up until now, from tables to floats to absolute positioning to flexbox - was meant to solve a different problem, and we found ways to use and abuse it for layout purposes.</p>
<p>The point of these new tools is not to build the same things again with different underlying technology. It has a lot more potential: It could re-shape the way we think about layout and enable us to do entirely new, different things on the web.</p>
<p>Now I know it’s hard to get into a fresh mindset when you’ve been building stuff a certain way for a long time. We’re trained to think about websites as header, content and footer. Stripes and boxes.</p>
<p>But to keep our industry moving forward (and our jobs interesting), it’s a good idea to take a step back once in a while and rethink how we do things.</p>
<p>If we didn’t, we’d still be building stuff with spacer gifs and all-uppercase <code>&lt;TABLE&gt;</code> tags. 😉</p>
<h2 id="h-so-how-could-things-look%3F"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-so-how-could-things-look%3F" aria-hidden="true">#</a> So, how could things look?</h2>
<p>I went over to dribbble in search of layout ideas that are pushing the envelope a bit. The kind of design that would make frontend developers like me frown at first sight.</p>
<p>There’s a lot of great work out there - here’s a few of my favorites:</p>
<figure>
    <a href="https://dribbble.com/shots/1573896-Warehouse" rel="noopener noreferrer" target="_blank">
        <img src="https://res.cloudinary.com/mxb/image/upload/v1620048300/warehouse_mffg1k.jpg" alt="" loading="lazy" />
    </a>
    <figcaption>
        "Warehouse" by <a href="https://dribbble.com/Radium" rel="noopener noreferrer" target="_blank">Cosmin Capitanu</a>
    </figcaption>
</figure>
<figure>
    <a href="https://dribbble.com/shots/2375246-Fashion-Butique-slider-animation" rel="noopener noreferrer" target="_blank">
        <img src="https://res.cloudinary.com/mxb/image/upload/v1620048308/fashion_boutique_ur9h3l.gif" alt="" loading="lazy" />
    </a>
    <figcaption>
        "Fashion Boutique" by <a href="https://dribbble.com/KreativaStudio" rel="noopener noreferrer" target="_blank">KREATIVA Studio</a>
    </figcaption>
</figure>
<figure>
    <a href="https://dribbble.com/shots/4316958-Organic-Juicy-Co-Landing-Page" rel="noopener noreferrer" target="_blank">
        <img src="https://res.cloudinary.com/mxb/image/upload/v1620048299/organic_juicy_ryzbh9.png" alt="" loading="lazy" />
    </a>
    <figcaption>
        "Organic Juicy Co." by <a href="https://dribbble.com/broklinonjei" rel="noopener noreferrer" target="_blank">Broklin Onjei</a>
    </figcaption>
</figure>
<figure>
    <a href="https://dribbble.com/shots/1349782-Travel-Summary" rel="noopener noreferrer" target="_blank">
        <img src="https://res.cloudinary.com/mxb/image/upload/v1620048298/travel_summary_d8lj8x.jpg" alt="" loading="lazy" />
    </a>
    <figcaption>
        "Travel Summary" by <a href="https://dribbble.com/p_kwiatkowski" rel="noopener noreferrer" target="_blank">Piotr Adam Kwiatkowski</a>
    </figcaption>
</figure>
<figure>
    <a href="https://dribbble.com/shots/2652364-Digital-Walls" rel="noopener noreferrer" target="_blank">
        <img src="https://res.cloudinary.com/mxb/image/upload/v1620048306/digital_walls_sz1rhy.gif" alt="" loading="lazy" />
    </a>
    <figcaption>
        "Digital Walls" by <a href="https://dribbble.com/Radium" rel="noopener noreferrer" target="_blank">Cosmin Capitanu</a>
    </figcaption>
</figure>
<p>I especially like that last one. It reminds me a bit of the “Metro Tiles” that were all the rage in Windows 8. Not only is this visually impressive, its very flexible too - I could see this working on a phone, a tablet, even on huge TV screens or in augemented reality, as suggested by the designer.</p>
<p>How hard is it to make something like this, given the tools we have today? I wanted to find out and started building a prototype.</p>
<p>I tried to approach this with real production constraints in mind. So the interface had to be responsive, performant and accessible. (It’s not required to be pixel-perfect everywhere though, cause you know - <a href="http://dowebsitesneedtobeexperiencedexactlythesameineverybrowser.com/">that’s not a real thing</a>.)</p>
<p>Here’s how it turned out:</p>
<div class="extend">
    <video poster="https://res.cloudinary.com/mxb/image/upload/v1620048303/cover_nlzf1u.jpg" width="960" style="margin:0 auto;" preload="" controls="">
        <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1620048310/demo_jz51eo.webm" type="video/webm" />
        <source src="https://res.cloudinary.com/mxb/video/upload/q_auto/v1620048311/demo_ltqhxq.mp4" type="video/mp4" />
    </video>
</div>
<p>You can check out <a href="https://codepen.io/mxbck/live/81020404c9d5fd873a717c4612c914dd" target="_blank" rel="noopener noreferrer">the final result</a> on Codepen.</p>
<div class="callout callout--warning"><span class="callout__icon"><svg class="icon icon--warning" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-warning"></use></svg></span><div class="callout__content"><p>Since this is just for demo purposes, I did not include fallbacks and polyfills for older browsers. My goal was to test the capabilities of modern CSS here, so not all features have cross-browser support (read below). I found that it works best in recent versions of Firefox or Chrome.</p></div></div>
<p>Some of the things that made this interesting:</p>
<h3 id="h-layout"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-layout" aria-hidden="true">#</a> Layout</h3>
<p>Unsurprisingly, the essential factor for the “Metro Tiles” is the grid. The entire layout logic fits inside this block:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.boxgrid </span><span class="token punctuation">{</span><br />    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> auto<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token property">grid-gap</span><span class="token punctuation">:</span> 2rem .5rem<span class="token punctuation">;</span><br /><br />    <span class="token selector"><span class="token parent important">&amp;</span>__item </span><span class="token punctuation">{</span><br />        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br /><br />        <span class="token selector"><span class="token parent important">&amp;</span>--wide </span><span class="token punctuation">{</span><br />            <span class="token property">grid-column</span><span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><br />        <span class="token punctuation">}</span><br />        <span class="token selector"><span class="token parent important">&amp;</span>--push </span><span class="token punctuation">{</span><br />            <span class="token property">grid-column</span><span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><br />            <span class="token property">padding-left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><br />        <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>The magic is mostly in the second line there. <code>repeat(auto-fit, minmax(150px, 1fr))</code> handles the column creation responsively, meaning it will fit as many boxes as possible in a row to make sure they align with the outer edges.</p>
<p>The <code>--push</code> modifier class is used to achieve the design’s effect where some boxes “skip” a column. Since this is not easily possible without explicitly setting the grid lines, I opted for this trick: The actual grid cell spans two columns, but only allows enough space for the box to fill have the cell.</p>
<h3 id="h-animation"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-animation" aria-hidden="true">#</a> Animation</h3>
<p>The original design shows that the section backgrounds and the tile grid move at different speeds, creating the illusion of depth. Nothing extraordinary, just some good old parallax.</p>
<p>While this effect is usually achieved by hooking into the scroll event and then applying different <code>transform</code> styles via Javascript, there’s a better way to do it: entirely in CSS.</p>
<p>The secret here is to leverage CSS 3D transforms to separate the layers along the z-axis. <a href="https://developers.google.com/web/updates/2016/12/performant-parallaxing">This technique</a> by Scott Kellum and Keith Clark essentially works by using <code>perspective</code> on the scroll container and <code>translateZ</code> on the parallax children:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.parallax-container</span> <span class="token punctuation">{</span><br />  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><br />  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><br />  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><br /><br />  <span class="token comment">/* set a 3D perspective and origin */</span><br />  <span class="token property">perspective</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><br />  <span class="token property">perspective-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token selector">.parallax-child</span> <span class="token punctuation">{</span><br />  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span><br />  <span class="token comment">/* move the children to a layer in the background, */</span><br />  <span class="token comment">/* then scale them back up to their original size */</span><br />  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>-2px<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>A huge benefit of this method is the improved performance (because it doesn’t touch the DOM with calculated styles), resulting in fewer repaints and an almost 60fps smooth parallax scroll.</p>
<h3 id="h-snap-points"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-snap-points" aria-hidden="true">#</a> Snap Points</h3>
<p><a href="https://drafts.csswg.org/css-scroll-snap/">CSS Scroll Snap Points</a> are a somewhat experimental feature, but I thought it would fit in nicely with this design. Basically, you can tell the browser scroll to “snap” to certain elements in the document, if it comes in the proximity of such a point. Support is <a href="https://caniuse.com/#feat=css-snappoints">quite limited</a> at the moment, your best bet to see this working is in Firefox or Safari.</p>
<p>There are currently different versions of the spec, and only Safari supports the most recent implementation. Firefox still uses an older syntax. The combined approach looks like this:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.scroll-container</span> <span class="token punctuation">{</span><br />    <span class="token comment">/* current spec / Safari */</span><br />    <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y proximity<span class="token punctuation">;</span><br /><br />    <span class="token comment">/* old spec / Firefox */</span><br />    <span class="token property">scroll-snap-destination</span><span class="token punctuation">:</span> 0% 100%<span class="token punctuation">;</span><br />    <span class="token property">scroll-snap-points-y</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token selector">.snap-to-element</span> <span class="token punctuation">{</span><br />    <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>The <code>scroll-snap-type</code> tells the scroll container to snap along the <code>y</code> axis (vertical) with a “strictness” of <code>proximity</code>. This lets the browser decide whether a snap point is in reach, and if it’s a good time to jump.</p>
<p>Snap points are a small enhancement for capable browsers, all others simply fall back to default scrolling.</p>
<h3 id="h-smooth-scroll"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-smooth-scroll" aria-hidden="true">#</a> Smooth Scroll</h3>
<p>The only Javascript involved is handling the smooth scroll when the menu items on the left, or the direction arrows on top/bottom are clicked. This is progressively enhanced from a simple in-page-anchor link <code>&lt;a href=&quot;#vienna&quot;&gt;</code> that jumps to the selected section.</p>
<p>To animate it, I chose to use the vanilla <code>Element.scrollIntoView()</code> method <a href="https://developer.mozilla.org/de/docs/Web/API/Element/scrollIntoView">(MDN Docs)</a>. Some browsers accept an option to use “smooth” scrolling behaviour here, instead of jumping to the target section right away.</p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior">scroll behaviour property</a> is currrently a Working Draft, so support is not quite there yet. Only Chrome and Firefox support this at the moment - However, there is <a href="http://iamdustan.com/smoothscroll/">a polyfill</a> available if necessary.</p>
<h2 id="h-think-outside-the-boxes"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-think-outside-the-boxes" aria-hidden="true">#</a> Think outside the box(es)</h2>
<p>While this is just one interpretation of what’s possible, I’m sure there are countless other innovative ideas that could be realized using the tools we have today. Design trends may come and go as they always have; but I truly think it’s worth remembering that the web is a fluid medium. Technologies are constantly changing, so why should our layouts stay the same? Go out there and explore.</p>
<h2 id="h-further-resources"><a class="heading-anchor" href="https://mxb.dev/blog/layouts-of-tomorrow/#h-further-resources" aria-hidden="true">#</a> Further Resources</h2>
<ul>
<li><a href="https://www.invisionapp.com/enterprise/design-genome">Invision “Design Genome” Site</a> - Awesome Grid Layout</li>
<li><a href="https://www.youtube.com/channel/UC7TizprGknbDalbHplROtag">Layout Land</a> - Jen Simmons’ Youtube Channel</li>
<li><a href="https://abookapart.com/products/the-new-css-layout">The New CSS Layout</a> - Rachel Andrew (A Book Apart)</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Semantic JSX</title>
            <link href="https://mxb.dev/blog/semantic-jsx/"/>
            <updated>2018-06-02T00:00:00Z</updated>
            <id>https://mxb.dev/blog/semantic-jsx/</id>
            <content type="html"><![CDATA[
                <p class="lead">The React JSX Syntax offers a layer of abstraction that's very useful for component-based systems - but it's easy to forget that everything you write ultimately compiles down to HTML.</p>
<p>Encapsulating pieces of UI this way makes it easier to compose larger systems, but it also hides the “bare bones” structure of an application. That’s not a bad thing - but I feel like it’s one of the reasons why people learning frontend today can get a distorted understanding of web development.</p>
<p>If you’re writing code for a browser, you’re writing HTML. That’s why it’s important to know your semantics, and choose the correct element for the task at hand.</p>
<p>Here are a few tips how that can be done.</p>
<h2 id="h-look-past-the-surface"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-look-past-the-surface" aria-hidden="true">#</a> Look past the surface</h2>
<p>The most important rule when you’re trying to decide which element to use is: don’t rely on the visual appearance. Everything can be made to look like anything else.</p>
<p>Instead, choose elements based on <strong>behaviour</strong> and <strong>meaning</strong>. As a quick check, you can try to disable all CSS in your devtools and take a look at the page in the browser’s default style. Does it still make sense?</p>
<h3 id="h-quiz-time"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-quiz-time" aria-hidden="true">#</a> Quiz Time</h3>
<p>Here’s a little quiz: Imagine you’re building an App for <a href="https://twitter.com/dog_rates">we rate dogs™</a> that provides a searchable database of dog pics. What element would you use to build the <code>&lt;Tag /&gt;</code> component seen here?</p>
<p><img src="https://mxb.dev/blog/semantic-jsx/tags1.png" alt="four tags with different dog attributes, labelled &quot;Popular Tags&quot;" /></p>
<p>In this case, clicking the tags leads you to another page, so they’re links. Easy.</p>
<p>OK, how about now?</p>
<figure>
    <img src="https://mxb.dev/blog/semantic-jsx/tags2.png" alt="another set of tags that looks the same, labelled 'Select Tags (pick three)'" />
    <figcaption>The component looks the same, but its behaviour is different now.</figcaption>
</figure>
<p>Here, the tags are choices a user can make to select multiple values from a predefined set of options. So the underlying element is actually an <code>&lt;input type=&quot;checkbox&quot;&gt;</code>. The clickable part is the input label, and the actual checkbox is hidden with CSS.</p>
<p>It might be tempting to use the same <code>&lt;Tag&gt;</code> component for both situations. Have it render a neutral <code>&lt;span&gt;</code> and pass it an <code>onClick</code> function via props to handle the different behaviour.<br />
But not only would that strip the component of its semantics, we would miss out on all the things the browser just does for free when we use the correct tag.</p>
<h2 id="h-seize-the-props"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-seize-the-props" aria-hidden="true">#</a> Seize the Props</h2>
<p>One of the strenghts of components is their reusability, and the ability to configure them through props. So why not use that to our advantage?</p>
<p>By using the props supplied to our component, we can conditionally decide which HTML element to render. For example a <code>&lt;Tag href={url} /&gt;</code> could result in a link, while <code>&lt;Tag value={id} /&gt;</code> might render an input. The visual appearance could be the same in both cases, but the context alters the semantic meaning.</p>
<h2 id="h-use-buttons"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-use-buttons" aria-hidden="true">#</a> Use Buttons</h2>
<p>Most of the time, the element you’re looking for to trigger an arbitrary action is a <code>&lt;button&gt;</code>. Whenever you find yourself attaching an <code>onClick</code> handler to a <code>&lt;div&gt;</code>, think twice. Is that really the best choice?</p>
<p>The same goes for “empty” links that do not change the URL in some way: If you find something like this in your code:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>someFunction<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span></code></pre>
<p>Make it a button instead.</p>
<p>If the thing you’re building isn’t supposed to look like a button, again - don’t rely on visual appearance here. “Clickable divs” are often only used because they come with no default styles of their own - but removing those from a button can be achieved in 3 lines of CSS.</p>
<p>By the way, it’s also perfectly valid for a button to wrap a larger block of content. It is not limited to just text or icons.</p>
<h2 id="h-mapping-data-to-jsx"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-mapping-data-to-jsx" aria-hidden="true">#</a> Mapping Data to JSX</h2>
<p>Say our dog rating app has an API. You request some data and it gives you something like this:</p>
<pre class="language-js"><code class="language-js"><span class="token punctuation">[</span><br />    <span class="token punctuation">{</span><br />        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'216df16ca8b1'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Shiba Inu'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">'/assets/img/shibainu.jpg'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'Such shibe, very dog. wow'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/doggos/shiba-inu'</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span><br />    <span class="token punctuation">{</span><br />        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'5ea3621cf16'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Alaskan Malamute'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">'/assets/img/malamute.jpg'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'The Malamutes floof is very sof.'</span><span class="token punctuation">,</span><br />        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/doggos/alaskan-malmute'</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span><br />    <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><br /><span class="token punctuation">]</span></code></pre>
<p>Now your job is to transform that data into a card UI.</p>
<p>Most of the time when you want to <code>map()</code> an array of items to a JSX structure, the semantically correct way to do it is a <strong>list</strong>. Depending on the type of data, this could be an <code>&lt;ol&gt;</code> if the order is important (for example in a comments thread). If not, go with <code>&lt;ul&gt;</code>.</p>
<p>Here’s a useful pattern:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">CardList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items<span class="token punctuation">,</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cardlist<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br />        </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span><br />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cardlist__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br />                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Card</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"><br />            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br />        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"><br />    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><br /><span class="token punctuation">)</span><br /><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CardList</span></span> <span class="token attr-name">items</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>doggos<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Todays Doggos<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<p>Why is this better than simply returning an array of <code>&lt;Card /&gt;</code>s?</p>
<p>By making this two dedicated components, you can separate layout from content.<br />
The container could be styled as a list, grid, or a slider - and it can dynamically change columns on different breakpoints. The Card component doesn’t have to care about its context. It can just be dropped into any wrapper and adopt its width.</p>
<p>Screenreaders will announce this as “Todays doggos, list, 5 items” or similar.</p>
<h2 id="h-fight-the-divs"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-fight-the-divs" aria-hidden="true">#</a> Fight the Divs</h2>
<p>As of React v16, you can use <code>&lt;React.Fragment&gt;</code> (or the shorthand <code>&lt;&gt;...&lt;/&gt;</code> if you feel like a 1337 hacker). This lets you return multiple sibling DOM nodes without having to wrap them in an unnecessary div. The Fragment does not render to anything tangible in HTML, and you don’t have to pass unique <code>key</code> properties to the elements it contains.</p>
<p>It’s awesome - use it.</p>
<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token punctuation">(</span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text"><br />        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Multiple Siblings without a wrapper!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"><br />        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"><br />    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><br /><span class="token punctuation">)</span></code></pre>
<h2 id="h-further-resources"><a class="heading-anchor" href="https://mxb.dev/blog/semantic-jsx/#h-further-resources" aria-hidden="true">#</a> Further Resources</h2>
<ul>
<li><a href="http://html5doctor.com/lets-talk-about-semantics/">HTML5 Semantics</a></li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y">Eslint Plugin JSX A11y</a></li>
<li><a href="https://react.semantic-ui.com/introduction">Semantic UI Library</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>CSS Grid Admin Dashboard</title>
            <link href="https://mxb.dev/blog/css-grid-admin-dashboard/"/>
            <updated>2018-04-28T00:00:00Z</updated>
            <id>https://mxb.dev/blog/css-grid-admin-dashboard/</id>
            <content type="html"><![CDATA[
                <p class="lead">Good News! <a href="https://www.w3.org/TR/css-grid-1/">CSS Grid</a> has been out for some time now, and browser support is very good. If you're building stuff on the web, this is definitely a tool you should have on your belt.</p>
<p>Not only is grid worth checking out, it’s also ready to be used in production, today. You know - on the <em>real</em> web.</p>
<figure class="extend">
  <a href="https://caniuse.com/#search=grid">
    <img src="https://mxb.dev/blog/css-grid-admin-dashboard/caniuse_grid.png" alt="Support Statistics for CSS Grid Layout" />
  </a>
  <figcaption>Grid support as of 04/18. Look at all that green.</figcaption>
</figure>
<p>So, what can we build with this? I’ve used grid on several projects now, and I found that it really makes building layouts a lot easier. I’ve put together a small demo here to show possible applications of CSS grids and how to make them work cross-browser.</p>
<p>👉 <em>Only after the code? You can find the <a href="https://codepen.io/mxbck/pen/5be32fd8e3ca7b6b2f5108ba7d22debd">full demo on Codepen</a>.</em></p>
<h2 id="h-building-an-admin-interface"><a class="heading-anchor" href="https://mxb.dev/blog/css-grid-admin-dashboard/#h-building-an-admin-interface" aria-hidden="true">#</a> Building an Admin Interface</h2>
<p>We’re going to build a pretty common layout for the backend of an application, where admins or editors can manage their content:</p>
<figure class="extend">
    <a href="https://codepen.io/mxbck/pen/5be32fd8e3ca7b6b2f5108ba7d22debd" target="_blank" rel="noopener noreferrer">
        <img src="https://mxb.dev/blog/css-grid-admin-dashboard/admin.png" alt="An admin interface layout demo" />
    </a>
    <figcaption>Our admin dashboard. (Nevermind the hyperrealistic content)</figcaption>
</figure>
<p>By looking at the design above, we can already imagine the underlying grid. Unlike “regular” websites, these admin screens often have a lot of fixed UI elements that span the entire viewport, and only the main content area is scrollable.</p>
<p>Defining the basic layout is pretty straightforward - we just need to set our <code>rows</code> and <code>columns</code>. Basically, the interface consists of four parts:</p>
<ul>
<li>Header</li>
<li>Navigation</li>
<li>Main Content Area</li>
<li>Footer</li>
</ul>
<pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$admin-header-height</span></span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span><br /><span class="token property"><span class="token variable">$admin-footer-height</span></span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span><br /><span class="token property"><span class="token variable">$admin-nav-width</span></span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span><br /><br /><span class="token selector">.admin </span><span class="token punctuation">{</span><br />  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><br />  <br />  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span>     <span class="token variable">$admin-header-height</span> 1fr <span class="token variable">$admin-footer-height</span><span class="token punctuation">;</span><br />  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span>  <span class="token variable">$admin-nav-width</span> 1fr<span class="token punctuation">;</span><br />  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">"header  header"</span><br />                          <span class="token string">"nav    main"</span><br />                          <span class="token string">"footer footer"</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>We can define the heights and widths using the <code>grid-template-rows</code> and <code>grid-template-columns</code> properties. The <code>1fr</code> (= one fraction) in there is similar to <code>flex-grow</code>: it tells the browser to distribute any leftover space equally to the middle row, so the main content takes up all available space.</p>
<p>Finally, the <code>grid-template-areas</code> is just a convienience rule to let us name the parts of our grid to something a bit more readable. After doing that, we can assign all grid-items to their position on the grid.</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.header </span><span class="token punctuation">{</span><br />  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token selector">.navigation </span><span class="token punctuation">{</span><br />  <span class="token property">grid-area</span><span class="token punctuation">:</span> nav<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><span class="token comment">// ...you get the idea.</span></code></pre>
<p><em>Remember: The visual placement should generally follow the source order, to keep the document accessible.</em></p>
<h2 id="h-nested-grids-the-dashboard"><a class="heading-anchor" href="https://mxb.dev/blog/css-grid-admin-dashboard/#h-nested-grids-the-dashboard" aria-hidden="true">#</a> Nested Grids: The Dashboard</h2>
<p>We can nest another grid inside our main content area to display the dashboard. This will be a separate grid instance though, not connected to the main layout. (Sidenote: connected grids or “subgrids” are not yet possible, but the spec for it is already in development, and <a href="https://rachelandrew.co.uk/archives/2017/03/16/subgrid-moved-to-level-2-of-the-css-grid-specification/">subgrids are likely to land with Grid Level 2</a>).</p>
<p>Here’s a common design pattern where different statistics and widgets are displayed in a card grid:</p>
<p><img src="https://mxb.dev/blog/css-grid-admin-dashboard/dashboard_grid.png" alt="Grid Layout for the dashboard view" /></p>
<p>This time, rather than explicitly defining our rows and columns, we’ll leave that open. We’ll just tell the browser how many columns we want, and to space them out evenly. When more items are placed on the grid, the container can just generate additional grid tracks on the fly. This <a href="https://www.w3.org/TR/css-grid-1/#implicit-grids">“implicit” grid</a> will accommodate any amount of content we may want to display.</p>
<p>💡 Pro Tip: By using a CSS custom property for the column count, we can easily switch from a 2-col to a 4-col grid on larger screens.</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.dashboard </span><span class="token punctuation">{</span><br />  <span class="token property">--column-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span><br />  <br />  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--column-count<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token property">grid-gap</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><br />  <br />  <span class="token selector"><span class="token parent important">&amp;</span>__item </span><span class="token punctuation">{</span><br />    <span class="token comment">// per default, an item spans two columns.</span><br />    <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span 2<span class="token punctuation">;</span><br />    <br />    <span class="token comment">// smaller items only span one column.</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--half </span><span class="token punctuation">{</span><br />      <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span 1<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />    <span class="token comment">// full-width items span the entire row.</span><br />    <span class="token comment">// the numbers here refer to the first and last grid lines.</span><br />    <span class="token selector"><span class="token parent important">&amp;</span>--full </span><span class="token punctuation">{</span><br />      <span class="token property">grid-column</span><span class="token punctuation">:</span> 1 <span class="token operator">/</span> -1<span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />  <span class="token punctuation">}</span><br />  <br />  <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 48rem<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />    <span class="token property">--column-count</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-but-what-about-legacy-browser-%3F"><a class="heading-anchor" href="https://mxb.dev/blog/css-grid-admin-dashboard/#h-but-what-about-legacy-browser-%3F" aria-hidden="true">#</a> But what about {legacy browser} ?</h2>
<p>Yes, yes I know, we need to support IE11. We need to support older mobile browsers. That’s why we can’t have nice things.</p>
<p>Fortunately, it’s possible to build a Flexbox fallback and progressively enhance from there! The layout remains usable, and more capable browsers get all that grid goodness 👌.</p>
<p>We dont even need a media query here, as the grid properties will simply override all flexbox definitions, if they’re supported. If not, the browser will ignore them.</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.admin </span><span class="token punctuation">{</span><br />  <span class="token comment">// define flexbox fallback first.</span><br />  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br />  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><br /><br />  <span class="token comment">// then add the grid definition.</span><br />  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><br />  <span class="token selector">...<br /><br />  <span class="token parent important">&amp;</span>__header,<br />  <span class="token parent important">&amp;</span>__footer </span><span class="token punctuation">{</span><br />    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <span class="token selector"><span class="token parent important">&amp;</span>__nav </span><span class="token punctuation">{</span><br />    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token variable">$admin-nav-width</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <span class="token selector"><span class="token parent important">&amp;</span>__main </span><span class="token punctuation">{</span><br />    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>For the dashboard card grid fallback, things are slightly more complex. We have to account for the missing <code>grid-gap</code> property, so we’ll have to fake the spacing with margins and paddings:</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.dashboard </span><span class="token punctuation">{</span><br />  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br />  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><br />  <span class="token comment">// offset the outer gutter with a negative margin.</span><br />  <span class="token property">margin</span><span class="token punctuation">:</span> 0 -1rem<span class="token punctuation">;</span><br /><br />  <span class="token selector"><span class="token parent important">&amp;</span>__item </span><span class="token punctuation">{</span><br />    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 50%<span class="token punctuation">;</span><br />    <span class="token comment">// this will add up to a 2rem gap between items.</span><br />    <span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Since these fallback gaps will mess with our layout if we <strong>do</strong> have grid support, we need a small reset to restore the original grid. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports">Detecting support</a> can be done using the <code>@supports</code> rule:</p>
<pre class="language-scss"><code class="language-scss"><span class="token atrule"><span class="token rule">@supports</span> <span class="token punctuation">(</span><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><br />  <span class="token selector">.dashboard </span><span class="token punctuation">{</span><br />    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <span class="token selector">.dashboard__item </span><span class="token punctuation">{</span><br />    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>👉 <em>Check out the <a href="https://codepen.io/mxbck/pen/5be32fd8e3ca7b6b2f5108ba7d22debd">full demo on Codepen!</a></em></p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in CSS and front-end development techniques. If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/css-grid-admin-dashboard/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Alice" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="alice@awesome.io" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/css-grid-admin-dashboard/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li>Rachel Andrew: <a href="https://abookapart.com/products/the-new-css-layout">“The New CSS Layout”</a> (A book apart)</li>
<li>Una Kravets: <a href="http://www.gridtoflex.com/">“Grid To Flex”, Common layouts built with grid</a></li>
<li>Manuel Matuzović: <a href="https://www.smashingmagazine.com/2017/07/enhancing-css-layout-floats-flexbox-grid">Progressively Enhancing CSS Layout: From Floats To Flexbox To Grid</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Building Skeleton Screens with CSS</title>
            <link href="https://mxb.dev/blog/css-skeleton-screens/"/>
            <updated>2017-08-30T00:00:00Z</updated>
            <id>https://mxb.dev/blog/css-skeleton-screens/</id>
            <content type="html"><![CDATA[
                <p><em>This article was originally published on <a href="https://css-tricks.com/building-skeleton-screens-css-custom-properties/">CSS-Tricks.com</a>.</em></p>
<p class="lead">Designing loading states on the web is often overlooked or dismissed as an afterthought. Performance is not only a developer's responsibility - building an experience that works with slow connections can be a design challenge as well.</p>
<p>While developers need to pay attention to things like minification or caching, designers have to think about how the UI will look and behave while it is in a “loading” or “offline” state.</p>
<h2 id="h-the-illusion-of-speed"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-the-illusion-of-speed" aria-hidden="true">#</a> The Illusion of Speed</h2>
<p><a href="https://en.wikipedia.org/wiki/Perceived_performance">Perceived performance</a> is a measure of how fast something <strong>feels</strong> to the user. The idea is that users are more patient and will think of a system as faster, if they know what’s going on and can anticipate content before it’s actually there. It’s a lot about managing expectations, and keeping the user informed.</p>
<p>For a web app, this concept might include displaying “mockups” of text, images or other content elements - called <strong>skeleton screens</strong> 💀. You can find these in the wild, used by companies like Facebook, Google, Slack and others:</p>
<figure>
  <img src="https://mxb.dev/blog/css-skeleton-screens/slack-skeleton.jpg" alt="Slack desktop app using skeleton screens while loading" />
  <figcaption>Holy moly to you too, Slack.</figcaption>
</figure>
<h2 id="h-an-example"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-an-example" aria-hidden="true">#</a> An Example</h2>
<p>Say you are building a web app. It’s a travel-advice kind of thing where people can share their trips and recommend places, so your main piece of content might look something like this:</p>
<p><img src="https://mxb.dev/blog/css-skeleton-screens/card.png" alt="card UI of a travel blog post" /></p>
<p>You can take that card and reduce it down to its basic visual shapes, the <em>skeleton</em> of the UI component.</p>
<p><img src="https://mxb.dev/blog/css-skeleton-screens/card-skeleton.png" alt="skeleton version of the same card, outlined in gray rectangles" /></p>
<p>Whenever someone requests new content from the server, you can immediately start showing the skeleton, while data is being loaded in the background. Once the content is ready, simply swap the skeleton for the actual card. This can be done with plain vanilla Javascript, or using a library like React.</p>
<p>Now you could use an image to display the skeleton, but that would introduce an additional request and data overhead. We’re already loading stuff here, so it’s not a great idea to wait for another image to load first. Plus it’s not responsive, and if we ever decided to adjust some of the content card’s styling, we would have to duplicate the changes to the skeleton image so they’d match again. 😒 Meh.</p>
<p>A better solution is to create the whole thing with just CSS. No extra requests, minimal overhead, not even any additional markup. And we can build it in a way that makes changing the design later much easier.</p>
<h2 id="h-drawing-skeletons-in-css"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-drawing-skeletons-in-css" aria-hidden="true">#</a> Drawing Skeletons in CSS</h2>
<p>First, we need to draw the basic shapes that will make up the card skeleton. We can do this by adding different <a href="https://www.w3schools.com/cssref/func_linear-gradient.asp">gradients</a> to the <code>background-image</code> property. By default, linear gradients run from top to bottom, with different color stop transitions. If we just define one color stop and leave the rest transparent, we can draw shapes.</p>
<p>Keep in mind that multiple background-images are stacked on top of each other here, so the order is important. The last gradient definition will be in the back, the first at the front.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.skeleton</span> <span class="token punctuation">{</span><br />  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><br />  <span class="token property">background-image</span><span class="token punctuation">:</span> <br />    <span class="token comment">/* layer 2: avatar */</span><br />    <span class="token comment">/* white circle with 16px radius */</span><br />    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle 16px<span class="token punctuation">,</span> white 99%<span class="token punctuation">,</span> transparent 0<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token comment">/* layer 1: title */</span><br />    <span class="token comment">/* white rectangle with 40px height */</span><br />    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>white 40px<span class="token punctuation">,</span> transparent 0<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token comment">/* layer 0: card bg */</span><br />    <span class="token comment">/* gray rectangle that covers whole element */</span><br />    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>gray 100%<span class="token punctuation">,</span> transparent 0<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>These shapes stretch to fill the entire space, just like regular block-level elements. If we want to change that, we’ll have to define explicit dimensions for them. The value pairs in <code>background-size</code> set the width and height of each layer, keeping the same order we used in <code>background-image</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.skeleton</span> <span class="token punctuation">{</span><br />  <span class="token property">background-size</span><span class="token punctuation">:</span><br />    32px 32px<span class="token punctuation">,</span>  <span class="token comment">/* avatar */</span><br />    200px 40px<span class="token punctuation">,</span> <span class="token comment">/* title */</span><br />    100% 100%<span class="token punctuation">;</span>  <span class="token comment">/* card bg */</span><br /><span class="token punctuation">}</span></code></pre>
<p>The last step is to position the elements on the card. This works just like <code>position:absolute</code>, with values  representing the <code>left</code> and <code>top</code> property. We can for example simulate a padding of 24px for the avatar and title, to match the look of the real content card.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.skeleton</span> <span class="token punctuation">{</span><br />  <span class="token property">background-position</span><span class="token punctuation">:</span><br />    24px 24px<span class="token punctuation">,</span>  <span class="token comment">/* avatar */</span><br />    24px 200px<span class="token punctuation">,</span> <span class="token comment">/* title */</span><br />    0 0<span class="token punctuation">;</span>        <span class="token comment">/* card bg */</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-break-it-up-with-custom-properties"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-break-it-up-with-custom-properties" aria-hidden="true">#</a> Break it up with Custom Properties</h2>
<p>This works well in a simple example - but if we want to build something just a little more complex, the CSS quickly gets messy and very hard to read. If another developer was handed that code, they would have no idea where all those magic numbers are coming from. Maintaining it would surely suck.</p>
<p>Thankfully, we can now use <a href="https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/">custom CSS properties</a> to write the skeleton styles in a much more concise, developer-friendly way - and even take the relationship between different values into account:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.skeleton</span> <span class="token punctuation">{</span><br />  <span class="token comment">/*<br />    define as separate properties<br />  */</span><br />  <span class="token property">--card-height</span><span class="token punctuation">:</span> 340px<span class="token punctuation">;</span><br />  <span class="token property">--card-padding</span><span class="token punctuation">:</span>24px<span class="token punctuation">;</span><br />  <span class="token property">--card-skeleton</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>gray <span class="token function">var</span><span class="token punctuation">(</span>--card-height<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent 0<span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <br />  <span class="token property">--title-height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span><br />  <span class="token property">--title-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><br />  <span class="token property">--title-position</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--card-padding<span class="token punctuation">)</span> 180px<span class="token punctuation">;</span><br />  <span class="token property">--title-skeleton</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>white <span class="token function">var</span><span class="token punctuation">(</span>--title-height<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent 0<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />  <span class="token property">--avatar-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span><br />  <span class="token property">--avatar-position</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--card-padding<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--card-padding<span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token property">--avatar-skeleton</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span><br />    circle <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--avatar-size<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">,</span> <br />    white 99%<span class="token punctuation">,</span> <br />    transparent 0<br />  <span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />  <span class="token comment">/* <br />    now we can break the background up <br />    into individual shapes <br />  */</span><br />  <span class="token property">background-image</span><span class="token punctuation">:</span> <br />    <span class="token function">var</span><span class="token punctuation">(</span>--avatar-skeleton<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--title-skeleton<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--card-skeleton<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />  <span class="token property">background-size</span><span class="token punctuation">:</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--avatar-size<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--title-width<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--title-height<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    100% 100%<span class="token punctuation">;</span><br /><br />  <span class="token property">background-position</span><span class="token punctuation">:</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--avatar-position<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    <span class="token function">var</span><span class="token punctuation">(</span>--title-position<span class="token punctuation">)</span><span class="token punctuation">,</span><br />    0 0<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>Not only is this a lot more readable, it’s also way easier to change some of the values later on.<br />
Plus we can use some of the variables (think <code>--avatar-size</code>, <code>--card-padding</code>, etc.) to define the styles for the actual card and always keep it in sync with the skeleton version.</p>
<p>Adding a media query to adjust parts of the skeleton at different breakpoints is now also quite simple:</p>
<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 47em<span class="token punctuation">)</span></span><span class="token punctuation">{</span><br />  <span class="token selector">:root</span> <span class="token punctuation">{</span><br />    <span class="token property">--card-padding</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span><br />    <span class="token property">--card-height</span><span class="token punctuation">:</span> 360px<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>Caveat: <a href="http://caniuse.com/#feat=css-variables">Browser support</a> for custom properties is good, but not at 100%. Basically all modern browsers have support, with IE/Edge a bit late to the party. For this specific usecase, it would be easy to add a fallback using Sass variables though.</p>
<h2 id="h-add-animation"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-add-animation" aria-hidden="true">#</a> Add Animation</h2>
<p>To make this even better, we can animate our skeleton and make it look more like a loading indicator. All we need to do is put a new gradient on the top layer and then animate its position with <code>@keyframes</code>.</p>
<p>Here’s a full example of how the finished skeleton card could look:</p>
<div class="extend">
  <p data-height="450" data-theme-id="dark" data-slug-hash="EvmLVp" data-default-tab="css,result" data-user="mxbck" data-embed-version="2" data-pen-title="Skeleton Loading Card" class="codepen">
  <a href="https://codepen.io/mxbck/pen/EvmLVp/">Skeleton Loading Card</a> by Max Böck (<a href="https://codepen.io/mxbck">@mxbck</a>) on <a href="https://codepen.io/">CodePen</a>.</p>
  <script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
</div>
<p>💡 Pro Tip: You can use the <code>:empty</code> selector and a pseudo element to draw the skeleton, so it only applies to empty card elements. Once the content is injected, the skeleton screen will automatically disappear.</p>
<h2 id="h-more-on-designing-for-performance"><a class="heading-anchor" href="https://mxb.dev/blog/css-skeleton-screens/#h-more-on-designing-for-performance" aria-hidden="true">#</a> More on Designing for Performance</h2>
<p>For a closer look at designing for perceived performance, check out these links:</p>
<ul>
<li>Designer VS. Developer #8: <a href="https://www.youtube.com/watch?v=551nfxay-M4">Designing for Great Performance</a></li>
<li>Harry Roberts: <a href="https://csswizardry.com/2016/10/improving-perceived-performance-with-multiple-background-images/">Improving Perceived Performance with Multiple Background Images</a></li>
<li>Sitepoint: <a href="https://www.sitepoint.com/a-designers-guide-to-fast-websites-and-perceived-performance/">A Designer’s Guide to Perceived Performance</a></li>
<li>Manuel Wieser: <a href="https://manu.ninja/dominant-colors-for-lazy-loading-images">Dominant Color Lazy Loading</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Offline-Friendly Forms</title>
            <link href="https://mxb.dev/blog/offline-forms/"/>
            <updated>2017-08-23T00:00:00Z</updated>
            <id>https://mxb.dev/blog/offline-forms/</id>
            <content type="html"><![CDATA[
                <p class="lead">Forms on the web don't usually play nice with bad connections. If you try to submit a form while offline, you'll most likely just lose your input. Here's how we might fix that.</p>
<p><small>TL;DR: Here’s the <a href="https://codepen.io/mxbck/pen/ayYGGO/" target="_blank">CodePen Demo</a> of this post.</small></p>
<p>With the introduction of Service Workers, developers are now able to supply experiences on the web that will work even without an internet connection. While it’s relatively easy to cache static resources, things like forms that require server interaction are harder to optimize. It is possible to provide a somewhat useful offline fallback though.</p>
<p>First, we have to set up a new class for our offline-friendly forms. We’ll save a few properties of the <code>&lt;form&gt;</code> element and then attach a function to fire on submit:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">OfflineForm</span> <span class="token punctuation">{</span><br />  <span class="token comment">// setup the instance.</span><br />  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> form<span class="token punctuation">.</span>id<span class="token punctuation">;</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> form<span class="token punctuation">.</span>action<span class="token punctuation">;</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><br />    <br />    form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>In the submit handler, we can include a simple connectivity check using the <code>navigator.onLine</code> property. <a href="http://caniuse.com/online-status/embed/">Browser support for it</a> is great across the board, and it’s trivial to implement.</p>
<p>⚠️ There is however a <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine">possibility of false positives</a> with it, as the property can only detect if the client is connected to a network, not if there’s actual internet access. A <code>false</code> value on the other hand can be trusted to mean “offline” with relative certainty. So it’s best to check for that, instead of the other way around.</p>
<p>If a user is currently offline, we’ll hold off submitting the form for now and instead store the data locally.</p>
<pre class="language-js"><code class="language-js"><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token comment">// parse form inputs into data object.</span><br />  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <br />  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token comment">// user is offline, store data on device.</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">storeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br />    <span class="token comment">// user is online, send data via ajax.</span><br />    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-storing-the-form-input"><a class="heading-anchor" href="https://mxb.dev/blog/offline-forms/#h-storing-the-form-input" aria-hidden="true">#</a> Storing the Form Input</h2>
<p>There are <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">a few different options</a> on how to store arbitrary data on the user’s device. Depending on your data, you could use <code>sessionStorage</code> if you don’t want the local copy to persist in memory. For our example, let’s go with <code>localStorage</code>.</p>
<p>We can timestamp the form data, put it into a new object and then save it using <code>localStorage.setItem</code>. This method takes two arguments: a <strong>key</strong> (the form id) and a <strong>value</strong> (the JSON string of our data).</p>
<pre class="language-js"><code class="language-js"><span class="token function">storeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token comment">// check if localStorage is available.</span><br />  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Storage <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">{</span><br />      <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><br />      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span><br />    <span class="token punctuation">}</span><span class="token punctuation">;</span><br />    <span class="token comment">// save data as JSON string.</span><br />    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p><em>Hint: You can check the storage in Chrome’s devtools under the “Application” tab. If everything went as planned, you should see something like this:</em></p>
<figure class="extend">
  <img src="https://mxb.dev/blog/offline-forms/devtools.png" alt="chrome devtools showing the localstorage contents" />
</figure>
<p>It’s also a good idea to inform the user of what happened, so they know that their data wasn’t just lost.<br />
We could extend the <code>handleSubmit</code> function to display some kind of feedback message.</p>
<figure>
  <img src="https://mxb.dev/blog/offline-forms/message.png" alt="feedback message explaining the offline state" />
  <figcaption>How thoughtful of you, form!</figcaption>
</figure>
<h2 id="h-checking-for-saved-data"><a class="heading-anchor" href="https://mxb.dev/blog/offline-forms/#h-checking-for-saved-data" aria-hidden="true">#</a> Checking for Saved Data</h2>
<p>Once the user comes back online, we want to check if there’s any stored submissions. We can listen to the <code>online</code> event to catch connection changes, and to the <code>load</code> event in case the page is refreshed:</p>
<pre class="language-js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />  <span class="token operator">...</span><br />  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>When these events fire, we’ll simply look for an entry in the storage matching our form’s id. Depending on what type of data the form represents, we can also add an “expiry date” check that will only allow submissions below a certain age. This might be useful if we only want to optimize for temporary connectivity problems, and prevent users from accidentally submitting data they entered two months ago.</p>
<pre class="language-js"><code class="language-js"><span class="token function">checkStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Storage <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token comment">// check if we have saved data in localStorage.</span><br />    <span class="token keyword">const</span> item <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token keyword">const</span> entry <span class="token operator">=</span> item <span class="token operator">&amp;&amp;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />      <span class="token comment">// discard submissions older than one day. (optional)</span><br />      <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />      <span class="token keyword">const</span> day <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><br />      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> day <span class="token operator">></span> entry<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><br />        <span class="token keyword">return</span><span class="token punctuation">;</span><br />      <span class="token punctuation">}</span><br /><br />      <span class="token comment">// we have valid form data, try to submit it.</span><br />      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> entry<span class="token punctuation">.</span>data<span class="token punctuation">;</span><br />      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>The last step would be to remove the data from <code>localStorage</code> once we have successfully sent it, to avoid multiple submissions. Assuming an ajax form, we can do this as soon as we get a successful response back from the server. We can simply use the storage object’s <code>removeItem()</code> method here.</p>
<pre class="language-js"><code class="language-js"><span class="token function">sendData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token comment">// send ajax request to server</span><br />  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />        <span class="token comment">// remove stored data on success</span><br />        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><br />      <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>If you dont want to use ajax to send your form submission, another solution would be to just repopulate the form fields with the stored data, then calling <code>form.submit()</code> or have the user press the button themselves.</p>
<p>☝️ <em>Note: I’ve omitted some other parts like form validation and security tokens in this demo to keep it short, obviously these would have to be implemented in a real production-ready thing. Dealing with sensitive data is another issue here, as you should not store stuff like passwords or credit card data unencrypted locally.</em></p>
<p>If you’re interested, check out the full example on CodePen:</p>
<div class="extend" id="codepen-demo">
  <p data-height="450" data-theme-id="dark" data-slug-hash="ayYGGO" data-default-tab="js,result" data-user="mxbck" data-embed-version="2" data-pen-title="Offline Form" class="codepen"><a href="https://codepen.io/mxbck/pen/ayYGGO/">Offline Form</a> by Max Böck on CodePen.</p>
  <script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
</div>
            ]]></content>
        </entry>
        <entry>
            <title>You&#39;re Offline</title>
            <link href="https://mxb.dev/blog/youre-offline/"/>
            <updated>2017-07-12T00:00:00Z</updated>
            <id>https://mxb.dev/blog/youre-offline/</id>
            <content type="html"><![CDATA[
                <figure>
  <img src="https://mxb.dev/blog/youre-offline/notification-sample.jpg" alt="" />
</figure>
<p class="lead">A truly responsive website should adapt to all kinds of situations. Besides different viewport sizes, there are other factors to consider. A change in connectivity is one of them.</p>
<p>Earlier this week, I was sitting in a train on my way to speak at a local meetup. InterCity trains in Austria all have WIFI now, so I was doing some last-minute work on my slides online. Train WIFI being what it is though, the network wasn’t exactly reliable. The connection kept dropping everytime we went through a tunnel or too many passengers were logged on.</p>
<p>This is quite a common scenario. People are on the move, network coverage can be poor, internet connections fail. Luckily, we can prepare our websites for this and make them more resilient by <a href="https://bitsofco.de/bitsofcode-pwa-part-1-offline-first-with-service-worker/">building them offline-first</a>.</p>
<p>Offline support is awesome, however your users might not be aware of these capabilites - and they shouldn’t have to be. In some cases they might not even know that they’ve gone offline. That’s why it’s important to communicate what’s going on.</p>
<p>Chances are not <strong>every</strong> part of your site will work offline. Certain things may not be cached, others may require server interaction. This is fine of course, but the interface should reflect that. Just like a responsive layout adapts to changes in viewport size, your offline-optimized site should adapt to changes in connectivity.</p>
<h2 id="h-checking-for-offline"><a class="heading-anchor" href="https://mxb.dev/blog/youre-offline/#h-checking-for-offline" aria-hidden="true">#</a> Checking for Offline</h2>
<p>The key ingredients here are the <code>offline</code> event and the <code>navigator.onLine</code> property. By combining them, we can check for network changes and react accordingly.</p>
<p>Here’s an example of a simple connectivity check:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">let</span> isOffline <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br />window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> checkConnectivity<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><br /><span class="token comment">// when the page has finished loading,</span><br /><span class="token comment">// listen for future changes in connection</span><br /><span class="token keyword">function</span> <span class="token function">checkConnectivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span> updateStatus<span class="token punctuation">)</span><span class="token punctuation">;</span><br />  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'offline'</span><span class="token punctuation">,</span> updateStatus<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token comment">// check if we're online, set a class on &lt;html> if not</span><br /><span class="token keyword">function</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> navigator<span class="token punctuation">.</span>onLine <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />    isOffline <span class="token operator">=</span> <span class="token operator">!</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">;</span><br />    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'is-offline'</span><span class="token punctuation">,</span> isOffline<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token operator">...</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>⚠️ Note: With the <code>online</code> event, there’s a slight possibility of false positives: A user might be connected to a network (which is interpreted as being online), but something higher up might block actual internet access. The <code>offline</code> event is a bit more reliable, in the sense that an “offline” user can be expected <strong>NOT</strong> to have access.</p>
<h2 id="h-get-notified"><a class="heading-anchor" href="https://mxb.dev/blog/youre-offline/#h-get-notified" aria-hidden="true">#</a> Get Notified</h2>
<p>Now we want to display some kind of notification to offline users, so they know what’s going on. This can be done in a number of ways; however I would recommend using <code>aria-live</code> regions to make it accessible and have screen readers announce the connection change as well.</p>
<p>Using such a notification bar is pretty straightforward. First, define an element to display messages on your page:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- notification container --></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <br />  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notification<span class="token punctuation">"</span></span> <br />  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notification<span class="token punctuation">"</span></span> <br />  <span class="token attr-name">aria-live</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assertive<span class="token punctuation">"</span></span> <br />  <span class="token attr-name">aria-relevant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <br />  <span class="token attr-name">hidden</span><br /><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>The <code>aria-live</code> attribute tells screen readers to announce changes to this element. “assertive” means it will interrupt whatever it is currently announcing at the time and prioritize the new message. The <code>aria-relevant</code> tells it to listen for changes in the text content of the element.</p>
<p>You can extend the handler function from before to populate the notification area whenever you detect that a user has gone offline:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token operator">...</span><br />  <span class="token keyword">const</span> notification <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#notification'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOffline<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    notification<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'You appear to be offline right now.'</span><span class="token punctuation">;</span><br />    notification<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'hidden'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><br />    notification<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><br />    notification<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'hidden'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>This is a very simple implementation - you can of course always get a bit fancier with an animated notification bar (or “toast message”). There are also some nice <a href="https://getmdl.io/components/index.html#snackbar-section">pre-made components</a> for this.</p>
<p>If you’re reading this on <a href="https://mxb.at/">my site</a>, you can see a version of these notifications in action if you simply switch off your WIFI for a second.<br />
Go ahead, I’ll wait.</p>
<p>If you’re somewhere else or your browser doesn’t support service worker / offline events, here’s how this could look:</p>
<div class="extend" style="margin-top:2rem;">
  <video poster="https://mxb.dev/blog/youre-offline/offline-notification.png" width="944" height="528" alt="Offline Notification" controls="">
    <source src="https://mxb.dev/blog/youre-offline/offline-notification.webm" type="video/webm" />
    <source src="https://mxb.dev/blog/youre-offline/offline-notification.mp4" type="video/mp4" />
  </video>
</div>
<h2 id="h-telling-the-user-what%E2%80%99s-available"><a class="heading-anchor" href="https://mxb.dev/blog/youre-offline/#h-telling-the-user-what%E2%80%99s-available" aria-hidden="true">#</a> Telling the User what’s available</h2>
<p>Notifications are a good start, but it would be even nicer if we could give the user some visual indication of which parts they can actually use offline, and which not.</p>
<p>To do this, we can loop over all the links on page load and check their <code>href</code> against the cache. If they point to a cached resource (e.g. will work offline), they get a special class.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a[href]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />  caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">ignoreSearch</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />      link<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'is-cached'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><br />  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Once the <code>offline</code> event fires, we toggle a class on the body and visually disable all links that aren’t cached. This should only apply to URLs, so we can ignore <code>tel:</code>, <code>mailto:</code> and anchor links.</p>
<pre class="language-scss"><code class="language-scss"><span class="token selector">.is-offline </span><span class="token punctuation">{</span><br />  <span class="token comment">/* disable all links to uncached pages */</span><br />  <span class="token property">a</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span>.is-cached<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    <span class="token property">cursor</span><span class="token punctuation">:</span>not-allowed<span class="token punctuation">;</span><br />    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><br />    <span class="token property">opacity</span><span class="token punctuation">:</span>.5<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <span class="token comment">/* ignore anchors, email and phone links */</span><br />  <span class="token selector">a[href^="#"],<br />  a[href^="mailto"],<br />  a[href^="tel"] </span><span class="token punctuation">{</span><br />    <span class="token property">cursor</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><br />    <span class="token property">pointer-events</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><br />    <span class="token property">opacity</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-offline-forms"><a class="heading-anchor" href="https://mxb.dev/blog/youre-offline/#h-offline-forms" aria-hidden="true">#</a> Offline Forms</h2>
<p>Another way we might use this is to prevent users from filling out forms. Most forms pass data to the server and require a connection to work, so they won’t be very useful when offline.</p>
<p>What’s worse is that users might not know there is a problem until it’s too late: imagine filling out a lengthy form and finally hitting the submit button, only to find a network connection error page and all your inputs gone. That’s frustrating.</p>
<pre class="language-scss"><code class="language-scss"><span class="token comment">/* Disable Forms when offline */</span><br /><span class="token selector">.is-offline form </span><span class="token punctuation">{</span><br />  <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><br />  <span class="token property">opacity</span><span class="token punctuation">:</span>.65<span class="token punctuation">;</span><br />  <span class="token property">cursor</span><span class="token punctuation">:</span>not-allowed<span class="token punctuation">;</span><br />  <span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><br />  <br />  <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">{</span><br />    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'Sorry, you\'re offline.'</span><span class="token punctuation">;</span><br />    <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><br />    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><br />    <span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><br />    <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><br />    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token property">color</span><span class="token punctuation">:</span>#FFFFFF<span class="token punctuation">;</span><br />    <span class="token property">background-color</span><span class="token punctuation">:</span>#2D2D2D<span class="token punctuation">;</span><br />    <span class="token property">padding</span><span class="token punctuation">:</span>1rem 2rem<span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<figure>
  <img src="https://mxb.dev/blog/youre-offline/form-offline.jpg" alt="a disabled form with the words 'sorry, youre offline' in a box on top" />
  <figcaption>No contact forms in offline country.</figcaption>
</figure>
<p>That effectively disables every form on the page, indicating that this functionality is currently not available. Depending on what your form does, you might also consider applying these styles just to the submit button - that way a user could pre-fill the form (possibly even have it validated in JS), and then submit it once they come back online.</p>
<p>If you’re doing this, remember to suppress “submit on enter” as well, and make sure the user knows why submitting won’t work at the moment.</p>
<p><strong>UPDATE:</strong> I found a better way to handle this - by storing form submissions in <code>localStorage</code> and then checking for them once the connection comes back online. Read about it in <a href="https://mxb.at/blog/offline-forms/">“Offline-Friendly Forms”</a>.</p>
<h2 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/youre-offline/#h-further-reading" aria-hidden="true">#</a> Further Reading</h2>
<ul>
<li>Intro: <a href="http://offlinefirst.org/">OfflineFirst.org</a></li>
<li>Google Developers: <a href="https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/offline-for-pwa">Offline Storage</a></li>
<li>Jake Archibald at I/O 2016: <a href="https://www.youtube.com/watch?v=cmGr0RszHc8">Building offline-first PWAs</a> (Video)</li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>How to turn your website into a PWA</title>
            <link href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/"/>
            <updated>2017-07-07T00:00:00Z</updated>
            <id>https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/</id>
            <content type="html"><![CDATA[
                <p class="lead">A Progressive Web App, or PWA, uses modern web capabilities to deliver an app-like user experience. Any website can be a PWA - here's how to do it.</p>
<figure style="text-align:center">
  <img src="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/install.jpg" alt="" />
  <figcaption>The "add to homescreen" prompt in a PWA</figcaption>    
</figure>
<p>Turning a basic website into a PWA is not that hard and has a lot of real benefits, so I want to take a look at the three main steps necessary to achieve just that.</p>
<p>But first, let me address some common misconceptions:</p>
<p><strong>1) Your thing does not have to be an “Application” to be a PWA.</strong><br /><br />
A Progressive Web App can easily be a blog, a marketing site, a shop or a collection of cat memes. At its core, a PWA is just a way to optimize your code for better, faster delivery. You can -and should- take advantage of these new possibilites, regardless of your content.</p>
<p><em>Side note: the term “Application” in PWA is <a href="https://adactio.com/journal/12461">heavily debated</a>, since some people feel it communicates the wrong idea. IMHO, its just a name - and these days it’s hard to define the difference between websites and “web apps” anyway.</em></p>
<p><strong>2) Your thing does not have to be a Javascript-powered single page app.</strong><br /><br />
Again, if you’re not running a cutting edge React-Redux <abbr title="Single Page Application">SPA</abbr>, that’s no reason to shy away from using this technology. My own site is just a <a href="https://github.com/maxboeck/mxb">bunch of static HTML</a> based on Jekyll, and it’s still a perfectly valid Progressive Web App. If you run something on the web, it can benefit.</p>
<p><strong>3) PWAs are not specifically made for Google or Android.</strong><br /><br />
The beauty of it is that PWAs offer the best of both worlds - deep linking and URLs from the www, offline access, push notifications and more from native apps - while still staying completely platform-independent. No app stores, no separate iOS / Android codebases, just the web.</p>
<p><strong>4) PWAs are ready and safe to use today.</strong><br /><br />
Jup, the “P” stands for progressive, meaning everything about it can be viewed as an extra layer of enhancement. If an older browser does not support it, it will not break; it just falls back to the default: a regular website.</p>
<h2 id="h-ok-so-why-should-i-do-this%3F"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-ok-so-why-should-i-do-this%3F" aria-hidden="true">#</a> OK, So why should I do this?</h2>
<p>Turning your website into a PWA offers some serious advantages:</p>
<ul>
<li>A faster, more secure user experience</li>
<li>A better Google ranking</li>
<li>Better usability</li>
<li>Better performance</li>
<li>Offline access</li>
</ul>
<p>Even if you don’t expect your users to “install” your PWA (e.g. place a shortcut on their home screen),<br />
there is still a lot to be gained by making the switch. In fact, all of the steps necessary to make a PWA will actively improve your website and are widely considered best practice.</p>
<h2 id="h-step-1-the-manifest"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-step-1-the-manifest" aria-hidden="true">#</a> Step 1: The Manifest.</h2>
<p>A <em>manifest</em> is just a JSON file that describes all the meta data of your PWA. Things like the name, language and icon of your app go in there. This information will tell browsers how to display your app when it’s saved as a shortcut. It looks something like this:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span><br />  <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span><br />  <span class="token property">"dir"</span><span class="token operator">:</span> <span class="token string">"ltr"</span><span class="token punctuation">,</span><br />  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"This is my awesome PWA"</span><span class="token punctuation">,</span><br />  <span class="token property">"short_name"</span><span class="token operator">:</span> <span class="token string">"myPWA"</span><span class="token punctuation">,</span><br />  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">[</span><br />    <span class="token punctuation">{</span><br />      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"\/assets\/images\/touch\/android-chrome-192x192.png"</span><span class="token punctuation">,</span><br />      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span><br />      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image\/png"</span><br />    <span class="token punctuation">}</span><br />  <span class="token punctuation">]</span><span class="token punctuation">,</span><br />  <span class="token property">"theme_color"</span><span class="token operator">:</span> <span class="token string">"#1a1a1a"</span><span class="token punctuation">,</span><br />  <span class="token property">"background_color"</span><span class="token operator">:</span> <span class="token string">"#1a1a1a"</span><span class="token punctuation">,</span><br />  <span class="token property">"start_url"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span><br />  <span class="token property">"display"</span><span class="token operator">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span><br />  <span class="token property">"orientation"</span><span class="token operator">:</span> <span class="token string">"natural"</span><br /><span class="token punctuation">}</span></code></pre>
<p>This is usually called “manifest.json”, and linked to from the <code>&lt;head&gt;</code> of your site:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p><strong>Tip:</strong> You don't have to write that file yourself. There are different icon sizes for different systems, and getting everything right can be tedious. Instead, just make one 500x500 image of your app icon (probably your logo), and head over to <a href="http://realfavicongenerator.net/">Real Favicon Generator</a>. They render all common sizes, provide meta tags and generate a manifest file for you. It's awesome.</p></div></div>
<h2 id="h-step-2-go-https"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-step-2-go-https" aria-hidden="true">#</a> Step 2: Go HTTPS.</h2>
<p>Progressive Web Apps need to be served over a secure connection, so the <strong>HTTPS protocol</strong> is the way to go. HTTPS encrypts the data users send to your server and prevents intruders from tampering with their connection. As of recently, Google also heavily favors sites on HTTPS and ranks them higher than non-secure competitors.</p>
<p>To switch to HTTPS, you will need an SSL certificate from a trusted authority. How to get them depends on your hosting situation, but generally there are two common ways to do it:</p>
<p>👉 If you operate <strong>your own server</strong> or have root access to one, check out <a href="https://letsencrypt.org/">LetsEncrypt</a>. It’s a free, open and straightforward certificate authority that allows anyone to start using HTTPS. It’s quite easy to set up and is just as trusted as other authorities.</p>
<p>👉 If you’re on <strong>shared hosting</strong>, a lot of providers unfortunately won’t allow you the level of control you need to use LetsEncrypt. Instead, they usually offer SSL certificates for a monthly or annual fee. If you’re unsure how to get a cert, contact your hosting provider.</p>
<p>After you obtained a certificate, there might be some adjustments you need to make to your code so that all resources are fetched on a secure line. For more information about the process, read <a href="https://www.keycdn.com/blog/http-to-https/">this detailed guide from keyCDN</a> or check out <a href="https://css-tricks.com/moving-to-https-on-wordpress/">Chris Coyier’s article</a> if you want to migrate a WordPress site.</p>
<p>If everything goes as planned, you’ll be rewarded with a nice green lock icon next to your URL:</p>
<p><img src="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/lock-icon.png" alt="HTTPS lock icon" /></p>
<h2 id="h-step-3-the-service-worker"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-step-3-the-service-worker" aria-hidden="true">#</a> Step 3: The Service Worker.</h2>
<p>This is where the magic happens. A Service Worker is essentially a piece of Javascript that acts as a middleman between browser and host. It automatically installs itself in supported browsers, can intercept requests made to your site, and respond to them in different ways.</p>
<p>You can set up a new SW by simply creating a Javascript file at the root directory of your project. Let’s call it <code>sw.js</code>. The contents of that file depend on what you want to achieve - we’ll get to that in a second.</p>
<p>To let the browser know we intend to use this file as a Service Worker, we need to register it first. In your site’s main script, include a function like this:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br />  <span class="token comment">// register sw script in supporting browsers</span><br />  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span><br />    navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'sw.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Service Worker registered successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Service Worker registration failed:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>The <code>scope</code> parameter defines which requests the SW should be able to intercept. It’s a relative path to the domain root. For example, if you were to set this to <code>/articles</code>, you could control requests to <code>yourdomain.com/articles/my-post</code> but not to <code>yourdomain.com/contact</code>.</p>
<h3 id="h-offline-is-the-new-black"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-offline-is-the-new-black" aria-hidden="true">#</a> Offline is the new black</h3>
<p>There is a number of cool things you can do with Service Workers. One of them is the ability to cache your content, store it locally, and thus make it available when the user is offline. Even if they are online, this will have a huge impact on page loading time, since requests can just bypass the network completely and assets are instantly available.</p>
<p>Other than with traditional browser caching, you can define a list of resources to cache when the worker is installed - so a user does not have to navigate to a page first for it to be cached. Here’s how that might look:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">// sw.js</span><br />self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br /> e<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span><br />   <span class="token comment">// after the service worker is installed,</span><br />   <span class="token comment">// open a new cache</span><br />   caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'my-pwa-cache'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">cache</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />     <span class="token comment">// add all URLs of resources we want to cache</span><br />     <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><br />       <span class="token string">'/'</span><span class="token punctuation">,</span><br />       <span class="token string">'/index.html'</span><span class="token punctuation">,</span><br />       <span class="token string">'/about.html'</span><span class="token punctuation">,</span><br />       <span class="token string">'/images/doggo.jpg'</span><span class="token punctuation">,</span><br />       <span class="token string">'/styles/main.min.css'</span><span class="token punctuation">,</span><br />       <span class="token string">'/scripts/main.min.js'</span><span class="token punctuation">,</span><br />     <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />   <span class="token punctuation">}</span><span class="token punctuation">)</span><br /> <span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<div class="callout callout--tip"><span class="callout__icon"><svg class="icon icon--lightbulb" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-lightbulb"></use></svg></span><div class="callout__content"><p><strong>Tip:</strong> If you want to get started with offline-first quickly, I'd highly recommend using <a href="https://github.com/GoogleChrome/sw-precache">sw-precache</a>. This is a tool made by the folks at Google that integrates with your existing Gulp or Grunt build process to <strong>generate the service worker file for you.</strong></p></div></div>
<p>You can simply pass it a list of files and it will automatically track all changes, and keep your Service Worker cache up to date. Because <code>sw-precache</code> integrates into your site’s build process, you can use wildcards to precache <em>all</em> of the resources that match a specific pattern, like so:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">import</span> gulp <span class="token keyword">from</span> <span class="token string">'gulp'</span><span class="token punctuation">;</span><br /><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><br /><span class="token keyword">import</span> swPrecache <span class="token keyword">from</span> <span class="token string">'sw-precache'</span><span class="token punctuation">;</span><br /><br /><span class="token keyword">const</span> rootDir <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span><br /><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'generate-service-worker'</span><span class="token punctuation">,</span> <span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />  swPrecache<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> <span class="token string">'sw.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><br />    <span class="token literal-property property">staticFileGlobs</span><span class="token operator">:</span> <span class="token punctuation">[</span><br />      <span class="token comment">// track and cache all files that match this pattern</span><br />      rootDir <span class="token operator">+</span> <span class="token string">'/**/*.{js,html,css,png,jpg,gif}'</span><span class="token punctuation">,</span><br />    <span class="token punctuation">]</span><span class="token punctuation">,</span><br />    <span class="token literal-property property">stripPrefix</span><span class="token operator">:</span> rootDir<br />  <span class="token punctuation">}</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Run this task in your build, and you’ll never have to worry about cache invalidation again!<br />
For smaller, mostly static sites, you can have it precache every image, HTML, JavaScript, and CSS file. For sites with lots of dynamic content, or many large images that aren’t always needed, precaching a “skeleton” subset of your site often makes the most sense.</p>
<p><em>PS: For a deeper look into the subject of offline support, be sure to check out <a href="https://jakearchibald.com/2014/offline-cookbook/">“The Offline Cookbook”</a> by Jake Archibald.</em></p>
<aside class="signup js-signup-widget" data-nosnippet=""><div class="signup__front"><h2 class="signup__title">By the way...</h2><div class="signup__desc">I'm running an email list for people interested in modern front-end development! If you enjoy that kind of stuff, you can join here and I'll notify you whenever I publish a new post. No strings attached, unsubscribe anytime.</div><div class="signup__form"><form action="https://dev.us18.list-manage.com/subscribe/post" method="POST" class="form form--signup"><div class="form__body"><input type="hidden" name="u" value="64781452976687d0f4f2ea370" /> <input type="hidden" name="id" value="772b9208b5" /> <input type="hidden" name="SOURCE" value="/blog/how-to-turn-your-website-into-a-pwa/" /><div class="form__fields"><p class="form__field"><label for="mce-FNAME" class="form__label">First Name (optional)</label> <input type="text" class="form__input" value="" name="FNAME" id="mce-FNAME" placeholder="Phil" /></p><p class="form__field"><label for="mce-EMAIL" class="form__label">Email Address</label> <input type="email" class="form__input" value="" name="EMAIL" id="mce-EMAIL" placeholder="phil@website.com" required="" /></p></div><div class="sr-only" aria-hidden="true"><input type="text" name="b_64781452976687d0f4f2ea370_772b9208b5" tabindex="-1" value="" /></div></div><div class="form__actions"><button type="submit" class="btn btn--primary" name="subscribe">Subscribe</button><div class="form__feedback js-signup-widget-feedback" hidden=""></div><div class="spinner"><div class="spinner__layercontainer"><div class="spinner__layer spinner__layer--1"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--2"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--3"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div><div class="spinner__layer spinner__layer--4"><div class="spinner__circle-clipper spinner__left"><div class="spinner__circle"></div></div><div class="spinner__gap-patch"><div class="spinner__circle"></div></div><div class="spinner__circle-clipper spinner__right"><div class="spinner__circle"></div></div></div></div></div></div></form></div></div><div class="signup__back js-signup-backside"></div><div class="signup__icon"><svg class="icon icon--check" role="img" aria-hidden="true" width="24" height="24"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/assets/icons/icons.sprite.svg#icon-check"></use></svg></div></aside>
<h2 id="h-testing-your-pwa"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-testing-your-pwa" aria-hidden="true">#</a> Testing your PWA</h2>
<p>The Chrome <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk">Lighthouse Extension</a> is a testing tool to check Progressive Web Apps for their Performance, Accessibility and compliance with the PWA spec.</p>
<p>It tests your site in different viewports and network speeds, measures time to first paint and other performance factors, and gives valueable advice for areas that still need improvement. It’s a really good benchmark for websites in general.</p>
<figure class="extend">
  <img src="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/lighthouse.png" alt="Google Lighthouse Report showing audits for PWA, Performance, Accessibility and Best Practices" />
  <figcaption>Lighthouse report for mxb.at</figcaption>
</figure>
<p>You can either install the Lighthouse extension in the <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk">Chrome Web Store</a> or use Chrome Canary, where it is included in the Devtools’ Audit tab by default.</p>
<h3 id="h-further-reading"><a class="heading-anchor" href="https://mxb.dev/blog/how-to-turn-your-website-into-a-pwa/#h-further-reading" aria-hidden="true">#</a> Further Reading</h3>
<p>Hopefully that gave you a quick overview on how to get started with PWAs. If you want to dive deeper, here are some good places to learn more:</p>
<ul>
<li>Google Developers: <a href="https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/">Your First Progressive Web App</a></li>
<li>Smashing Magazine: <a href="https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/">A beginner’s guide to PWAs</a></li>
<li>Free Udacity Course: <a href="https://www.udacity.com/course/intro-to-progressive-web-apps--ud811">Intro to Progressive Web Apps</a></li>
</ul>

            ]]></content>
        </entry>
        <entry>
            <title>Bottle Slider Wiggle Effect</title>
            <link href="https://mxb.dev/blog/bottle-slider-wiggle-effect/"/>
            <updated>2017-03-08T00:00:00Z</updated>
            <id>https://mxb.dev/blog/bottle-slider-wiggle-effect/</id>
            <content type="html"><![CDATA[
                <div class="extend">
  <video poster="https://mxb.dev/blog/bottle-slider-wiggle-effect/bottleslider-still.jpg" preload="" autoplay="autoplay" loop="loop" width="960" height="360">
    <source src="https://mxb.dev/blog/bottle-slider-wiggle-effect/bottleslider.webm" type="video/webm" />
    <source src="https://mxb.dev/blog/bottle-slider-wiggle-effect/bottleslider.mp4" type="video/mp4" />
  </video>
</div>
<p class="lead">I built this product slider as part of a wine shop I was working on in 2015, and since it's also featured in a case study here on my site, I had a couple of people asking me how the animation was done.</p>
<p>Well, it’s really quite simple – so here’s a quick rundown on how to make the bottles dance. You can see the actual live thing in action on <a href="http://www.weingut-huber.at/product/gruener-veltliner-alte-setzen-erste-lage-2015/">one of the product pages here</a>. Grab some Grüner Veltliner while you’re at it.</p>
<h2 id="h-the-slider"><a class="heading-anchor" href="https://mxb.dev/blog/bottle-slider-wiggle-effect/#h-the-slider" aria-hidden="true">#</a> The Slider</h2>
<p>Markup is pretty straightforward, just your standard slider structure. A parent <code>div</code> and an <code>ul</code> with some list items. The real production version obviously has a little bit more going on, what with that fancy ratings popover and all. But for now, this should do the job:</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br /><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link/to/product<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_of_bottle.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br /><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slider__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><br /><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>To make this into a slider widget, you will need some CSS and a bit of Javascript. I used a jQuery plugin called <a href="https://github.com/woocommerce/FlexSlider">Flexslider</a> for this one, and I like it a lot. But almost any other slider would work too. The only important part for this effect is a callback function that gets triggered <strong>before</strong> each sliding transition.</p>
<p>Flexslider does exactly that with its <code>before</code> method. You pass it the <code>$slider</code> variable (the parent element), and then apply a class to it that later controls the animation state. After the animation has finished, we need to remove that class again. My wiggle lasts about a second, so I put in a <code>setTimeout</code> for that duration (plus a little more for good measure).</p>
<pre class="language-js"><code class="language-js">$slider<span class="token punctuation">.</span><span class="token function">flexslider</span><span class="token punctuation">(</span><span class="token punctuation">{</span><br />  <span class="token comment">//animation: 'slide',</span><br />  <span class="token comment">//selector: '.slider__item',</span><br />  <span class="token comment">//animationLoop: false,</span><br />  <span class="token comment">//slideshow: false,</span><br />  <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$slider</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />    $slider<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'slider--shaking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />      $slider<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'slider--shaking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="h-the-animation"><a class="heading-anchor" href="https://mxb.dev/blog/bottle-slider-wiggle-effect/#h-the-animation" aria-hidden="true">#</a> The Animation</h2>
<p>Next up is the actual CSS keyframe animation that makes the bottles swing from side to side. Mine looks like this:</p>
<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> wiggle</span> <span class="token punctuation">{</span><br />  <span class="token selector">25%</span>  <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 6deg<span class="token punctuation">)</span>  <span class="token punctuation">}</span><br />  <span class="token selector">50%</span>  <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> -4deg<span class="token punctuation">)</span> <span class="token punctuation">}</span><br />  <span class="token selector">75%</span>  <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 2deg<span class="token punctuation">)</span>  <span class="token punctuation">}</span><br />  <span class="token selector">100%</span> <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 0deg<span class="token punctuation">)</span>  <span class="token punctuation">}</span><br /><span class="token punctuation">}</span></code></pre>
<p>We tilt the items first right, then left, then right again, losing momentum in each turn to simulate the inertia a real bottle would have.<br />
The <code>rotate3d</code> is to force graphic acceleration, which makes for smoother animation performance. Also, be sure to include vendor prefixes for the transform - or, if you’re lazy like me, let <a href="https://www.npmjs.com/package/gulp-autoprefixer">Autoprefixr</a> do that for you.</p>
<p>The last step is to apply the keyframe animation to your slider every time it gets triggered.<br />
Two things are important here:</p>
<ol>
<li>
<p>define the <code>transform-origin</code> for each object. This will be the fixed point that anchors the animation, it corresponds to the center of gravity in the real world. For my bottles, that would be center bottom.</p>
</li>
<li>
<p>💡__PRO TIP:__ to make it seem more realistic, apply a little delay to every other bottle, so they dont all wiggle in unison. A small offset in timing does the trick.</p>
</li>
</ol>
<pre class="language-css"><code class="language-css"><span class="token selector">.slider--shaking .slider__item</span> <span class="token punctuation">{</span><br />  //disable hover effects while transitioning<br />  <span class="token property">pointer-events</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><br /><br />  //set up the wiggle animation<br />  <span class="token property">animation-name</span><span class="token punctuation">:</span> wiggle<span class="token punctuation">;</span><br />  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><br />  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><br /><br />  //set the <span class="token string">'fixed point'</span> of the animation<br />  <span class="token property">transform-origin</span><span class="token punctuation">:</span>bottom center<span class="token punctuation">;</span><br /><span class="token punctuation">}</span><br /><br /><span class="token selector">.slider--shaking .slider__item:nth-child(2n)</span> <span class="token punctuation">{</span><br />  //slightly offset every other item<br />  <span class="token property">animation-delay</span><span class="token punctuation">:</span>.1s<span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<p>Aaand you’re done! Not much to it, but makes for a nice touch and a cool thing to show off. 🍾</p>

            ]]></content>
        </entry>
        <entry>
            <title>Prototyping an App in Static HTML</title>
            <link href="https://mxb.dev/blog/prototyping-app-with-static-html/"/>
            <updated>2017-02-06T00:00:00Z</updated>
            <id>https://mxb.dev/blog/prototyping-app-with-static-html/</id>
            <content type="html"><![CDATA[
                <p class="lead">I recently worked on a larger new web app. The product was in its early stages, so one of the first big tasks was to come up with a prototype for the UI design.</p>
<p>I started doing some pen-and-paper mockups and some concepts in Sketch, but the project details weren’t clearly defined yet, and things would change very frequently. I had to redo a lot of components or modify them often to reflect changes I’ve made somewhere else. It didn’t feel efficient.</p>
<p>Essentially, I was just drawing pictures of an interface. A pixel canvas simply wasn’t the right medium for this.</p>
<p>So I decided to design in the browser and make a clickable dummy that I could use to rapidly prototype the UI. I wanted a way to try new directions and change stuff quickly, without having to do the same tasks over and over again.</p>
<p>I opted for simple static HTML.</p>
<p>Since the end product was going to be built in React, I though about how to best get into a workflow that matched a component-based architecture, and design elements accordingly right from the start. This approach also had some other benefits that I discovered while refining <a href="https://github.com/maxboeck/static-prototype-kit">my setup</a>:</p>
<ul>
<li><strong>Thinking in Components</strong><br />
<br />Prototyping an application as sort of a LEGO set of individual chunks of HTML forces you to think about the building blocks early on. As every component has to be self-contained, you start to see patterns and abstractions in an interface clearer.<br />
<br /><br /></li>
<li><strong>Design with real data</strong><br />
<br /><a href="https://mxb.dev/blog/prototyping-app-with-static-html/#using-realistic-data-for-ui-design">Using mockup data</a> gives you the ability to see your work in “real life” conditions, rather than in a pixel-perfect dreamland. This helps to spot problematic elements that could break the design.<br />
<br /><br /></li>
<li><strong>Version Control</strong><br />
<br />Another real advantage of static files is the ability to check them into version control. Branching off to try something new or reverting back to an older design is as easy as finding the appropriate git command.<br />
<br /><br /></li>
<li><strong>Test and Iterate</strong><br />
<br />Testing responsive features on different devices works effortlessly through <a href="https://browsersync.io/">BrowserSync</a>, and clients can try the look and feel of things on their own laptops and iPhones - they love that 😍.</li>
</ul>
<p>Sound good so far? Cool.<br /><br />
So how can we best go about doing this?</p>
<hr />
<h2 id="h-generating-the-files"><a class="heading-anchor" href="https://mxb.dev/blog/prototyping-app-with-static-html/#h-generating-the-files" aria-hidden="true">#</a> Generating the Files</h2>
<p>To build our static prototype, first we need a good templating language. My tool of choice here is <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a>, a powerful engine built by Mozilla. It integrates nicely with node-based build setups and is crazy extensible. But, you could just as easily do this with <a href="http://shopify.github.io/liquid/">Liquid</a>, <a href="http://handlebarsjs.com/">Handlebars</a>, or the like. The only important thing to remember is that your choice of templating language shouldn’t impose a particular structure on you and is flexible enough to handle anything you throw at it.</p>
<p>Most of these work in a very similar way: You define templates that contain “blocks”, which are dedicated areas in the markup that can then be extended by other templates, or populated with content.</p>
<p>The folder structure in my setup has three main parts:</p>
<p>📂 <strong>1) layout</strong> contains the basic templates. There is usually a base template that just holds the outermost html elements like <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> and loads the CSS and Javascript. You can then extend this base template to create other, more complex reusable layouts.</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- base.html (simplified) --></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><br />    {% block content %}{% endblock %}<br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>See that <code>{% block %}</code> thing? That’s where you can inject other templates to get more refined:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- layout-2col.html --></span><br />{% extends "base.html" %}<br /><br />{% block content %}<br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br /><br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        {% block main %}{% endblock %}<br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br /><br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />        {% block sidebar %}{% endblock %}<br />      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br /><br />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br />{% endblock %}</code></pre>
<p>📂 <strong>2) components</strong> is the folder for all the building blocks of your application. Basically anything that can be isolated and reused goes in here. This can be stuff like headers, menus, posts, user avatars … you get the idea. Files should be self-contained and named like the root class of the component.</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- post.html --></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ post.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post__excerpt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ post.content | truncate(50) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code></pre>
<p>The <abbr title="Block-Element-Modifier">BEM</abbr> naming scheme really comes in handy here, because you can properly namespace your components to avoid conflicts with other ones. It’s also good practice to have a separate SCSS partial for every component (<code>_post.scss</code>, <code>_avatar.scss</code>…).</p>
<p>Include your new component in other templates with <code>{% include post.html %}</code>.<br />
You can of course also have things like <a href="https://mozilla.github.io/nunjucks/templating.html#tags">loops and if statements</a>, and pass data to your components:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- variable {{post}} will be available inside post.html --></span><br />{% for post in data %}<br />  {% include post.html %}<br />{% endfor %}</code></pre>
<p>📂 <strong>3) views</strong> is where all the different sub-pages of your app are defined. This could be stuff like <code>index</code>, <code>detail</code> or <code>settings</code>.<br />
The templating system will look at the files in this folder and generate a matching HTML document for each of them, looking up all its dependencies (components and layouts) recursively.</p>
<p>The view files should ideally only arrange different components, and have very little to no markup of their own, to keep everything nice and <abbr title="Dont repeat yourself">DRY</abbr>.</p>
<h2 id="h-using-realistic-data-for-ui-design"><a class="heading-anchor" href="https://mxb.dev/blog/prototyping-app-with-static-html/#h-using-realistic-data-for-ui-design" aria-hidden="true">#</a> Using realistic data for UI design</h2>
<p>Designers (myself included), sometimes tend to make things “too pretty” to produce nice-looking mockups for the client.</p>
<figure class="extend">
  <img src="https://mxb.dev/blog/prototyping-app-with-static-html/apple-watch.jpg" alt="Apple Watch Models" />
  <figcaption>Look at all my cool model friends with four-letter names.</figcaption>
</figure>
<p>In the real world however, things don’t always work that way. People will have long names with non-english characters. People will upload low-resolution or no images. People will break your carefully balanced typography rules.</p>
<p>And that’s OK - a good design should anticipate such problems and be flexible enough to handle them. By using more realistic data right from the start, it’s easier to think about these things.</p>
<p>Here’s where static HTML prototypes shine. One of their big benefits is the ability to easily incorporate any kind of mockup data into the UI. This means you can design your application with “real life” content in mind.</p>
<p>Mockup data generators like <a href="https://www.mockaroo.com/">Mockaroo</a> give you a simple interface to quickly produce demo data in any structure you like. Say you needed some sample users for your app:</p>
<figure class="extend">
  <img src="https://mxb.dev/blog/prototyping-app-with-static-html/mockaroo.png" alt="The Mockaroo UI, different field types define the structure of a data ressource" />
</figure>
<p>Mockaroo lets you define your data as a collecton of fields and it has a field type for almost anything you can think of. You can generate text, images, bitcoin addresses - you name it. It can also give you a predefined percentage of random blank fields.<br />
When you’re done, save your schema (in case it changes later), and download the mock data as a JSON file.</p>
<p>Finally, plug that into your prototyping setup like so:</p>
<pre class="language-js"><code class="language-js"><span class="token comment">//tasks/nunjucks.js</span><br /><span class="token keyword">var</span> demoUsers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'app/data/DEMO_USERS.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token operator">...</span><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'nunjucks'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'app/views/**/*.html'</span><span class="token punctuation">)</span><br />    <span class="token comment">//this makes the data available to the templating engine</span><br />    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />      <span class="token keyword">return</span> <span class="token punctuation">{</span><br />        <span class="token literal-property property">users</span><span class="token operator">:</span> demoUsers<br />      <span class="token punctuation">}</span><br />    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">nunjucks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Whenever your data structure changes, just update the JSON. Your demo users are now available inside all components like this:</p>
<pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- user.html --></span><br />{% set user = users | random %}<br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user__avatar<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ user.image }}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br />  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user__name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ user.first_name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><br /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<h2 id="h-migrating-to-react"><a class="heading-anchor" href="https://mxb.dev/blog/prototyping-app-with-static-html/#h-migrating-to-react" aria-hidden="true">#</a> Migrating to React</h2>
<p>When the time comes to move things over to the final development environment, it’s fairly simple to convert your components from static HTML to React. You can see by the variables contained in a file which props a component needs to receive. In many cases, you can simply copy-paste the HTML into a <code>render()</code> function as JSX. (Be sure to replace instances of <code>class</code> with <code>className</code> though).</p>
<p>👉🏾 In most React Setups, it’s possible to colocate styles with their corresponding component, and have them in their own folder. I think it’s more convenient that way. By scoping styles strictly to their own partial, reusing the <code>.scss</code> files from your static prototype is also very straightforward.</p>
<h2 id="h-free-static-prototype-kit-3000%E2%84%A2"><a class="heading-anchor" href="https://mxb.dev/blog/prototyping-app-with-static-html/#h-free-static-prototype-kit-3000%E2%84%A2" aria-hidden="true">#</a> Free Static Prototype Kit 3000™</h2>
<p>I made a custom boilerplate based on Gulp using this approach (plus a few other goodies). It’s <a href="https://github.com/maxboeck/static-prototype-kit">available on Github</a>, feel free to use/extend it anyway you want.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Three Goals for 2017</title>
            <link href="https://mxb.dev/blog/three-goals-for-2017/"/>
            <updated>2017-01-25T00:00:00Z</updated>
            <id>https://mxb.dev/blog/three-goals-for-2017/</id>
            <content type="html"><![CDATA[
                <p class="lead">I've been a freelance web developer for about seven years now.</p>
<p>I started making websites when I was still in school - I used to do fun little sites for local bands, events and other things. At some point I decided to do it professionally, registered my business and had my first real clients.</p>
<p>I’ve learned a lot since then, and I still do now. At the beginning of 2017, I did some thinking about where I wanted things to go for me.</p>
<h2 id="h-why-i-love-the-web"><a class="heading-anchor" href="https://mxb.dev/blog/three-goals-for-2017/#h-why-i-love-the-web" aria-hidden="true">#</a> Why I love the web</h2>
<p>I can still remember what it was like to build my first website. I had absolutely no clue how to do stuff, it was all trial and error. But going back and forth between blogs, tutorials and stack overflow, watching other people work, shamelessly copying bits and pieces - I improved.</p>
<p>The fact that I can just hit <code>view source</code> on any website and see how it’s made still amazes me.</p>
<p>Altough I have a degree in web development now, I can honestly say that I learnt most of what I do by soaking up information available on the open web.</p>
<p>This is only made possible by lots of talented people who not only produce great work, but dedicate their time and energy to show others how to do it, too. I don’t know any other profession with such an open exchange of knowledge.</p>
<p>People from around the world actually work together on open-source projects, just to build something that others can use. Top developers in the field will share their latest findings publicly in carefully crafted tutorials and code examples on Github.</p>
<p>Think about how amazing that is - an entire industry where you can learn every last secret of the trade for free - all you need is dedication and an internet connection.</p>
<blockquote class="twitter-tweet" data-lang="en">
  <p lang="en" dir="ltr">Twitter is great because the creator of JavaScript will help you with JavaScript within 7 minutes <a href="https://t.co/3XrQZtTF7E">pic.twitter.com/3XrQZtTF7E</a>
  </p>
  &mdash; Wes Bos (@wesbos) 
  <a href="https://twitter.com/wesbos/status/818571126150406144">January 9, 2017</a>
</blockquote>
<p>Coincidentally, this is also the only way people can keep up with all the new developments being made in this fast-paced industry. If we didn’t share, we’d stop moving.</p>
<p>I want to keep moving.</p>
<hr />
<h2 id="h-goal-1-get-more-involved-in-the-developer-community"><a class="heading-anchor" href="https://mxb.dev/blog/three-goals-for-2017/#h-goal-1-get-more-involved-in-the-developer-community" aria-hidden="true">#</a> Goal #1: Get more involved in the Developer Community</h2>
<p>Oddly enough, I’ve always felt that writing or speaking about the web was more difficult for me than to actually code or design things. It just doesn’t flow that well for me. However, I want to make en effort to change that.</p>
<p>👉 <strong>In 2017, I want to…</strong></p>
<ul>
<li>write more and better blog posts</li>
<li>speak at meetups or small conferences</li>
<li>engage in more conversations on twitter</li>
</ul>
<figure class="extend">
  <a href="http://webcomicname.com/image/149086481309">
    <img src="https://mxb.dev/blog/three-goals-for-2017/webcomicname-selfdoubt.jpg" alt="A web comic about self doubt" />
  </a>
  <figcaption>me, browsing github</figcaption>
</figure>
<p>Sometimes it can be difficult to think of something worth sharing. There’s always a level of self-doubt involved.</p>
<blockquote>
"Somebody else has probably already written a better version of this anyway. Besides, you don't even really know what you're doing."
  <footer>
    &mdash; <cite>your stupid brain</cite>
  </footer>
</blockquote>
<p>It’s easy to find reasons not to do it in the first place. But no matter what your skillset is, sharing your progress is <strong>always</strong> helpful. Even if you’re just starting out, a lot of beginners might look exactly for that first-steps perspective, where you can see questions that more experienced authors might not even consider.</p>
<p>But its not just giving back to the community. A much more selfish motivation (at least for me) is that by teaching others, you become a better developer yourself.</p>
<blockquote>
  "If you can't explain something simply, you don't understand it well enough."
  <footer>
    &mdash; <cite>Albert Einstein</cite>
  </footer>
</blockquote>
<p>I think teaching / talking / writing about stuff forces you to organize your thoughts.<br />
You need to research the whys behind any given topic to be able to explain it to somebody else - and that, in turn, improves your own understanding as well.</p>
<h2 id="h-goal-2-do-more-interesting-projects"><a class="heading-anchor" href="https://mxb.dev/blog/three-goals-for-2017/#h-goal-2-do-more-interesting-projects" aria-hidden="true">#</a> Goal #2: Do more interesting Projects</h2>
<p>I’ve come to find that I learn best when I can apply new techniques to an <a href="https://mxb.dev/blog/the-relaunch-post/">actual real-life project</a>. That’s why I try to include something new in everything I work on, to get myself out of the comfort zone.</p>
<p>Finding good, interesting work isn’t always easy though. This is still my job and I’ve got bills to pay, so there’s a business side to it. But at the same time, doing the same “standard” projects over and over again won’t push me forward, and is ultimately not why I’m in this career.</p>
<p>👉 <strong>In 2017, I want to…</strong></p>
<ul>
<li>find work that lets me explore new directions</li>
<li>find clients who do interesting things</li>
<li>find good ideas to build as side projects</li>
</ul>
<h2 id="h-goal-3-work-on-the-basics"><a class="heading-anchor" href="https://mxb.dev/blog/three-goals-for-2017/#h-goal-3-work-on-the-basics" aria-hidden="true">#</a> Goal #3: Work on the Basics</h2>
<p>I’ve seen a lot of <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">“technology fatigue”</a> posts in the last year. And I get it - things are moving so damn fast that developers are tired of having to learn a shiny new framework every two months. People are annoyed that simple tasks can require 14 different tools now. They are also worried about being left behind.</p>
<figure>
  <a href="http://www.commitstrip.com/en/2016/04/26/the-just-got-back-from-a-conference-effect/">
    <img src="https://mxb.dev/blog/three-goals-for-2017/commitstrip-conference.jpg" alt="webcomic about a coder who just come back from a conference, hyped on new technology" />
  </a>
</figure>
<p>The thing is though - underneath it all, the ingredients never change. It’s always HTML, CSS and Javascript. The fundamental building blocks are the same, they’re just expressed differently.</p>
<p>Part of the beauty of web standards is that they never truly break. I could look at that first website I made back then in a modern browser today, and it would still work. I could still access all the content (although it would be laid out in <code>&lt;TABLE&gt;</code>s and cluttered with janky GIFs).</p>
<p>A good knowledge of the fundamentals also makes it a lot easier to learn the new hot stuff, because that’s whats actually under the hood.</p>
<p>So if there’s any safe horse to bet on in terms of learning web technology, it’s the basics.</p>
<p>👉 <strong>That’s why in 2017, I want to…</strong></p>
<ul>
<li>get better at vanilla JS and ES6.</li>
<li>learn some of the newer CSS concepts like grid</li>
<li>really focus on accessibility and performance</li>
</ul>
<h2 id="h-getting-there"><a class="heading-anchor" href="https://mxb.dev/blog/three-goals-for-2017/#h-getting-there" aria-hidden="true">#</a> Getting There</h2>
<p>As with any type of resolution, accomplishing these goals will take some effort. I hope that by putting them up here, I’ll feel a little more motivation to actually follow through.</p>
<p>I have some changes coming up this year, and I’m excited to see where it will take me!</p>

            ]]></content>
        </entry>
        <entry>
            <title>The Relaunch Post</title>
            <link href="https://mxb.dev/blog/the-relaunch-post/"/>
            <updated>2017-01-16T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-relaunch-post/</id>
            <content type="html"><![CDATA[
                <p class="lead">Two weeks into 2017, I used some spare time to relaunch my website.</p>
<p>I do this almost every year - not (only) because of my neverending quest to optimize the shit out of it, but because it’s a great way for me to try new things I want to learn on a “real life” project.</p>
<p>Altough it’s a fairly simple site - basically just a small portfolio section, a blog and a contact form, it’s still a good exercise to see how different modern workflows can come into play.</p>
<p>So here is the way I did it in 2017. This might get a bit lenghy and technical, but hang in there.</p>
<p><strong>TL; DR:</strong></p>
<ul>
<li>Jekyll Static Files</li>
<li>BEM-flavoured CSS (w/ Critical Path Inlining)</li>
<li>Vanilla JS (ES6 / Babel)</li>
<li>System Fonts &amp; FontFaceObserver</li>
<li>Offline Support w/ Service Worker</li>
<li>Focus on Speed and Accessibility</li>
</ul>
<p>All source files are <a href="https://github.com/maxboeck/mxb">available on Github</a>, if you’re interested.</p>
<h2 id="h-going-static"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-going-static" aria-hidden="true">#</a> Going Static</h2>
<p>While previous versions of this site were all built on WordPress, this year I finally decided to switch to a static file generator, <a href="https://jekyllrb.com/">Jekyll</a>.</p>
<p>Jekyll blogs are typically run by developers or other tech-savvy people, as they require a bit of knowledge about tooling and setup, and posts are usually written in Markdown. It’s definitely harder to get started than with a 1-minute WordPress install, but it’s worth it:</p>
<p>Static files are faster, safer and more resilient than a database-driven site.<br />
Plus using any sort of CMS always restricts you to doing things a certain way - and I wanted full control over the barebones HTML.</p>
<p>The out-of-the box Jekyll setup includes a development server and support for SCSS preprocessing.<br />
However, I wanted a little more - so my first step was to build a <a href="https://github.com/maxboeck/jekyll-gulp">custom boilerplate with Jekyll and Gulp</a> to do the heavy lifting.</p>
<h2 id="h-design"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-design" aria-hidden="true">#</a> Design</h2>
<p>Design-wise, I’ve always been a fan of minimalism - so it’s no surprise that this year’s iteration turned out to look very clean and reduced again.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Content precedes design. Design in the absence of content is not design, it&#39;s decoration.</p>&mdash; Jeffrey Zeldman (@zeldman) <a href="https://twitter.com/zeldman/status/804159148">March 5, 2008</a></blockquote>
<p>Keeping true to this premise, I focused more on the content, on good typography and readability; and I think it turned out nice. While I dont think that every site should look as “boring” as this one - cause I really enjoy the crazy creative things others come up with - for me, it was a good fit.</p>
<h2 id="h-accessibility"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-accessibility" aria-hidden="true">#</a> Accessibility</h2>
<p>I read a lot about accessibility last year, most recently the highly recommended <a href="https://www.smashingmagazine.com/inclusive-design-patterns/">“Inclusive Design Patterns”</a> by Heydon Pickering. It gave me some very valuable practical advice on the subject.</p>
<p>The biggest takeaway for me was to not treat accessibility as an add-on to further improve an exisiting website, but to design websites “inclusive” right from the start. Trying to think of all the use cases outside of your own bubble first, to make a site <strong>everyone</strong> can use.</p>
<p>I believe that a good website should be able to handle almost any scenario you can throw at it, and still manage to provide content in a usable form. So for the relaunch, I wanted to incorporate this knowledge and push for a really flexible, accommodating design.</p>
<p>A few of those features include:</p>
<ul>
<li>semantic, structured HTML &amp; microformats</li>
<li>landmark roles and WAI-ARIA attributes for screen readers</li>
<li>UI doesn’t rely on color perception</li>
<li>content can be navigated by keyboard in a logical way</li>
<li>entire site scales in relation to default font size (rem-based)</li>
<li>top level pages are cached by Service Worker for offline use</li>
</ul>
<h2 id="h-javascript"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-javascript" aria-hidden="true">#</a> Javascript</h2>
<p>I have to admit that I had become a bit lazy with jQuery. Relying too much on the framework to do basic tasks made me dependent on it, and using jQuery for everything adds unnecessary bloat.<br />
So as part of my ongoing effort to <em>really</em> get better at Javascript, I wrote everything in plain vanilla ES6 this time.</p>
<p>I found a few select microservices to handle things like lazy loading or basic ajax requests, making sure to include just the absolute minimum. All of them were available via <code>npm install</code> and can be consumed as modules, first thing in the main file:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">import</span> FontFaceObserver <span class="token keyword">from</span> <span class="token string">'fontfaceobserver'</span><span class="token punctuation">;</span> <span class="token comment">//font loading</span><br /><span class="token keyword">import</span> Blazy <span class="token keyword">from</span> <span class="token string">'blazy'</span><span class="token punctuation">;</span> <span class="token comment">// lazy images</span><br /><span class="token keyword">import</span> NanoAjax <span class="token keyword">from</span> <span class="token string">'nanoajax'</span><span class="token punctuation">;</span> <span class="token comment">//ajax</span><br /><span class="token keyword">import</span> Util <span class="token keyword">from</span> <span class="token string">'./lib/util'</span><span class="token punctuation">;</span> <span class="token comment">//custom helpers</span></code></pre>
<p>For some of the stuff that is usually provided by jQuery, I created a separate <code>Utils.js</code> file to import. Things like serializing form data or getting the parent DOM node of an element can easily be recreated as simple functions, and then called like <code>Util.serialize()</code>.</p>
<p>I also made an effort not to use a third-party plugin for the <a href="https://mxb.dev/contact">contact form</a>, but to build as much as possible from scratch.</p>
<p>The final minified and gzipped JS file weighs in at just <strong>8.4KB</strong>, quite small compared to the hefty 68KB I had before. Feels good 😎.</p>
<h3 id="h-defer-all-the-things"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-defer-all-the-things" aria-hidden="true">#</a> Defer all the things!</h3>
<p>Since the site basically works fine without Javascript too, there’s really no reason to have it block the rendering. The webpack-generated main JS file <code>bundle.js</code> can therefore be defered quite easily.</p>
<p>For a few ressources that are not related to the function of the site itself, I’ve taken it a step further still. I used my favourite <a href="https://mxb.at/blog/javascript-defering-snippet/">defering snippet</a> to make sure stuff like analytics, polyfills or the twitter API are loaded last, when the site is already done and rendered.</p>
<h2 id="h-fonts"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-fonts" aria-hidden="true">#</a> Fonts</h2>
<p>Taking a page out of Github’s playbook, I used system fonts for the body copy (and emoji) 🍺.<br />
They look great, support all languages and fit in nicely with the rest of the device UI. And best of all, they’re available without a single network request.<br />
Here’s the full body font stack:</p>
<pre class="language-sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$body-font</span><span class="token punctuation">:</span> -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", </span><br /><span class="token string">"Oxygen"</span><span class="token punctuation">,</span> <span class="token string">"Ubuntu"</span><span class="token punctuation">,</span> <span class="token string">"Cantarell"</span><span class="token punctuation">,</span> <span class="token string">"Fira Sans"</span><span class="token punctuation">,</span> <span class="token string">"Droid Sans"</span><span class="token punctuation">,</span> <br /><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">,</span> <span class="token string">"Apple Color Emoji"</span><span class="token punctuation">,</span> <span class="token string">"Segoe UI Emoji"</span><span class="token punctuation">,</span> <span class="token string">"Segoe UI Symbol"</span><span class="token punctuation">;</span></code></pre>
<p>Titles are set in Playfair Display, a font availabe on Google Fonts. I chose to self-host it, and provide fonts only in woff and woff2 formats. That’s not totally bulletproof, but more future-friendly.</p>
<p>And besides, <a href="https://calendar.perfplanet.com/2016/no-font-face-bulletproof-syntax/">no font-face syntax will ever be bulletproof, nor should it be</a>.</p>
<p>For <code>@font-face</code> loading, I used Bram Stein’s <a href="https://github.com/bramstein/fontfaceobserver">FontFaceObserver</a> to make sure users wouldn’t see a <abbr title="Flash of Invisible Text">FOIT</abbr> on page load. Titles fall back to the similiar looking <em>Times New Roman</em> until the font is ready.</p>
<p>A couple of additional tweaks here:</p>
<h3 id="h-preload-the-font-as-early-as-possible"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-preload-the-font-as-early-as-possible" aria-hidden="true">#</a> Preload the font as early as possible</h3>
<pre class="language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playfair-display-regular.woff2<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font/woff2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h3 id="h-optimize-for-repeat-visits"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-optimize-for-repeat-visits" aria-hidden="true">#</a> Optimize for repeat visits</h3>
<p>Once the font is cached, we can use it straight away. There’s no reliable way to detect this though - I settled on a cookie-like solution (I say “like”, because it actually uses session storage). The length of a browser session is a reasonable timespan to assume for a valid cache, so I set a flag when the font is first loaded.</p>
<p>The whole fontface observer code looks like this:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />  <span class="token keyword">if</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'fontsLoaded'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br />    <span class="token keyword">return</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><br />  <br />  <span class="token keyword">const</span> playfairObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FontFaceObserver</span><span class="token punctuation">(</span><span class="token string">'Playfair Display'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  playfairObserver<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'fonts-loaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />    sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'fontsLoaded'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'fonts-loaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br />  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span></code></pre>
<h2 id="h-performance"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-performance" aria-hidden="true">#</a> Performance</h2>
<p>Speed was a major factor in the relaunch process. It’s not that my blog is particulary heavy or gets that much traffic, but I’m super interested in performance optimization and wanted to see how far I could take things.</p>
<p>I tested using Webpagetest, Google PageSpeed and Lighthouse, looking especially at three metrics:</p>
<ul>
<li>time to first meaningful paint</li>
<li>speed index</li>
<li>total # of requests</li>
</ul>
<h3 id="h-let%E2%80%99s-get-critical"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-let%E2%80%99s-get-critical" aria-hidden="true">#</a> Let’s get critical</h3>
<p>A good method to improve page performance is to try and render the initial view within the first network request (the first 14KB or so). To achieve this, a subset of the full CSS is inlined in the page head.</p>
<p>Determining exactly which styles are necessary to render the page at a given viewport is a little tricky and would be quite cumbersome, if one were to do it manually. Thankfully, the smart people of the internet (namely Google’s Addy Osmani) have developed a tool for that:</p>
<p><a href="https://github.com/addyosmani/critical">Critical</a> is a gulp plugin that takes in a set of pages and a viewport width/height, then looks at these pages, extracts all applied styles and injects them into the <code>&lt;head&gt;</code>.</p>
<p>Configuration is very simple:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><br />  <span class="token literal-property property">inline</span><span class="token operator">:</span>   <span class="token boolean">true</span><span class="token punctuation">,</span> <br />  <span class="token literal-property property">base</span><span class="token operator">:</span>     <span class="token string">'_site'</span><span class="token punctuation">,</span><br />  <span class="token literal-property property">minify</span><span class="token operator">:</span>   <span class="token boolean">true</span><span class="token punctuation">,</span><br />  <span class="token literal-property property">width</span><span class="token operator">:</span>    <span class="token number">1280</span><span class="token punctuation">,</span><br />  <span class="token literal-property property">height</span><span class="token operator">:</span>   <span class="token number">800</span><span class="token punctuation">,</span><br />  <span class="token literal-property property">ignore</span><span class="token operator">:</span>   <span class="token punctuation">[</span><span class="token string">'@font-face'</span><span class="token punctuation">]</span><br /><span class="token punctuation">}</span><span class="token punctuation">;</span><br /><br />gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'critical'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><br />  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>critical<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><br />    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'_site'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br /><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The task inserts the extracted styles in a <code>&lt;style&gt;</code> tag and includes a tiny script to load the main CSS after the page is done:</p>
<figure class="extend">
  <img alt="Inserted inline CSS in head" src="https://mxb.dev/blog/the-relaunch-post/critical-css.jpg" />
</figure>
<h3 id="h-offline-is-the-new-black"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-offline-is-the-new-black" aria-hidden="true">#</a> Offline is the new black</h3>
<p>To establish offline support, there’s no way around <strong>Service Worker</strong>.<br />
A Service Worker is essentially a piece of Javascript that sits between the client and the network,<br />
to intercept requests and deliver assets, even without an internet connection. It’s a powerful thing.</p>
<p>A few requirements for this to work though:</p>
<ul>
<li>The Browser has to <a href="http://caniuse.com/#feat=serviceworkers">support service workers</a></li>
<li>Only secure connections over HTTPS are allowed</li>
</ul>
<p>There are different methods of letting SW handle network requests, you can find a great outline in <a href="https://jakearchibald.com/2014/offline-cookbook">The Offline Cookbook</a>, written by Jake Archibald.</p>
<p>On my site, I opted for a pretty simple approach. Since it’s all static files, I can pre-cache the most important assets and top-level pages in a Service Worker to drastically reduce the amount of data and network requests necessary. When a client first hits the site, the SW installs itself and caches a list of ressources with it, after the page has loaded:</p>
<figure class="extend">
  <img alt="network requests made by Service Worker" src="https://mxb.dev/blog/the-relaunch-post/sw-install.jpg" />
  <figcaption>See the small Cog Icon? That's the ServiceWorker doing its thing.</figcaption>
</figure>
<p>Now, once it is active, the SW can intercept all requests to files in its cache, providing them instantly on the next call.<br />
Here’s what happens when the client navigates to another page:</p>
<figure class="extend">
  <img alt="cached assets delivered by the service worker" src="https://mxb.dev/blog/the-relaunch-post/sw-active.jpg" />
</figure>
<p>Everything important is instantly available. Even when offline, these assets can be accessed.</p>
<p>Managing the Service Worker of course also means keeping track of what has changed, to replace deprecated assets with new versions.<br />
To make this easy, I used a tool provided by the Chrome team called <a href="https://github.com/GoogleChrome/sw-precache">sw-precache</a>.<br />
It can be integrated in the build process to check for changes everytime the site is deployed.</p>
<p>When it finds something has changed, it generates a new <code>sw.js</code> Service Worker file, which will replace the old one <a href="https://www.youtube.com/watch?v=TF4AB75PyIc">as soon as no one’s looking</a>. You can simply pass it a set of files to watch, and never have to worry about cache invalidation again.</p>
<h3 id="h-the-results-%F0%9F%8E%89"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-the-results-%F0%9F%8E%89" aria-hidden="true">#</a> The Results 🎉</h3>
<p>Here’s how it turned out. I’m pretty happy with it!</p>
<h4 id="h-webpagetest"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-webpagetest" aria-hidden="true">#</a> WebpageTest</h4>
<figure class="extend">
  <img src="https://mxb.dev/blog/the-relaunch-post/webpagetest.png" alt="webpagetest results" />
  <figcaption>SpeedIndex under 1000! also note the improvement on repeat views due to service worker.</figcaption>
</figure>
<h4 id="h-google-pagespeed"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-google-pagespeed" aria-hidden="true">#</a> Google PageSpeed</h4>
<figure class="extend">
  <img src="https://mxb.dev/blog/the-relaunch-post/pagespeed.jpg" alt="pagespeed results" />
  <figcaption>analytics is not properly cached - oh the irony <span style="font-style:normal">😒</span></figcaption>
</figure>
<h4 id="h-google-lighthouse"><a class="heading-anchor" href="https://mxb.dev/blog/the-relaunch-post/#h-google-lighthouse" aria-hidden="true">#</a> Google Lighthouse</h4>
<figure class="extend">
  <img src="https://mxb.dev/blog/the-relaunch-post/lighthouse.jpg" alt="lighthouse results" />
</figure>
<p>Alright, that’s it! Let’s see how much of this still holds up in 2018. See you then!</p>

            ]]></content>
        </entry>
        <entry>
            <title>Frontend Developer Interview Answers</title>
            <link href="https://mxb.dev/blog/frontend-developer-interview-answers/"/>
            <updated>2015-04-25T00:00:00Z</updated>
            <id>https://mxb.dev/blog/frontend-developer-interview-answers/</id>
            <content type="html"><![CDATA[
                <p class="lead">
I recently came across the H5BP’s <a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">Frontend Developer Interview Questions</a>. It’s a collection of questions related to building websites, meant for employers to vet potential candidates for a job.
</p>
<p>Although I’m currently not looking for a (regular) job, I thought it would be interesting to try and answer as many as possible and see where I stand.</p>
<p>I think when you first start learning about web development, you cover all these basic principles, but once you get better and move on to more advanced problems, you don’t really think about them anymore. So it can’t hurt to revise that stuff every once in a while, right?</p>
<p>There’s questions on HTML, CSS, JavaScript and general programming knowledge.<br />
It was an interesting exercise because it got me thinking a lot about these fundamentals. If you’re interested, I published <a href="https://github.com/maxboeck/Front-end-Developer-Interview-Questions">my answers on github</a>.</p>
<p>Of course, some of these questions depend strongly on the context, and some are deliberately phrased to provoke a discussion. It’s a lot of questions, and I didn’t want to write a novel there (since, again, this was just for my own curiosity).</p>
<p>So my answers are far from perfect and in some cases barely scratch the surface of a topic. But hey, I’m not on trial here, so calm down 😉</p>
<figure class="extend">
  <img src="https://mxb.dev/blog/frontend-developer-interview-answers/ihavenoideawhatimdoing.jpg" alt="I have no idea what I'm doing" />
</figure>
            ]]></content>
        </entry>
        <entry>
            <title>The Lost Art of the Gigposter</title>
            <link href="https://mxb.dev/blog/the-lost-art-of-the-gigposter/"/>
            <updated>2015-01-03T00:00:00Z</updated>
            <id>https://mxb.dev/blog/the-lost-art-of-the-gigposter/</id>
            <content type="html"><![CDATA[
                <p>I’m a big fan of good looking band art. Sadly though, unlike other countries, Austria doesn’t really have a culture of well designed concert posters - they’re usually just bold type on bright neon paper stapled to a signpost. So for a long time, collecting and designing covers and gig posters for local bands has been one of my favourite hobbies. I just love when music and design come together like this.</p>
<p>There are some very talented people out there dedicated to poster art. Some of my personal heroes, for example, include <a href="http://www.dkngstudios.com/work/gig-posters/">DKNG Studios</a>, <a href="http://ollymoss.com/">Olly Moss</a> and <a href="http://tragicsunshine.com/band_posters/">Kevin Tong</a>. Go check em out if you have time, they’re all brilliant.</p>
<p>Here are a few of my own works that I made over the years:</p>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/rage2016.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/stwoodstock.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/waiting.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/burst.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/treeposter.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/sovjet.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/herzbuben.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/skybreak.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/monkeyposter.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/flammable.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/disominds.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>
<figure>
    <img src="https://mxb.dev/blog/the-lost-art-of-the-gigposter/rage2017.jpg" style="border:1px solid #EAEAEA" alt="" />
</figure>

            ]]></content>
        </entry>
        <entry>
            <title>Music to work to</title>
            <link href="https://mxb.dev/blog/music-to-work-to/"/>
            <updated>2014-12-14T00:00:00Z</updated>
            <id>https://mxb.dev/blog/music-to-work-to/</id>
            <content type="html"><![CDATA[
                <p class="lead">
I don't like to work in silence. Especially when I'm doing something that needs concentration, I keep my best focus with the right background music. 
</p>
<p>There’s different types of sound for different tasks - for example, I like to do creative work with calm, relaxed acoustic stuff. On the other hand, some late-night coding sessions are best fueled by something with a little more drive - I like the Prodigy’s “The Fat of the Land”.</p>
<p>A number of options exist to provide music while working, the easiest being your own private MP3 collection. Everyone has one of those, but if you’re like me and spend a lot of time in front of the computer, your best playlists will sound dull after the 43<sup>rd</sup> rerun.</p>
<p>I recently switched to Spotify, which provides me with an endless stream of new songs and artists. A major drawback are the advertisements in between though, plus it’s hard too find some of the more obscure tracks. I do like some of the predefined “mood” playlists for working though, there’s quite a few of them called “Focus” or similar.</p>
<figure class="extend">
  <img src="https://mxb.dev/blog/music-to-work-to/spotify-playlists.jpg" alt="Collection of Spotify Playlists" />
  <figcaption>Some working music playlists on spotify</figcaption>
</figure>
<p>Another option is to let go of music and melody completely and switch to atmospheric sounds. There’s a couple of good ressources for that, my newest discovery is a free OSX-App called <a href="http://noiz.io/">Noiz.io</a>. It runs on your mac and lets you create your own ambient background sound mix. Choose from coffee house, light thunderstorms, a crackling fireplace - or maybe rolling waves at a beach? It’s really quite nice.</p>
<p>Another good ambient noise generator is <a href="http://defonic.com/">defonic.com</a>, a website with even more sources for you to choose from. You can mix your own custom background symphony.</p>

            ]]></content>
        </entry>
        <entry>
            <title>Travelling</title>
            <link href="https://mxb.dev/blog/travelling/"/>
            <updated>2012-10-17T00:00:00Z</updated>
            <id>https://mxb.dev/blog/travelling/</id>
            <content type="html"><![CDATA[
                <p class="lead">
  For the last couple of years, I've been fortunate enough to see quite a few beautiful places on this planet. 
</p>
<p>Most of these pictures were shot by my girlfriend, Tina.</p>
<figure>
    <img src="https://mxb.dev/blog/travelling/vienna.jpg" alt="" loading="lazy" />
    <figcaption>My Home Town, Vienna</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/india.jpg" alt="" loading="lazy" />
    <figcaption>On a broken motorcycle, near the Pakistan border</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/borobudur.jpg" alt="" loading="lazy" />
    <figcaption>Buddhist temple at Borobudur, Java</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/granada.jpg" alt="" loading="lazy" />
    <figcaption>The hills of Granada, Spain</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/langkawi.jpg" alt="" loading="lazy" />
    <figcaption>Rainforest on Langkawi, Malaysia</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/ubud.jpg" alt="" loading="lazy" />
    <figcaption>Rice fields in Ubud, Bali</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/newyork.jpg" alt="" loading="lazy" />
    <figcaption>View from Central Park, New York</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/lembongan.jpg" alt="" loading="lazy" />
    <figcaption>Sunset on Nusa Lembongan Island, Indonesia</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/niagara.jpg" alt="" loading="lazy" />
    <figcaption>Niagara Falls, at the US/Canadian border</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/singapore.jpg" alt="" loading="lazy" />
    <figcaption>Botanical Gardens, Singapore</figcaption>
</figure>
<figure>
    <img src="https://mxb.dev/blog/travelling/portugal.jpg" alt="" loading="lazy" />
    <figcaption>Sagres - &quot;The End of the World&quot;, Portugal</figcaption>
</figure>

            ]]></content>
        </entry></feed>
